<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech Art Learning</title>
  
  
  <link href="http://xingyulei.xyz/atom.xml" rel="self"/>
  
  <link href="http://xingyulei.xyz/"/>
  <updated>2021-08-31T03:18:53.353Z</updated>
  <id>http://xingyulei.xyz/</id>
  
  <author>
    <name>Xingyu Lei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>State Machine Unity Scripting API</title>
    <link href="http://xingyulei.xyz/post/unity-api-statemachine/"/>
    <id>http://xingyulei.xyz/post/unity-api-statemachine/</id>
    <published>2021-08-29T04:00:00.000Z</published>
    <updated>2021-08-31T03:18:53.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>This post is not about state machine basic, rather how we would setup/access state machine parameters.<br />There is a higher level <code>Animator</code> class to access a part of the animator features, but we need to use<br />Unity’s <code>Animations</code> package in order to dive deeper.</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor.Animations;</span><br></pre></td></tr></table></figure><p>There’s a lot of parts composing Unity’s Animator: Layer, Parameter, State machine (and everything inside it<br />including states of different kind, transition between states), there are of course multiple parameters inside a single state.</p><p>The examples in this post is only about accessing states and state machines, as the rest is translatable.</p><p>We start from the root: Base layer, if you think about it, a layer is essentially a state machine.<br />Inside this root state machine are sets of states (including blend tree/state/sub-state machine)</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getting the base layer state machine</span></span><br><span class="line">AnimatorStateMachine rootStateMachine = controller.layers[<span class="number">0</span>].stateMachine;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HuSyYGs.png" alt="base layer state machine" /></p><p>(Base Layer)</p><p>Next up, a very confusing part of the scripting process are the definition of<br /><code>AnimatorStateMachine</code> vs. <code>ChildAnimatorStateMachine</code> and <code>AnimatorState</code> vs. <code>ChildAnimatorState</code>.<br />I really wish Unity provides internal ways to cast these to each other.</p><p>To summarize:</p><ul><li><p><code>ChildAnimatorStateMachine[]</code> and <code>ChildAnimatorState[]</code> is used in conjunction with Arrays as <code>AnimatorStateMachine.states</code> and<br /><code>AnimatorStateMachine.stateMachines</code> will return the previous mentioned type.</p></li><li><p>Instead of casting, they have an internal property <code>ChildAnimatorStateMachine.stateMachine</code> and <code>ChildAnimatorState.state</code> which<br />respectively returns <code>AnimatorStateMachine</code> and <code>AnimatorState</code> type object</p></li></ul><h3 id="states"><a class="markdownIt-Anchor" href="#states"></a> States</h3><p>All states (state or. state with blendtree inside)</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ChildAnimatorState[] childStates = rootStateMachine.states;</span><br><span class="line"></span><br><span class="line">foreach(var childState in childStates)</span><br><span class="line">&#123;</span><br><span class="line">    AnimatorState state = childState.state;</span><br><span class="line">    print(state.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// state with blendtree</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        var blendTree = (BlendTree)state.motion;</span><br><span class="line"></span><br><span class="line">        foreach (var child in blendTree.children)</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">&quot;\t&quot;</span> + child.motion.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// simple state</span></span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;\t&quot;</span> + state.motion.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QbLtx2O.png" alt="simple state" /></p><p>(Simple state only contains a single clip)</p><p><img src="https://i.imgur.com/vQMjJ5z.png" alt="state with blendtree" /></p><p>(BlendTree nested in a state)</p><h3 id="sub-state-machine"><a class="markdownIt-Anchor" href="#sub-state-machine"></a> Sub-state machine</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ChildAnimatorStateMachine[] childSubStateMachines &#x3D; rootStateMachine.stateMachines;</span><br><span class="line"></span><br><span class="line">foreach(var childSubStateMachine in childSubStateMachines)&#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Convert &#96;ChildAnimatorStateMachine&#96; to &#96;AnimatorStateMachine&#96;</span><br><span class="line">    AnimatorStateMachine subStateMachine &#x3D; childSubStateMachine.stateMachine;</span><br><span class="line">    print(subStateMachine.name);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; all states in idle sub state machine</span><br><span class="line">    ChildAnimatorState[] states &#x3D; subStateMachine.states;</span><br><span class="line"></span><br><span class="line">    foreach (var childState in states)</span><br><span class="line">    &#123;</span><br><span class="line">        print(&quot;\t&quot; + childState.state.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/j6IoXLr.png" alt="sub state machine" /></p><p>(Essentially, another sub layer of state machine)</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://docs.unity3d.com/Manual/StateMachineBasics.html">https://docs.unity3d.com/Manual/StateMachineBasics.html</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Animations.AnimatorStateMachine.html">https://docs.unity3d.com/ScriptReference/Animations.AnimatorStateMachine.html</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Animator.Play.html">https://docs.unity3d.com/ScriptReference/Animator.Play.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;This post is not about state machine basic</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="c#" scheme="http://xingyulei.xyz/tags/c/"/>
    
    <category term="unity" scheme="http://xingyulei.xyz/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>How to Resize QPixmap</title>
    <link href="http://xingyulei.xyz/post/qt-pixmap-scale/"/>
    <id>http://xingyulei.xyz/post/qt-pixmap-scale/</id>
    <published>2021-08-22T04:00:00.000Z</published>
    <updated>2021-08-27T00:44:39.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><p>During my attempts to create custom alignment push buttons, I encountered an issue with icon having<br />jagged looking (even if with low resolution).</p><p>I use a custom <code>paintEvent()</code> drawing <code>QPixmap</code>, and this happens when I use <code>scaled()</code> to resize my pixmap.</p><p>I noticed the icon does not have the jagged look with the built-in <code>setIcon()</code> and <code>setIconSize</code> in<br /><code>QPushButton</code>. So I know there’s some wrong with my approach.</p><h3 id="the-test"><a class="markdownIt-Anchor" href="#the-test"></a> The Test</h3><p>To really show out the difference, I first reduce the resolution of my image.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">low_rez = QtCore.QSize(<span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">high_rez = QtCore.QSize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">pixmap = QtGui.QPixmap(path)</span><br><span class="line"></span><br><span class="line">pixmap = pixmap.scaled(low_rez)</span><br></pre></td></tr></table></figure><p>I then increase the resolution back to normal. The default scale uses <code>FastTransformation</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pixmap = pixmap.scaled(high_rez)</span><br></pre></td></tr></table></figure><p>This is the result:<br /><img src="https://imgur.com/8KiYjlW.png" alt="pixmap-not-smooth" /></p><h3 id="the-solution"><a class="markdownIt-Anchor" href="#the-solution"></a> The Solution</h3><p>I’ve searched many forums and people were all saying: enable the <code>SmoothTransformation</code>, I tried but didn’t work.</p><p>Later on I found out that the Qt translation to Python has a mis-match keyword argument:<br />so instead of <code>transformMode=Qt.SmoothTransformation</code>, it should actually be <code>mode=Qt.SmoothTransformation</code></p><p>So here’s the solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pixmap = pixmap.scaled(</span><br><span class="line">    high_rez,</span><br><span class="line">    aspectRatioMode=QtCore.Qt.KeepAspectRatio,</span><br><span class="line">    mode=QtCore.Qt.SmoothTransformation</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>and result:<br /><img src="https://imgur.com/TIjyqkm.png" alt="pixmap-smooth" /></p><h3 id="extra"><a class="markdownIt-Anchor" href="#extra"></a> Extra</h3><p>I also found post saying it might be some settings with the <code>QPainter</code>, but it is not the issue for me.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">painter = QtGui.QPainter(self)</span><br><span class="line">painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class="literal">True</span>)</span><br><span class="line">painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, <span class="literal">True</span>)</span><br><span class="line">painter.drawPixmap(self.pixmap)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://doc.qt.io/qt-5/qpixmap.html">https://doc.qt.io/qt-5/qpixmap.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h3&gt;
&lt;p&gt;During my attempts to create custom alignment push buttons, I e</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt Left Align Icon, Center Align Text (Python)</title>
    <link href="http://xingyulei.xyz/post/qt-button-alignment/"/>
    <id>http://xingyulei.xyz/post/qt-button-alignment/</id>
    <published>2021-08-21T04:00:00.000Z</published>
    <updated>2021-08-30T22:47:50.634Z</updated>
    
    <content type="html"><![CDATA[<p>I recently needed to display a series of buttons for my shelf tool, the problem I’m having with this is that<br />although every button has an icon and text label, they are displayed as different width. Using <code>center-align</code><br />made it look not uniform.</p><p>Should I go with <code>left-align</code>? Well, there are buttons with relatively longer label and some with shorter ones,<br />so it doesn’t look nice either with empty spaces on the right side.</p><p>So the solution is obvious, separate the alignment of the icon and the label: the icon stays <code>left-align</code> to<br />give a clear sign of broader, and the label would be <code>center-align</code> to make the width look uniform.</p><p><img src="https://i.imgur.com/dMOZpkH.jpg" alt="three-alignment-side-by-side" /><br />(Left: default center align, Center: left align, Right: custom align)</p><p>In the following section, I will demonstrate three methods of achieving this custom alignment effect:</p><p><img src="https://imgur.com/3G6fmVN.png" alt="push-button-alignment" /></p><h3 id="overriding-qpushbutton-paintevent"><a class="markdownIt-Anchor" href="#overriding-qpushbutton-paintevent"></a> Overriding QPushButton <code>paintEvent</code></h3><p>Create a subclass from QPushButton called MyButton:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span>(<span class="params">QtWidgets.QPushButton</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyButton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPixmap</span>(<span class="params">self, pixmap</span>):</span></span><br><span class="line">        self.pixmap = pixmap</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sizeHint</span>(<span class="params">self</span>):</span></span><br><span class="line">        parent_size = QtWidgets.QPushButton.sizeHint(self)</span><br><span class="line">        <span class="keyword">return</span> QtCore.QSize(parent_size.width() + self.pixmap.width(), <span class="built_in">max</span>(parent_size.height(), self.pixmap.height()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        QtWidgets.QPushButton.paintEvent(self, event)</span><br><span class="line"></span><br><span class="line">        pos_x = <span class="number">5</span>  <span class="comment"># hardcoded horizontal margin</span></span><br><span class="line">        pos_y = (self.height() - self.pixmap.height()) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        painter = QtGui.QPainter(self)</span><br><span class="line">        painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class="literal">True</span>)</span><br><span class="line">        painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, <span class="literal">True</span>)</span><br><span class="line">        painter.drawPixmap(pos_x, pos_y, self.pixmap)</span><br></pre></td></tr></table></figure><p>With this method, we no longer use QIcon, we use pixmap instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUI</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MethodTwo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        pb = MyButton(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        path = <span class="string">r&quot;xxx&quot;</span></span><br><span class="line">        pixmap = QtGui.QPixmap(path).scaled(<span class="number">40</span>, <span class="number">40</span>, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)</span><br><span class="line">        pb.setPixmap(pixmap)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(pb)</span><br><span class="line">        self.setLayout(layout)  </span><br></pre></td></tr></table></figure><h3 id="custom-layout-inside-pushbutton"><a class="markdownIt-Anchor" href="#custom-layout-inside-pushbutton"></a> Custom layout inside pushbutton</h3><p>Remember to send setText signals to textLabel instead of pushButton since this is label within push button’s layout</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUI</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MethodThree, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        pb = QtWidgets.QPushButton()</span><br><span class="line"></span><br><span class="line">        name = <span class="string">&quot;SP_MessageBoxCritical&quot;</span></span><br><span class="line">        icon = self.style().standardIcon(<span class="built_in">getattr</span>(QtWidgets.QStyle, name))</span><br><span class="line">        pb.setIcon(icon)</span><br><span class="line"></span><br><span class="line">        pb.setStyleSheet(<span class="string">&#x27;text-align: left;&#x27;</span>)</span><br><span class="line">        pb.setLayout(QtWidgets.QGridLayout())</span><br><span class="line">        </span><br><span class="line">        label = QtWidgets.QLabel(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)</span><br><span class="line">        label.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents, <span class="number">1</span>)</span><br><span class="line">        pb_layout = pb.layout()</span><br><span class="line">        pb_layout.addWidget(label)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(pb)</span><br><span class="line">        self.setLayout(layout)</span><br></pre></td></tr></table></figure><h3 id="use-qproxystyle"><a class="markdownIt-Anchor" href="#use-qproxystyle"></a> Use QProxyStyle</h3><p>I haven’t personally test it because I’m using a custom python Qt binding that doesn’t have QProxyStyle included</p><p>but it’s worth putting it here in case someone is able to try it</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyStyle</span>(<span class="params">QtWidgets.QProxyStyle</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawControl</span>(<span class="params">self, element, option, painter, widget=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> element == QtWidgets.QStyle.CE_PushButtonLabel:</span><br><span class="line">            icon = QtGui.QIcon(option.icon)</span><br><span class="line">            option.icon = QtGui.QIcon()</span><br><span class="line">        <span class="built_in">super</span>(ProxyStyle, self).drawControl(element, option, painter, widget)</span><br><span class="line">        <span class="keyword">if</span> element == QtWidgets.QStyle.CE_PushButtonLabel:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> icon.isNull():</span><br><span class="line">                iconSpacing = <span class="number">4</span></span><br><span class="line">                mode = (</span><br><span class="line">                    QtGui.QIcon.Normal</span><br><span class="line">                    <span class="keyword">if</span> option.state &amp; QtWidgets.QStyle.State_Enabled</span><br><span class="line">                    <span class="keyword">else</span> QtGui.QIcon.Disabled</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    mode == QtGui.QIcon.Normal</span><br><span class="line">                    <span class="keyword">and</span> option.state &amp; QtWidgets.QStyle.State_HasFocus</span><br><span class="line">                ):</span><br><span class="line">                    mode = QtGui.QIcon.Active</span><br><span class="line">                state = QtGui.QIcon.Off</span><br><span class="line">                <span class="keyword">if</span> option.state &amp; QtWidgets.QStyle.State_On:</span><br><span class="line">                    state = QtGui.QIcon.On</span><br><span class="line">                window = widget.window().windowHandle() <span class="keyword">if</span> widget <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                pixmap = icon.pixmap(window, option.iconSize, mode, state)</span><br><span class="line">                pixmapWidth = pixmap.width() / pixmap.devicePixelRatio()</span><br><span class="line">                pixmapHeight = pixmap.height() / pixmap.devicePixelRatio()</span><br><span class="line">                iconRect = QtCore.QRect(</span><br><span class="line">                    QtCore.QPoint(), QtCore.QSize(pixmapWidth, pixmapHeight)</span><br><span class="line">                )</span><br><span class="line">                iconRect.moveCenter(option.rect.center())</span><br><span class="line">                iconRect.moveLeft(option.rect.left() + iconSpacing)</span><br><span class="line">                iconRect = self.visualRect(option.direction, option.rect, iconRect)</span><br><span class="line">                iconRect.translate(</span><br><span class="line">                    self.proxy().pixelMetric(</span><br><span class="line">                        QtWidgets.QStyle.PM_ButtonShiftHorizontal, option, widget</span><br><span class="line">                    ),</span><br><span class="line">                    self.proxy().pixelMetric(</span><br><span class="line">                        QtWidgets.QStyle.PM_ButtonShiftVertical, option, widget</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">                painter.drawPixmap(iconRect, pixmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    app.setStyle(<span class="string">&#x27;fusion&#x27;</span>)</span><br><span class="line">    proxy_style = ProxyStyle(app.style())</span><br><span class="line">    app.setStyle(proxy_style)</span><br><span class="line"></span><br><span class="line">    w = QtWidgets.QWidget()</span><br><span class="line">    lay = QtWidgets.QVBoxLayout(w)</span><br><span class="line">    icons = [</span><br><span class="line">        app.style().standardIcon(standardIcon)</span><br><span class="line">        <span class="keyword">for</span> standardIcon <span class="keyword">in</span> (</span><br><span class="line">            QtWidgets.QStyle.SP_MediaPlay,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaPause,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaSeekBackward,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaSeekForward,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> text, icon <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;Play Pause Backward Forward&quot;</span>.split(), (icons)):</span><br><span class="line">        button = QtWidgets.QPushButton(text)</span><br><span class="line">        button.setIcon(icon)</span><br><span class="line">        lay.addWidget(button)</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/44091339/qpushbutton-icon-aligned-left-with-text-centered">https://stackoverflow.com/questions/44091339/qpushbutton-icon-aligned-left-with-text-centered</a></p><p><a href="https://stackoverflow.com/questions/56129402/qpushbutton-icon-left-alignment-text-center-alignment">https://stackoverflow.com/questions/56129402/qpushbutton-icon-left-alignment-text-center-alignment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I recently needed to display a series of buttons for my shelf tool, the problem I’m having with this is that&lt;br /&gt;
although every button </summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>How to Organize Custom Python Library</title>
    <link href="http://xingyulei.xyz/post/py-organize-module/"/>
    <id>http://xingyulei.xyz/post/py-organize-module/</id>
    <published>2021-08-14T04:00:00.000Z</published>
    <updated>2021-08-27T00:45:01.597Z</updated>
    
    <content type="html"><![CDATA[<p>I saw this post on stack overflow and thought it is something worth summarizing</p><p>How should we organize our own library?</p><h3 id="method-one"><a class="markdownIt-Anchor" href="#method-one"></a> Method One</h3><p>Stack everything inside one root package, each module contains many functions, one utility module containing<br />all the generic functions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root (package)</span><br><span class="line">    animation.py  (module)</span><br><span class="line">    audio.py      (module)</span><br><span class="line">    modelling.py  (module)</span><br><span class="line">    rigging.py    (module)</span><br><span class="line">    library.py    (module)</span><br><span class="line">    util.py       (module)</span><br></pre></td></tr></table></figure><h3 id="method-two"><a class="markdownIt-Anchor" href="#method-two"></a> Method Two</h3><p>Have multiple separated packages, and split the code into smaller modules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root (package)</span><br><span class="line">    animation (package)</span><br><span class="line">        __init__.py  (module)</span><br><span class="line">        core.py      (module)</span><br><span class="line">        utils.py     (module)</span><br><span class="line">        ui.py        (module</span><br><span class="line">        bar.py       (module)</span><br><span class="line"></span><br><span class="line">    audio (package)</span><br><span class="line">        __init__.py  (module)</span><br><span class="line">        core.py      (module)</span><br><span class="line">        utils.py     (module)</span><br><span class="line">        ui.py        (module</span><br><span class="line">        foo.py       (module)</span><br><span class="line"></span><br><span class="line">   rigging (package)</span><br><span class="line">        __init__.py  (module)</span><br><span class="line">        core.py      (module)</span><br><span class="line">        utils.py     (module)</span><br><span class="line">        ui.py        (module</span><br><span class="line">        foo.py       (module)</span><br><span class="line"></span><br><span class="line">   etc</span><br></pre></td></tr></table></figure><p>The <code>__init__.py</code> inside of each package would import all the necessary functions</p><h3 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h3><p>Either are okay, but there are certain rules/recommendation to follow:</p><ol><li>Functions in the same module are closely connected</li><li>Having fewer but bigger modules could be difficult to navigate</li><li>Try to make each module standalone</li><li>Having many separated modules makes import efficient, but the module should not be too small</li></ol><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/52082078/best-way-to-keep-python-modules-organised">https://stackoverflow.com/questions/52082078/best-way-to-keep-python-modules-organised</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I saw this post on stack overflow and thought it is something worth summarizing&lt;/p&gt;
&lt;p&gt;How should we organize our own library?&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt QPushButton Detect Double Click</title>
    <link href="http://xingyulei.xyz/post/qt-detect-click/"/>
    <id>http://xingyulei.xyz/post/qt-detect-click/</id>
    <published>2021-08-08T04:00:00.000Z</published>
    <updated>2021-08-27T00:45:28.129Z</updated>
    
    <content type="html"><![CDATA[<p>It’s not as easy as it looks</p><h3 id="built-in-double-click"><a class="markdownIt-Anchor" href="#built-in-double-click"></a> Built-in Double Click</h3><p>Hey, I thought this would be easy, since Qt offers a built-in event <code>QEvent.MouseButtonDblClick</code>.<br />But the issue is it couldn’t distinguish a single click vs. a double click.</p><p>Which means, a single click event will also be called if double clicked.</p><p>Solution?</p><h3 id="custom-click-detection-with-timeout"><a class="markdownIt-Anchor" href="#custom-click-detection-with-timeout"></a> Custom click detection with <code>timeout</code></h3><p>Subclass QPushButton and override <code>eventFilter()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span>(<span class="params">QtWidgets.QPushButton</span>):</span></span><br><span class="line">    right_clicked = QtCore.Signal()</span><br><span class="line">    left_clicked = QtCore.Signal()</span><br><span class="line">    double_clicked = QtCore.Signal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyButton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        self.timer = QtCore.QTimer()</span><br><span class="line">        self.timer.setSingleShot(<span class="literal">True</span>)</span><br><span class="line">        self.timer.setInterval(<span class="number">250</span>)</span><br><span class="line">        self.timer.timeout.connect(self.timeout)</span><br><span class="line"></span><br><span class="line">        self.is_double = <span class="literal">False</span></span><br><span class="line">        self.is_left_click = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.installEventFilter(self)</span><br><span class="line"></span><br><span class="line">        self.double_clicked.connect(self.double_click_event)</span><br><span class="line">        self.left_clicked.connect(self.left_click_event)</span><br><span class="line">        self.right_clicked.connect(self.right_click_event)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eventFilter</span>(<span class="params">self, obj, event</span>):</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span>() == QtCore.QEvent.MouseButtonPress:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.timer.isActive():</span><br><span class="line">                self.timer.start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> event.button() == QtCore.Qt.LeftButton:</span><br><span class="line">                self.is_left_click = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.is_left_click = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span>() == QtCore.QEvent.MouseButtonDblClick:</span><br><span class="line">            self.is_double = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_double:</span><br><span class="line">            self.double_clicked.emit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.is_left_click:</span><br><span class="line">                self.left_clicked.emit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.right_clicked.emit()</span><br><span class="line"></span><br><span class="line">        self.is_double = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_click_event</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;left clicked&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_click_event</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;right clicked&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">double_click_event</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;double clicked&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.qtcentre.org/threads/7858-Double-Click-Capturing">https://www.qtcentre.org/threads/7858-Double-Click-Capturing</a></p><p><a href="https://stackoverflow.com/questions/19247436/pyqt-mouse-mousebuttondblclick-event">https://stackoverflow.com/questions/19247436/pyqt-mouse-mousebuttondblclick-event</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It’s not as easy as it looks&lt;/p&gt;
&lt;h3 id=&quot;built-in-double-click&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#built-in-double-click&quot;&gt;&lt;/a&gt; Built-in </summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Constant in Python</title>
    <link href="http://xingyulei.xyz/post/py-constant/"/>
    <id>http://xingyulei.xyz/post/py-constant/</id>
    <published>2021-07-16T04:00:00.000Z</published>
    <updated>2021-08-22T02:25:23.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><p>I recently saw some codes written by another tech artist, and he made a module called <code>constant.py</code></p><p>In it stored all the global variables and all the import modules, something like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#constant.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_a</span><br><span class="line"><span class="keyword">import</span> module_b</span><br><span class="line"><span class="keyword">import</span> module_c</span><br><span class="line"></span><br><span class="line">GLOBAL_VAR_MAX = <span class="number">50</span></span><br><span class="line">GLOBAL_VAR_MIN = <span class="number">10</span></span><br><span class="line">GLOBAL_VAR_TIMEOUT = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">GLOBAL_NAME = <span class="string">r&#x27;random name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or even</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constant</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    gravity = <span class="number">9.8</span></span><br><span class="line">    is_true = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>With this setup, all the module in the same project would just import the <code>constant</code> module and have access to<br />all the imports and variable. I thought this was a neat way to make code cleaner by getting rid of all the duplicated imports<br />that might happened.</p><p>But turns out that there’s a lot of people against doing things like this.</p><h3 id="constant-in-python"><a class="markdownIt-Anchor" href="#constant-in-python"></a> Constant in Python</h3><p>the root level where the constant lives actually matters:</p><p>based on the style guide: Constants are usually defined on a <em>module</em> level and written in all capital letters with underscores separating words. Examples include MAX_OVERFLOW and TOTAL.</p><p>also suggestions have mentioned to refrain from using <em>class</em> as it could be instantiated which makes no sense. (maybe a static class in another language would work)</p><h3 id="separate-module-for-import"><a class="markdownIt-Anchor" href="#separate-module-for-import"></a> Separate module for import</h3><p>Despite the root level of constant this, is it a good practice to have a separate module for import?</p><p>No, unless there’s a valid reason for all those modules to be collected under a common name. If not, then they should<br />be kept separately. This is due to documentation, as other people open your file, they don’t get information on<br />what is getting imported (what is needed)</p><h3 id="same-module-import-multiple-times"><a class="markdownIt-Anchor" href="#same-module-import-multiple-times"></a> Same module import multiple times</h3><p>So if multiple files are importing the same module separately, does python optimize the import?</p><p>Yes, python modules are considered as singletons, no matter how many times you import them they get initialized only once.<br />unless reload is being called</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ol><li><p><a href="https://stackoverflow.com/questions/5027400/constants-in-python-at-the-root-of-the-module-or-in-a-namespace-inside-the-modu">https://stackoverflow.com/questions/5027400/constants-in-python-at-the-root-of-the-module-or-in-a-namespace-inside-the-modu</a></p></li><li><p><a href="https://stackoverflow.com/questions/40419582/in-python-do-you-need-to-import-modules-in-each-split-file">https://stackoverflow.com/questions/40419582/in-python-do-you-need-to-import-modules-in-each-split-file</a></p></li><li><p><a href="https://stackoverflow.com/questions/6206204/python-importing-an-import-file">https://stackoverflow.com/questions/6206204/python-importing-an-import-file</a></p></li><li><p><a href="https://stackoverflow.com/questions/296036/does-python-optimize-modules-when-they-are-imported-multiple-times">https://stackoverflow.com/questions/296036/does-python-optimize-modules-when-they-are-imported-multiple-times</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h2&gt;
&lt;p&gt;I recently saw some codes written by another tech artist, and h</summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt Connect signal in for loop</title>
    <link href="http://xingyulei.xyz/post/qt-signal-in-for-loop/"/>
    <id>http://xingyulei.xyz/post/qt-signal-in-for-loop/</id>
    <published>2021-04-17T04:00:00.000Z</published>
    <updated>2021-08-31T02:14:11.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><p>We often needs to create ui elements on the fly, sometimes we do it in something like a for loop.<br />An example would be creating a series of <code>QPushButton</code> and connect them to a function through<br />different argument values. A example is shown below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Demo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            pushbutton = QtWidgets.QPushButton(<span class="string">&#x27;button &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(index))</span><br><span class="line">            pushbutton.clicked.connect(<span class="keyword">lambda</span>: self.trigger(index))</span><br><span class="line">            layout.addWidget(pushbutton)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trigger</span>(<span class="params">index</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;button &#123;&#125; clicked&#x27;</span>.<span class="built_in">format</span>(index))</span><br></pre></td></tr></table></figure><p>Here I created six <code>QPushButton</code> and when I click them it should output which button is being clicked. But if you<br />run this script and try to click each button it will always output “button 5 clicked” (aka, the last button).<br />It is safely to assume that the argument passed during the for loop always result in the last index.</p><h3 id="explanation"><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>Based on a kind response from stackoverflow: lambdas do <strong>not</strong> store the value of button when it is defined.<br />The code describing the lambda function is parsed and compiled but not executed until you actually<br />call the lambda. Therefore, when a button is clicked, the current value of that variable is used (the last index).</p><p>What’s the solution?</p><h3 id="lambda-with-solid-variable"><a class="markdownIt-Anchor" href="#lambda-with-solid-variable"></a> Lambda with solid variable</h3><p>Passing solid variable to the lambda</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pushbutton.clicked.connect(<span class="keyword">lambda</span> _, i=index: self.trigger(index=i))</span><br></pre></td></tr></table></figure><p>Note that we created another temporary variable before index as<br />the first argument passed in the lambda will always return as <code>False</code>.<br />Because Qt defines the signal <code>QAbstractButton.clicked</code> to take a single<br />argument with a default value of <code>False</code>. Since your lambda is handling that signal,<br />it gets called with <code>False</code>.</p><h3 id="partial-approach"><a class="markdownIt-Anchor" href="#partial-approach"></a> Partial approach</h3><p>Use <code>functools.partial</code> also works</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">pushbutton.clicked.connect(partial(self.trigger, index))</span><br></pre></td></tr></table></figure><p>Note that in some cases where wrappers are being used in <code>trigger</code> function, it could be trickier to use this as oppose to <code>lambda</code></p><p>###Reference</p><p><a href="https://stackoverflow.com/questions/27953895/first-lambda-capture-of-local-variable-always-false">https://stackoverflow.com/questions/27953895/first-lambda-capture-of-local-variable-always-false</a></p><p><a href="https://stackoverflow.com/questions/46300229/connecting-multiples-signal-slot-in-a-for-loop-in-pyqt">https://stackoverflow.com/questions/46300229/connecting-multiples-signal-slot-in-a-for-loop-in-pyqt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h3&gt;
&lt;p&gt;We often needs to create ui elements on the fly, sometimes we d</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>QWidget Template (without .ui file)</title>
    <link href="http://xingyulei.xyz/post/qt-widget-template/"/>
    <id>http://xingyulei.xyz/post/qt-widget-template/</id>
    <published>2021-02-18T05:00:00.000Z</published>
    <updated>2021-08-18T04:00:58.131Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you need a quick window to display some information,<br />but the built-in qt message boxes aren’t suitable for the job.</p><h3 id="temporary-widget"><a class="markdownIt-Anchor" href="#temporary-widget"></a> Temporary Widget</h3><p>You can choose to create a widget class, but also for saving time, you can create<br />a temporary custom widget</p><p>example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWidget</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">    self.connectSignal()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connectSignal</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.someBtn.clicked.connect(self.openCustomWidget)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">openCustomWidget</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># initialize with a widget and a layout</span></span><br><span class="line">    self.customWidget = QtWidgets.QWidget()</span><br><span class="line">    layout = QtWidgets.QHBoxLayout(self.customWidget)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    self.customWidget.setWindowTitle(<span class="string">&#x27;Error Log&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set window display behavior</span></span><br><span class="line">    self.customWidget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set window icon (using a built-in icon)</span></span><br><span class="line">    name = <span class="string">&quot;SP_MessageBoxCritical&quot;</span></span><br><span class="line">    style = self.customWidget.style()</span><br><span class="line">    icon = style.standardIcon(<span class="built_in">getattr</span>(QtWidgets.QStyle, name))</span><br><span class="line">    self.customWidget.setWindowIcon(icon)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add custom elements here</span></span><br><span class="line">    message = <span class="string">&quot;happy new year&quot;</span></span><br><span class="line">    errorLabel = QtWidgets.QLabel(messages)</span><br><span class="line">    scrollArea = QtWidgets.QScrollArea()</span><br><span class="line">    scrollArea.setWidgetResizable(<span class="literal">True</span>)</span><br><span class="line">    scrollArea.setWidget(errorLabel)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># finalize</span></span><br><span class="line">    layout.addWidget(scrollArea)</span><br><span class="line">    self.customWidget.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showWindow</span>():</span></span><br><span class="line">    win = MainWidget()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        win.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    win.setAttribute(QtCore.Qt.WA_DeleteOnClose)</span><br><span class="line">    win.show()</span><br></pre></td></tr></table></figure><p>Couple of things worth noting:</p><ol><li><p>correctly initialize the widget</p><p><code>self.customWidget = QtWidgets.QWidget()</code> will allow widget be child of the main window,<br />thus allow widget to close when main window is closed</p><p>so not <code>customWidget = QtWidgets.QWidget()</code> or <code>self.customWidget = QtWidgets.QWidget(self)</code></p></li><li><p>use <code>getattr</code> in combination with <code>QStyle</code> and name of the built-in icon</p></li><li><p>use <code>win.setAttribute(QtCore.Qt.WA_DeleteOnClose)</code> to make sure the child widget is killed<br />after main window is closed, because default close only hides window objects</p></li><li><p><code>self.customWidget.show()</code> is the core command to call it to display</p></li></ol><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.programiz.com/python-programming/methods/built-in/getattr">https://www.programiz.com/python-programming/methods/built-in/getattr</a><br /><a href="https://forum.learnpyqt.com/t/are-there-any-built-in-qicons/185/2">https://forum.learnpyqt.com/t/are-there-any-built-in-qicons/185/2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes you need a quick window to display some information,&lt;br /&gt;
but the built-in qt message boxes aren’t suitable for the job.&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>QDialog Template (without .ui file)</title>
    <link href="http://xingyulei.xyz/post/qt-dialog-template/"/>
    <id>http://xingyulei.xyz/post/qt-dialog-template/</id>
    <published>2021-02-11T05:00:00.000Z</published>
    <updated>2021-08-18T04:00:58.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="main-window"><a class="markdownIt-Anchor" href="#main-window"></a> Main Window</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttrConnectWindow</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=getMainWindow(<span class="params"></span>)</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(AttrConnectWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>]</span><br><span class="line">        dialog = NamespaceEditDialog()</span><br><span class="line">        dialog.setNamespaceCBox(<span class="built_in">list</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># only when self.accept() is returned</span></span><br><span class="line">        <span class="keyword">if</span> dialog.exec_():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;accepted&#x27;</span></span><br><span class="line">            </span><br><span class="line">        text = dialog.getText()</span><br><span class="line">        option = dialog.getCombo()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> text, option</span><br></pre></td></tr></table></figure><h2 id="dialog"><a class="markdownIt-Anchor" href="#dialog"></a> Dialog</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamespaceEditDialog</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NamespaceEditDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create widgets</span></span><br><span class="line">        self.namespaceCBox = QtWidgets.QComboBox()</span><br><span class="line">        self.namespaceEdit = QtWidgets.QLineEdit()</span><br><span class="line">        self.acceptButton = QtWidgets.QPushButton(<span class="string">&quot;Confirm&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create layout and add widgets</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        layout.addWidget(self.namespaceCBox, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.namespaceEdit, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(self.acceptButton, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set dialog layout</span></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        self.acceptButton.clicked.connect(self.onClickAccept)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClickAccept</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNamespaceEdit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.namespaceEdit.text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNamespaceCBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.namespaceCBox.currentText()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNamespaceCBox</span>(<span class="params">self, items</span>):</span></span><br><span class="line">        self.namespaceCBox.addItems(items)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;main-window&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#main-window&quot;&gt;&lt;/a&gt; Main Window&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Model View List Model</title>
    <link href="http://xingyulei.xyz/post/qt-mv-list/"/>
    <id>http://xingyulei.xyz/post/qt-mv-list/</id>
    <published>2021-02-07T05:00:00.000Z</published>
    <updated>2021-08-23T00:22:02.790Z</updated>
    
    <content type="html"><![CDATA[<p>The following example demonstrates how to create custom list model for<br />displaying list-like data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui, QtCore, QtWidgets</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaletteListModel</span>(<span class="params">QtCore.QAbstractListModel</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, colors=[], parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        QtCore.QAbstractListModel.__init__(self, parent)</span><br><span class="line">        self.__colors = colors</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">headerData</span>(<span class="params">self, section, orientation, role</span>):</span></span><br><span class="line">        <span class="comment"># orientation: indicates horizontal or vertical header</span></span><br><span class="line">        <span class="comment"># section:     indicates which index on the header</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class="line">            <span class="keyword">if</span> orientation == QtCore.Qt.Horizontal:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Palette&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Color &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(section+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rowCount</span>(<span class="params">self, parent</span>):</span></span><br><span class="line">        <span class="comment"># parent: are for tree view with hierarchical structure</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__colors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span>(<span class="params">self, index, role</span>):</span></span><br><span class="line">        <span class="comment"># display data for each index, of each data role</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.EditRole:</span><br><span class="line">            <span class="keyword">return</span> self.__colors[index.row()].name()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.ToolTipRole:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hex code: &quot;</span>+self.__colors[index.row()].name()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DecorationRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            value = self.__colors[row]</span><br><span class="line"></span><br><span class="line">            pixmap = QtGui.QPixmap(<span class="number">26</span>, <span class="number">26</span>)</span><br><span class="line">            pixmap.fill(value)</span><br><span class="line">            icon = QtGui.QIcon(pixmap)</span><br><span class="line">            <span class="keyword">return</span> icon</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            value = self.__colors[row]</span><br><span class="line">            <span class="keyword">return</span> value.name()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flags</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="keyword">return</span> QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setData</span>(<span class="params">self, index, value, role=QtCore.Qt.EditRole</span>):</span></span><br><span class="line">        <span class="comment"># set data for each index of the value, data role is set to edit role default</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.EditRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            color = QtGui.QColor(value)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> color.isValid():</span><br><span class="line">                self.__colors[row] = color</span><br><span class="line">                <span class="comment"># have to emit and dataChanged signal to sync with display</span></span><br><span class="line">                self.dataChanged.emit(index, index)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertRows</span>(<span class="params">self, position, rows, parent=QtCore.QModelIndex(<span class="params"></span>)</span>):</span></span><br><span class="line">        self.beginInsertRows(parent, position, position+rows-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            self.__colors.insert(position, QtGui.QColor(<span class="string">&quot;#000000&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.endInsertRows()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeRows</span>(<span class="params">self, position, rows, parent=QtCore.QModelIndex(<span class="params"></span>)</span>):</span></span><br><span class="line">        self.beginRemoveRows(parent, position, position+rows-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            value = self.__colors[position]</span><br><span class="line">            self.__colors.remove(value)</span><br><span class="line"></span><br><span class="line">        self.endRemoveRows()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    red = QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    green = QtGui.QColor(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    blue = QtGui.QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    model = PaletteListModel([red, green, blue])</span><br><span class="line">    model.insertRows(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    listView = QtWidgets.QListView()</span><br><span class="line">    listView.show()</span><br><span class="line">    listView.setModel(model)</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h3><ol><li><p>Since <code>parent</code> is used  for hierarchical structure, it is not set or set to null index<br />in this example.</p></li><li><p><code>index</code> is a <code>QModelIndex</code> instance to locate data in model</p></li><li><p>In <code>setData()</code>, make sure to add <code>self.dataChanged.emit(index, index)</code> for syncing data change</p></li><li><p>For inserting and removing rows</p><ol><li>always starts with <code>insertRows/removeRows</code> and<br />close with <code>endInsertRows/endRemoveRows</code> so that view and model is in-sync</li><li>no parent in list view so pass a null index: <code>QModelIndex()</code></li><li>essentially, it is modifying the <code>self.__colors</code> which is displayed in <code>data()</code></li></ol></li></ol><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> Source</h3><p><a href="https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo">https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo</a></p><p><a href="https://doc.qt.io/qtforpython-5.12/PySide2/QtCore/QModelIndex.html#PySide2.QtCore.QModelIndex">https://doc.qt.io/qtforpython-5.12/PySide2/QtCore/QModelIndex.html#PySide2.QtCore.QModelIndex</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following example demonstrates how to create custom list model for&lt;br /&gt;
displaying list-like data&lt;/p&gt;
&lt;figure class=&quot;highlight pytho</summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Model View Intro</title>
    <link href="http://xingyulei.xyz/post/qt-mv-intro/"/>
    <id>http://xingyulei.xyz/post/qt-mv-intro/</id>
    <published>2021-02-06T05:00:00.000Z</published>
    <updated>2021-08-23T00:21:39.057Z</updated>
    
    <content type="html"><![CDATA[<p>The following example demonstrated how same data is accessed through a Model<br />and shared across Views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui, QtCore, QtWidgets</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># no QString needed in Qt5, use python string instead</span></span><br><span class="line">    data = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    listView = QtWidgets.QListView()</span><br><span class="line">    listView.show()</span><br><span class="line"></span><br><span class="line">    model = QtCore.QStringListModel(data)</span><br><span class="line">    listView.setModel(model)</span><br><span class="line"></span><br><span class="line">    combobox = QtWidgets.QComboBox()</span><br><span class="line">    combobox.setModel(model)</span><br><span class="line">    combobox.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>In Qt 5, the <code>QtCore.QStringList()</code> is replaced by python’s built-in <code>string</code> type</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qt 4</span></span><br><span class="line">data = QtCore.QStringList()</span><br><span class="line">data &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="string">&quot;four&quot;</span> &lt;&lt; <span class="string">&quot;five&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># qt 5</span></span><br><span class="line">data = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> Source</h3><p><a href="https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo">https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo</a><br /><a href="https://stackoverflow.com/questions/27757678/importerror-cannot-import-name-qstringlist-in-pyqt5">https://stackoverflow.com/questions/27757678/importerror-cannot-import-name-qstringlist-in-pyqt5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following example demonstrated how same data is accessed through a Model&lt;br /&gt;
and shared across Views&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Custom Context Menu Template (Menu, Submenu and Action)</title>
    <link href="http://xingyulei.xyz/post/qt-context-menu/"/>
    <id>http://xingyulei.xyz/post/qt-context-menu/</id>
    <published>2021-02-05T05:00:00.000Z</published>
    <updated>2021-08-25T03:48:35.518Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.widget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionSignal</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.widget.customContextMenuRequested.connect(self.openContextMenu)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openContextMenu</span>(<span class="params">self</span>):</span></span><br><span class="line">        contextMenu = QtWidgets.QMenu()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Enable options when only certain number of row is selected (typically one)</span></span><br><span class="line">        selectedIndexes = <span class="built_in">list</span>(<span class="built_in">set</span>([item.row() <span class="keyword">for</span> item <span class="keyword">in</span> self.widget.selectedIndexes()]))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(selectedIndexes) == <span class="number">1</span>:</span><br><span class="line">            item = self.widget.currentItem()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># menu option</span></span><br><span class="line">            functionAction = contextMenu.addAction(<span class="string">&#x27;Menu Text go here&#x27;</span>)</span><br><span class="line">            functionAction.triggered.connect(<span class="keyword">lambda</span>: self.execFunctionWithArgs(item))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># menu option with sub-menu</span></span><br><span class="line">            functionMenu = contextMenu.addMenu(<span class="string">&#x27;More options here!&#x27;</span>)</span><br><span class="line">            submenu = functionMenu.addAction(<span class="string">&#x27;Sub Menu here&#x27;</span>)</span><br><span class="line">            submenu.triggered.connect(<span class="keyword">lambda</span>: self.execFunctionWithArgs(item))</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            items = self.widget.selectedItems()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Enable options for other senarios</span></span><br><span class="line">        anotherAction = contextMenu.addAction(<span class="string">&#x27;Menu Text go here&#x27;</span>)</span><br><span class="line">        anotherAction.triggered.connect(self.execFunction)</span><br><span class="line">    </span><br><span class="line">        cursor = QtGui.QCursor()</span><br><span class="line">        contextMenu.exec_(cursor.pos())</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execFunctionWithArgs</span>(<span class="params">self, argument</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execFunction</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/13799033/how-to-add-submenu-in-qt">https://stackoverflow.com/questions/13799033/how-to-add-submenu-in-qt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QMessageBox Template</title>
    <link href="http://xingyulei.xyz/post/qt-messagebox/"/>
    <id>http://xingyulei.xyz/post/qt-messagebox/</id>
    <published>2021-01-28T05:00:00.000Z</published>
    <updated>2021-08-25T03:48:17.681Z</updated>
    
    <content type="html"><![CDATA[<h3 id="templates"><a class="markdownIt-Anchor" href="#templates"></a> Templates</h3><p>You could use the following as class method, static method or a function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messageBoxCritical</span>(<span class="params">message, title=<span class="string">&#x27;Error&#x27;</span></span>):</span></span><br><span class="line">    msgBox = QtWidgets.QMessageBox()</span><br><span class="line">    msgBox.setIcon(QtWidgets.QMessageBox.Critical)</span><br><span class="line">    msgBox.setWindowTitle(title)</span><br><span class="line">    msgBox.setText(message)</span><br><span class="line">    msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)</span><br><span class="line">    <span class="keyword">return</span> msgBox.exec_()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messageBoxYesNo</span>(<span class="params">message, title=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    msgBox = QtWidgets.QMessageBox()</span><br><span class="line">    msgBox.setIcon(QtWidgets.QMessageBox.Question)</span><br><span class="line">    msgBox.setWindowTitle(title)</span><br><span class="line">    msgBox.setText(message)</span><br><span class="line">    msgBox.setStandardButtons(QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No)</span><br><span class="line">    userChoice = msgBox.exec_()</span><br><span class="line">    <span class="keyword">return</span> userChoice</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messageBoxOk</span>(<span class="params">message, title=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    msgBox = QtWidgets.QMessageBox()</span><br><span class="line">    msgBox.setIcon(QtWidgets.QMessageBox.Information)</span><br><span class="line">    msgBox.setWindowTitle(title)</span><br><span class="line">    msgBox.setText(message)</span><br><span class="line">    msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)</span><br><span class="line">    <span class="keyword">return</span> msgBox.exec_()</span><br></pre></td></tr></table></figure><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot;Did you recieve this message?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># within class</span></span><br><span class="line">userChoice = self._messageBoxYesNo(msg, title=<span class="string">&#x27;Test Title&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># static method</span></span><br><span class="line">userChoice = MainWindow._messageBoxYesNo(msg, title=<span class="string">&#x27;Test Title&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># call outside class</span></span><br><span class="line">userChoice = messageBoxYesNo(msg, title=<span class="string">&#x27;Test Title&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> userChoice == QtWidgets.QMessageBox.Yes:</span><br><span class="line">    function()</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/52463896/what-kind-of-difference-does-self-makes-as-parameter-in-pyqt5">“Self” as parameter in PyQt5</a></p><p><a href="https://stackoverflow.com/questions/49651490/pyqt5-self-reference">PyQt5 self reference</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;templates&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#templates&quot;&gt;&lt;/a&gt; Templates&lt;/h3&gt;
&lt;p&gt;You could use the following as class method, static</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Error Handling in Python</title>
    <link href="http://xingyulei.xyz/post/py-error-handle/"/>
    <id>http://xingyulei.xyz/post/py-error-handle/</id>
    <published>2021-01-24T05:00:00.000Z</published>
    <updated>2021-08-11T03:27:00.046Z</updated>
    
    <content type="html"><![CDATA[<h3 id="error-handling"><a class="markdownIt-Anchor" href="#error-handling"></a> Error Handling</h3><p><code>finally</code> will guarantee execution in <code>try-exception-finally</code> block even after</p><ul><li><code>return</code></li><li><code>raise</code></li></ul><p>Raise error back to parent function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg. this line will give an ZeroDivision Error</span></span><br><span class="line"><span class="number">10</span> / <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># what if this belongs to a function and we want to raise the</span></span><br><span class="line"><span class="comment"># error code to let whatever calls it to handle instead of itself</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># so instead of</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occur_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># error handling</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we do this</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        occur_error()</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># error handling</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occur_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="keyword">raise</span> ZeroDivisionError</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/49262379/does-finally-always-execute-in-python">https://stackoverflow.com/questions/49262379/does-finally-always-execute-in-python</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;error-handling&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#error-handling&quot;&gt;&lt;/a&gt; Error Handling&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;finally&lt;/code&gt; will guarantee </summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>How to Underscore in Python</title>
    <link href="http://xingyulei.xyz/post/py-dunder/"/>
    <id>http://xingyulei.xyz/post/py-dunder/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-08-27T00:43:52.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="underscore-naming"><a class="markdownIt-Anchor" href="#underscore-naming"></a> Underscore Naming</h3><p>Single Leading Underscore:</p><ul><li><p><code>_var</code></p></li><li><p>Indicating a name is <strong>protected</strong>, for internal use. Not enforced by python interpreter</p></li></ul><hr /><p>Double Leading Underscore:</p><ul><li><code>__var</code></li><li>Indicating a name is <strong>private</strong>. Enforced by interpreter, attempt to call it will trigger <code>AttributeError</code></li></ul><hr /><p>Double Leading Trailing Underscore:</p><ul><li><code>__var__</code></li><li>Special methods (magic methods) defined by python language, avoid naming your own attribute</li></ul><hr /><p>Single Trailing Underscore:</p><ul><li><code>var_</code></li><li>Avoid naming conflict with python keywords</li></ul><hr /><p>Single Underscore:</p><ul><li><code>_</code></li><li>Temporary variable name, variables that are never used</li><li>Example:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = ([] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> random_list:</span><br><span class="line">    some_operation()</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://dbader.org/blog/meaning-of-underscores-in-python#">https://dbader.org/blog/meaning-of-underscores-in-python#</a><br /><a href="https://www.tutorialsteacher.com/python/public-private-protected-modifiers">https://www.tutorialsteacher.com/python/public-private-protected-modifiers</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;underscore-naming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#underscore-naming&quot;&gt;&lt;/a&gt; Underscore Naming&lt;/h3&gt;
&lt;p&gt;Single Leading Underscore:&lt;</summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt Custom Sorting</title>
    <link href="http://xingyulei.xyz/post/qt-sorting/"/>
    <id>http://xingyulei.xyz/post/qt-sorting/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-08-25T03:41:22.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sorting-overview"><a class="markdownIt-Anchor" href="#sorting-overview"></a> Sorting Overview</h3><p>Sorting happens a lot in qt viewports like list, table and tree. Using<br />convenience class such as item-based widget provides limited sorting options.</p><p>One common thing may occur when you are sorting items is the widget treats their<br />value as <em>string</em> instead of <em>int</em>, which will result incorrect ordering</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;92&quot;</span>, <span class="string">&quot;89&quot;</span>, <span class="string">&quot;40&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = QtWidgets.QTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>This will sort the list of items based on their string, so the order will be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 10</span><br><span class="line">- 11</span><br><span class="line">- 2</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><p>So naturally, you would need to specify the item value as integer type,<br />but you cannot instantiate item with integer, but <code>setData()</code> will work</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># intead of </span></span><br><span class="line">item = QtWidgets.QTableWidgetItem(<span class="built_in">int</span>(value))</span><br><span class="line"><span class="comment"># do this</span></span><br><span class="line">item.setData(QtCore.Qt.ItemDataRole, <span class="built_in">int</span>(value))</span><br></pre></td></tr></table></figure><p>Now everything will sort by numeric order</p><h3 id="custom-sorting-operator-override"><a class="markdownIt-Anchor" href="#custom-sorting-operator-override"></a> Custom Sorting (Operator override)</h3><p>What if you need more than numeric value for your data, for example, when displaying frame number, you would like to include frame range<br />too. Like frame 1, frame 2, frame 3-7, frame 8, frame 9-14. It looks like using string<br />is the only option.</p><p>This time you need to override value compare operator for these value, that is making<br />your own item class like the following example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTableWidgetItem</span>(<span class="params">QtWidgets.QTableWidgetItem</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        QtWidgets.QTableWidgetItem.__init__(self, parent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, otherItem</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(self.text().split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]) &lt; <span class="built_in">int</span>(otherItem.text().split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">return</span> self.text() &lt; otherItem.text()</span><br></pre></td></tr></table></figure><p>the <code>__lt__</code> is the less than <code>operator&lt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;14-15&quot;</span>, <span class="string">&quot;120&quot;</span>, <span class="string">&quot;100-115&quot;</span>, <span class="string">&quot;59-62&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = MyTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>Everything should behave correctly</p><h3 id="custom-sorting-qsortfilterproxymodel-class"><a class="markdownIt-Anchor" href="#custom-sorting-qsortfilterproxymodel-class"></a> Custom Sorting (QSortFilterProxyModel Class)</h3><p>To be continued</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/363200/is-it-possible-to-sort-numbers-in-a-qtreewidget-column">https://stackoverflow.com/questions/363200/is-it-possible-to-sort-numbers-in-a-qtreewidget-column</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sorting-overview&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sorting-overview&quot;&gt;&lt;/a&gt; Sorting Overview&lt;/h3&gt;
&lt;p&gt;Sorting happens a lot in qt vi</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Override and Overload</title>
    <link href="http://xingyulei.xyz/post/override-overload/"/>
    <id>http://xingyulei.xyz/post/override-overload/</id>
    <published>2021-01-17T05:00:00.000Z</published>
    <updated>2021-08-25T03:40:20.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="overload"><a class="markdownIt-Anchor" href="#overload"></a> Overload</h3><p>Overload sounds like a hearthstone term to me, I should really stop playing it.</p><p><strong>Overloading</strong> occurs when two or more methods in one class have the same<br />method name but different parameters.</p><p>Python supports the following:</p><ul><li>Built-in function overloading</li><li>User defined function overloading</li><li>Operator overloading</li></ul><h3 id="override"><a class="markdownIt-Anchor" href="#override"></a> Override</h3><p><strong>Overriding</strong> means having two methods with the same method name and parameters<br />(i.e., method signature). One of the methods is in the parent class and the<br />other is in the child class. Overriding allows a child class to provide a specific<br />implementation of a method that is already provided its parent class.</p><h3 id="overwrite"><a class="markdownIt-Anchor" href="#overwrite"></a> Overwrite</h3><p><em>Overwrite</em> can be confusing, but it means destroying (replacing) the thing it is<br />overwriting.</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.programcreek.com/2009/02/overriding-and-overloading-in-java-with-examples/">https://www.programcreek.com/2009/02/overriding-and-overloading-in-java-with-examples/</a></p><p><a href="https://stackabuse.com/overloading-functions-and-operators-in-python/">https://stackabuse.com/overloading-functions-and-operators-in-python/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;overload&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#overload&quot;&gt;&lt;/a&gt; Overload&lt;/h3&gt;
&lt;p&gt;Overload sounds like a hearthstone term to me, I shoul</summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Understand Python Imports</title>
    <link href="http://xingyulei.xyz/post/py-import/"/>
    <id>http://xingyulei.xyz/post/py-import/</id>
    <published>2021-01-16T05:00:00.000Z</published>
    <updated>2021-08-25T03:39:43.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="from-import-vs-import"><a class="markdownIt-Anchor" href="#from-import-vs-import"></a> <code>from ... import</code> vs. <code>import</code></h3><p>Always avoid wildcard imports like such:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module <span class="keyword">import</span> *  <span class="comment"># don&#x27;t use this</span></span><br></pre></td></tr></table></figure><p>Instead, use regular import like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module  <span class="comment"># use this</span></span><br></pre></td></tr></table></figure><p>Why?</p><ul><li>using wildcard import will pollute namespaces</li><li>Using wildcard import will <strong>not</strong> import names with a leading underscore (unless the module defines an <code>__all__</code> list)</li><li><em>PEP8</em> recommend using regular import</li></ul><h3 id="what-does-__init__py-do"><a class="markdownIt-Anchor" href="#what-does-__init__py-do"></a> What does <code>__init__.py</code> do?</h3><ol><li><p><code>__init__.py</code> is used to specify a package, when import is trying to find the modules,<br />But it is not required: meaning a package without <code>__init__.py</code>,<br />The system can still find the modules after configuring appropriate PYTHONPATH using<br /><code>sys.path.append</code>.</p></li><li><p><code>__init__.py</code> is executed after importing the package, I’ve seen<br />sub-directory being imported by appending as environment variable within <code>__init__.py</code></p></li></ol><h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example:</h4><p>so instead of using <code>import project.foo.bar</code> for the following structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    foo&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        bar&#x2F;</span><br><span class="line">            b.py</span><br></pre></td></tr></table></figure><p>inside the <code>__init__.py</code>, we could do a <code>sys.path.append(PATH_TO_BAR)</code></p><p>so with this file structure, you can just do <code>import project</code></p><p>they could even add the import statement for you in the <code>__init__.py</code>, although it is not transparent.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    foo&#x2F;</span><br><span class="line">        bar&#x2F;</span><br><span class="line">            b.py</span><br></pre></td></tr></table></figure><p>Note: Whatever gets appended last overrides the previous<br />env variable, so import to the same name module will find the latest append</p><h3 id="dot-notation-in-import"><a class="markdownIt-Anchor" href="#dot-notation-in-import"></a> Dot notation (<code>.</code>) in Import</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parent&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    file.py</span><br><span class="line">    one&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        anotherfile.py</span><br><span class="line">    two&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">    three&#x2F;</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure><p>Each dot in your import will refer to something inside the package, could be another package<br />or a module. But it can’t be a class.</p><p>Import python modules could look like:<br /><code>import parent.file</code> or <code>import parent.one.anotherfile</code></p><p>From … import classes or functions look like this:<br /><code>from parent.file import class</code><br />which gives you direct access to the class namespace, but not the example above.</p><h3 id="import-order"><a class="markdownIt-Anchor" href="#import-order"></a> Import Order</h3><p>Based on PEP8, imports should be grouped by the following order:</p><ol><li>Standard library import</li><li>Related third-party import</li><li>Local application/library specific import</li></ol><p><strong>What is Standard Library Imports?</strong></p><p>Standard library are installed automatically by Python installer, full documentation link<br />is here: <a href="https://docs.python.org/3/library/">https://docs.python.org/3/library/</a></p><p><strong>What is the order after grouping?</strong></p><p>There is no specific rules, but based on common preferences, use alphabetical order, with<br />import first and from … import after</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> <span class="function"><span class="keyword">def</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">x</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">g</span> <span class="title">import</span> <span class="title">gg</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">x</span> <span class="title">import</span> <span class="title">xx</span></span></span><br></pre></td></tr></table></figure><h3 id="intra-package"><a class="markdownIt-Anchor" href="#intra-package"></a> Intra-Package</h3><p>In a structure like this, how would you do import from another directory?<br />say from <code>module-x.py</code> import <code>module-a</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top-package&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    sub-package-a&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        module-x.py</span><br><span class="line">        module-y.py</span><br><span class="line">    sub-package-b&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        module-a.py</span><br><span class="line">        module-b.py</span><br></pre></td></tr></table></figure><p>Here’s some examples doing relative imports in <code>module-x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module-y</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module-y</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .module-y <span class="keyword">import</span> classA</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> sub-package-b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..subpackage-b <span class="keyword">import</span> module-a</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..subpackage-b.module-a <span class="keyword">import</span> classB</span><br></pre></td></tr></table></figure><p>##Reference<br /><a href="https://docs.python.org/3/tutorial/modules.html">https://docs.python.org/3/tutorial/modules.html</a><br /><a href="https://stackoverflow.com/questions/37974843/why-can-i-import-successfully-without-init-py">https://stackoverflow.com/questions/37974843/why-can-i-import-successfully-without-init-py</a><br /><a href="https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py">https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;from-import-vs-import&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#from-import-vs-import&quot;&gt;&lt;/a&gt; &lt;code&gt;from ... import&lt;/code&gt; vs. &lt;code&gt;import</summary>
      
    
    
    
    <category term="learning log" scheme="http://xingyulei.xyz/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Using Qt Template</title>
    <link href="http://xingyulei.xyz/post/qt-template/"/>
    <id>http://xingyulei.xyz/post/qt-template/</id>
    <published>2021-01-16T05:00:00.000Z</published>
    <updated>2021-08-25T03:30:39.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="import-qt-module"><a class="markdownIt-Anchor" href="#import-qt-module"></a> Import Qt Module</h3><p>You could be using PyQt/PySide or a custom binding, but the import is similar</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> _loadUi</span><br></pre></td></tr></table></figure><h3 id="system-app-template"><a class="markdownIt-Anchor" href="#system-app-template"></a> System App Template</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># appName.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppUI</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(AppUI, self).__init__()</span><br><span class="line">        _loadUi(UI_PATH, self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    window = AppUI()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="maya-template"><a class="markdownIt-Anchor" href="#maya-template"></a> Maya Template</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># moduleName.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModuleUI</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ModuleUI, self).__init__()</span><br><span class="line">        _loadUi(UI_PATH, self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    window = ModuleUI()</span><br><span class="line">    window.show()</span><br></pre></td></tr></table></figure><p>Note:</p><ul><li>this Qt window is <strong>not</strong> parented to Maya application</li><li>by default, closing the widget is hiding not destroying the object</li></ul><h3 id="parented-to-maya-main-window"><a class="markdownIt-Anchor" href="#parented-to-maya-main-window"></a> Parented to Maya main window</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># moduleName.py</span></span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_maya_main_window</span>():</span></span><br><span class="line">    <span class="keyword">import</span> maya.OpenMayaUI</span><br><span class="line">    main_window_ptr = maya.OpenMayaUI.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QMainWindow)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModuleUI</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=get_maya_main_window(<span class="params"></span>)</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ModuleUI, self).__init__(parent)</span><br><span class="line">        _loadUi(UI_PATH, self)</span><br><span class="line">        self.setWindowFlags(QtCore.Qt.Window)</span><br></pre></td></tr></table></figure><h3 id="destroy-window-instance-when-closed"><a class="markdownIt-Anchor" href="#destroy-window-instance-when-closed"></a> Destroy window instance when closed</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    window = ModuleUI()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        window.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    window.setAttribute(QtCore.Qt.WA_DeleteOnClose)</span><br><span class="line">    window.show()</span><br></pre></td></tr></table></figure><h3 id="maya-script-editor"><a class="markdownIt-Anchor" href="#maya-script-editor"></a> Maya Script Editor</h3><p>To call the open window function, use script editor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moduleName.show()</span><br></pre></td></tr></table></figure><p>When the UI has no parent (Maya main window), it will get instantly destroyed by the<br />garbage collector, unless you keep an instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in the show function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    window = ModuleUI()</span><br><span class="line">    window.show()</span><br><span class="line">    <span class="keyword">return</span> window</span><br><span class="line"></span><br><span class="line"><span class="comment"># in maya script editor</span></span><br><span class="line">win = moduleName.show()</span><br></pre></td></tr></table></figure><h3 id="no-ui-file"><a class="markdownIt-Anchor" href="#no-ui-file"></a> No <code>.ui</code> file</h3><p>There is a different between inheriting from QWidget class vs QMainWindow</p><p>Inheriting from QWidget:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritQWidget</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(InheritQWidget, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        listWidget = QtWidgets.QListWidget()</span><br><span class="line">        <span class="comment">#treeWidget = QtWidgets.QTreeWidget()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># set</span></span><br><span class="line">        <span class="comment"># treeWidget.setParent(listWidget)</span></span><br><span class="line">        layout.addWidget(listWidget)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        listWidget.addItem(<span class="string">&#x27;item A&#x27;</span>)</span><br><span class="line">        listWidget.addItem(<span class="string">&#x27;item B&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Inheriting from QMainWindow</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritQMainWindow</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line">    <span class="comment"># Window inherits from QMainWindow the layout is already defined</span></span><br><span class="line">    <span class="comment"># to accommodate any toolbars or any other QMainWindow component</span></span><br><span class="line">    <span class="comment"># use the setCentralWidget() to accommodate this</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(InheritQMainWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        widget = QtWidgets.QWidget()</span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set</span></span><br><span class="line">        self.setCentralWidget(widget)</span><br><span class="line">        widget.setLayout(layout)</span><br><span class="line">        </span><br><span class="line">        label = QtWidgets.QLabel(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        layout.addWidget(label, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="error-in-pycharm"><a class="markdownIt-Anchor" href="#error-in-pycharm"></a> Error in PyCharm</h3><p>When this error occurs, it is due to MayaDevKit environment<br />MayaDevKit allows maya python command auto-completion, remove it from PyCharm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app &#x3D; QtWidgets.QApplication(sys.argv)</span><br><span class="line">TypeError: &#39;NoneType&#39; object is not callable</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.reddit.com/r/learnpython/comments/jyw8z1/pyqt5_why_do_i_get_an_empty_window/">https://www.reddit.com/r/learnpython/comments/jyw8z1/pyqt5_why_do_i_get_an_empty_window/</a><br /><a href="https://stackoverflow.com/questions/58925453/pycharm-use-pyside2-typeerror-nonetype-object-is-not-callable">https://stackoverflow.com/questions/58925453/pycharm-use-pyside2-typeerror-nonetype-object-is-not-callable</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;import-qt-module&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#import-qt-module&quot;&gt;&lt;/a&gt; Import Qt Module&lt;/h3&gt;
&lt;p&gt;You could be using PyQt/PySide</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://xingyulei.xyz/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>List Comprehension and Conditional Expression in Python</title>
    <link href="http://xingyulei.xyz/post/conditional-expression/"/>
    <id>http://xingyulei.xyz/post/conditional-expression/</id>
    <published>2021-01-06T05:00:00.000Z</published>
    <updated>2021-08-25T03:19:54.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="list-comprehension"><a class="markdownIt-Anchor" href="#list-comprehension"></a> List Comprehension</h2><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">list</span>.append(item)</span><br></pre></td></tr></table></figure><p>this can be re-written as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [item <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br></pre></td></tr></table></figure><p>it can also be combined with statements and operations</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [operate_func(item) <span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><p>However, list comprehension is meant for creating list, not executing multiple operations</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[operation() <span class="keyword">for</span> _ <span class="keyword">in</span> steps]  <span class="comment"># Wrong</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> steps:               <span class="comment"># Do this instead</span></span><br><span class="line">    operation()</span><br></pre></td></tr></table></figure><h2 id="conditional-expression"><a class="markdownIt-Anchor" href="#conditional-expression"></a> Conditional Expression</h2><p>Conditional Expression (also known as Ternary Operators)</p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    value = value_if_true</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = value_if_false</span><br></pre></td></tr></table></figure><p>this can be re-written as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = value_if_true <span class="keyword">if</span> condition <span class="keyword">else</span> value_if_false</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;list-comprehension&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list-comprehension&quot;&gt;&lt;/a&gt; List Comprehension&lt;/h2&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="tech summary" scheme="http://xingyulei.xyz/categories/tech-summary/"/>
    
    
    <category term="python" scheme="http://xingyulei.xyz/tags/python/"/>
    
    <category term="style" scheme="http://xingyulei.xyz/tags/style/"/>
    
  </entry>
  
</feed>
