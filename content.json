{"meta":{"title":"Tech Art Learning","subtitle":"","description":"","author":"Xingyu Lei","url":"https://www.xingyulei.com","root":"/"},"pages":[{"title":"404 Page Not Found","date":"2023-12-15T01:00:10.133Z","updated":"2022-04-10T15:19:16.000Z","comments":false,"path":"/404.html","permalink":"https://www.xingyulei.com/404.html","excerpt":"","text":""},{"title":"Xingyu Lei","date":"2023-12-15T01:00:10.133Z","updated":"2023-10-25T00:28:40.272Z","comments":false,"path":"about/index.html","permalink":"https://www.xingyulei.com/about/index.html","excerpt":"","text":"‚≠êÔ∏è Crazy for Technical Art Self-motivated learner, critical thinker and problem solver Senior Technical Artist üéÆ &emsp; PlayStation, SIE [Apr 2023 - Present] Un-announced Project Design and build a UE5 game cinematics pipeline from scratch Optimize and develop Maya and MotionBuilder Animation tools and workflow Cross-department coordination, code review, new-hire training Technical Artist üéÆ &emsp; PlayStation, SIE [Jan 2021 - Apr 2023] The Last of Us: Part I Engine optimization on framerate and memory Develop and maintain a tool ecosystem that closely supports Naughty Dog across multiple departments: including Character Library, Pose Library, Engine Capture tool and more Virtual face tracking, technical scene prep, rigging QC, PC and PS5 devkit setup Computer Graphics Research Assistant üìö &emsp; Purdue University [Sep 2018 - Dec 2020] Developed a state-machine-based procedural animation system in Unity and integration with a machine-learning-based emotion recognition module Created automation tool for character rigging and mocap retargeting Technical Documentation and Research Paper Drafting CFX TD üé® &emsp; Blur Studio [May - July 2020] [Jun - Aug 2019] CFX pipeline development and optimization Tool development: hair QC, Qualoth IO, version comparer, soft modification, camera toolkit and more Delivered over 70 shots of cloth/hair simulation using Maya and 3dsMax Works The Last of Us: Part I 2022 Love Death & Robots 2020 Call of Duty: Modern Warefare 2019"},{"title":"","date":"2023-12-15T01:00:10.133Z","updated":"2023-10-26T16:54:23.231Z","comments":true,"path":"about/privacy.html","permalink":"https://www.xingyulei.com/about/privacy.html","excerpt":"","text":"Web Site Terms and Conditions of Use 1. Terms By accessing this web site, you are agreeing to be bound by these web site Terms and Conditions of Use, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this web site are protected by applicable copyright and trade mark law. 2. Use License Permission is granted to temporarily download one copy of the materials (information or software) on Tech Art Learning's web site for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: modify or copy the materials; use the materials for any commercial purpose, or for any public display (commercial or non-commercial); attempt to decompile or reverse engineer any software contained on Tech Art Learning's web site; remove any copyright or other proprietary notations from the materials; or transfer the materials to another person or \"mirror\" the materials on any other server. This license shall automatically terminate if you violate any of these restrictions and may be terminated by Tech Art Learning at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format. 3. Disclaimer The materials on Tech Art Learning's web site are provided \"as is\". Tech Art Learning makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties, including without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. Further, Tech Art Learning does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its Internet web site or otherwise relating to such materials or on any sites linked to this site. 4. Limitations In no event shall Tech Art Learning or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption,) arising out of the use or inability to use the materials on Tech Art Learning's Internet site, even if Tech Art Learning or a Tech Art Learning authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you. 5. Revisions and Errata The materials appearing on Tech Art Learning's web site could include technical, typographical, or photographic errors. Tech Art Learning does not warrant that any of the materials on its web site are accurate, complete, or current. Tech Art Learning may make changes to the materials contained on its web site at any time without notice. Tech Art Learning does not, however, make any commitment to update the materials. 6. Links Tech Art Learning has not reviewed all of the sites linked to its Internet web site and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by Tech Art Learning of the site. Use of any such linked web site is at the user's own risk. 7. Site Terms of Use Modifications Tech Art Learning may revise these terms of use for its web site at any time without notice. By using this web site you are agreeing to be bound by the then current version of these Terms and Conditions of Use. 8. Governing Law Any claim relating to Tech Art Learning's web site shall be governed by the laws of the State of california without regard to its conflict of law provisions. General Terms and Conditions applicable to Use of a Web Site. Privacy Policy Your privacy is very important to us. Accordingly, we have developed this Policy in order for you to understand how we collect, use, communicate and disclose and make use of personal information. The following outlines our privacy policy. Before or at the time of collecting personal information, we will identify the purposes for which information is being collected. We will collect and use of personal information solely with the objective of fulfilling those purposes specified by us and for other compatible purposes, unless we obtain the consent of the individual concerned or as required by law. We will only retain personal information as long as necessary for the fulfillment of those purposes. We will collect personal information by lawful and fair means and, where appropriate, with the knowledge or consent of the individual concerned. Personal data should be relevant to the purposes for which it is to be used, and, to the extent necessary for those purposes, should be accurate, complete, and up-to-date. We will protect personal information by reasonable security safeguards against loss or theft, as well as unauthorized access, disclosure, copying, use or modification. We will make readily available to customers information about our policies and practices relating to the management of personal information. We are committed to conducting our business in accordance with these principles in order to ensure that the confidentiality of personal information is protected and maintained."},{"title":"Books","date":"2023-12-15T01:00:10.133Z","updated":"2022-04-10T15:41:14.000Z","comments":false,"path":"books/index.html","permalink":"https://www.xingyulei.com/books/index.html","excerpt":"","text":""},{"title":"Categories","date":"2023-12-15T01:00:10.133Z","updated":"2022-04-10T15:19:44.000Z","comments":false,"path":"categories/index.html","permalink":"https://www.xingyulei.com/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2023-12-15T01:00:10.133Z","updated":"2022-04-25T03:45:58.000Z","comments":true,"path":"links/index.html","permalink":"https://www.xingyulei.com/links/index.html","excerpt":"","text":""},{"title":"Ê†áÁ≠æ","date":"2023-12-15T01:00:10.133Z","updated":"2021-02-07T16:58:06.000Z","comments":false,"path":"tags/index.html","permalink":"https://www.xingyulei.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-12-15T01:00:10.133Z","updated":"2021-02-07T16:58:06.000Z","comments":false,"path":"repository/index.html","permalink":"https://www.xingyulei.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Git Summary: Command and Workflow","slug":"general-git-tip","date":"2023-11-19T16:00:00.000Z","updated":"2024-01-27T20:59:35.565Z","comments":true,"path":"post/general-git-tip/","link":"","permalink":"https://www.xingyulei.com/post/general-git-tip/","excerpt":"","text":"Command Comparison Setting up Repository git init vs. git clone git init is a setup process where you initialize a bare local repo git clone obtain a local development clone repo from an already setup central repository, which can be treated as combining git init and git remote add &lt;name&gt; &lt;url&gt; git Push vs. Pull git pull vs pull request and git push vs push request git pull pulls the changes from the remote repo to your local repo, which is effectively a git fetch followed by a git merge pull request is you requesting another repo to pull your change (more or less asking them to git pull from your repo). A push request is the other way around, where the target repo ask you to git push your changes Configuration git config this command allows you to configure your Git configuration on a global or local project level, some common usage includes setting up name and email, configuring text color, or editor choice. There are three configuration levels: --local, --global, --system git --global user.name &quot;John Doh&quot; git --system core.editor vim Note: most config only need to be set once, email is an exception where you will want to use personal email for personal projects and professional email for work-related projects. Submodule initialize submodule git submodule add https://github.com/repo_name &lt;folder_name&gt; update submodule to the latest git submodule update --remote --merge reset submodule if you‚Äôve made a modification internally git submodule foreach --recursive git reset --hard hard reset the submodule by de-initializing it and re-initializing it git submodule deinit -f . git submodule update --init remove submodule completely git submodule deinit -f &lt;submodule path&gt; git rm --force &lt;submodule path&gt; rm -rf .git/modules/&lt;submodule path&gt; Common Workflow TLDR: Working directory: where we edit files Staging area: a temporary location where files are kept for the next commit Local repository: contains the code that has been committed Remote repository: the remote server that stores the code Remote remote repo stores all branches that are tracked remotely and publicly available, which includes: master (the develop branch), other feature branches (feature1, feature2 and etc) Local tracking ref (e.g. origin/master, origin/feature1) copy of the remote repo you last fetched. `git fetch` grabs the *remote repo* and makes a copy of it on your local machine. You never work directly on that copy, because it is used for tracking. When you rebase a branch, it updates your *local branch* with all the latest from that copy you just fetched. - Usage: `git fetch` updates the latest change from remote (this needs to be combined with `git merge/rebase` to actually affect the working tree) local branch (e.g. master, feature1) current branch with all committed changes. So if you have uncommitted changes they are not represented in the local branch above. - `git status` tracks the change between the *local branch* and *tracking ref*, but it doesn't know the latest corresponding remote branch unless we fetch it. working tree and index/staging area: the current state of the files in your current branch. So everything in the branch with your un-committed changes on top of it. - `git add` and `git commit` to reflect changes onto the *local branch* Feature Branch Workflow Get the Latest Production Code: git checkout master switches local branch to master and git status to see if there are local/active changes made in the last session git fetch origin pulls the latest code (of all remote branches in the remote repo like remote master, remote feature1, feature2, etc) from the remote host (e.g. bitbucket). So, you get the most up-to-date code for tracking ref. git rebase origin/develop copy that up-to-date code over to your working tree Start a Feature Branch: git flow feature start featureName will branch off a new feature branch (e.g. feature3) and check it out (making it your local branch and updating your working tree). So, make sure you have fetched and rebased to the latest before starting. From this point, everything you change is local and isolated on the feature branch. Save Changes: git add and git commit to updating the local branch with your active change git push origin will push the local branch (e.g. feature3) to the remote version of that branch (note: not the remote master but the remote feature; never push directly to develop) this made the feature branch available for others so they could pull it down to their machine and test it. the first time you push a branch to remote repo that doesn‚Äôt have it yet, there could be an error saying ‚Äúno upstream branch‚Äù, to fix: git push --set-upstream origin feature/feature3') open up a pull request to merge remote feature to remote master and add reviewers Update Feature to Match Master: if you are on a feature branch (e.g. feature3) and you want your branch up-to-date with master because maybe someone has pushed a branch to remote repo that you want the changes from, or addressing a PR comment; you can rebase your branch. git fetch origin and git rebase origin/develop get the latest in remote repo and rebase your feature branch on top of master, make the adjustments and commit and push. you may get an error while trying to push your branch again. need to use force overwrite. commit or stash your active change before rebasing otherwise you might lose it, you‚Äôll be notified for any code conflicts during rebase if your code, on the other hand, is decoupled from anything else, you could just skip the rebase and commit and push. Update Feature Branch: git checkout feature/branch1 git status to see if you have local change by checking it against the current local tracking branch and git fetch origin to update the local tracking branch from remote git rebase origin/feature/branch1: while on feature branch1, rebase local workspace to local tracking branch that was just synced, you now have the latest from remote locally (if there‚Äôs local change on the workspace, you need to stash or revert it))","categories":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/categories/general/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"}]},{"title":"Write Metadata in Unreal: Blueprint-Driven Workflows","slug":"ue-metadata","date":"2023-10-12T16:00:00.000Z","updated":"2023-11-19T00:13:06.986Z","comments":true,"path":"post/ue-metadata/","link":"","permalink":"https://www.xingyulei.com/post/ue-metadata/","excerpt":"","text":"Introduction In the world of digital workflows, handling metadata is a common practice. In most CG pipelines, metadata is stored in external text files, allowing tools to easily read and write data. But when dealing with Unreal Engine, which operates predominantly in real-time, the challenge arises to access metadata through Blueprint scripting, requiring the metadata to be in Unreal‚Äôs native format. After some research, I came across a proposal from a staff member in the Unreal Developer Community. In this article, we‚Äôll explore the different methods from the proposal and discuss the approach I‚Äôve settled on. Data Table Data tables offer a flexible way to structure data. However, it‚Äôs important to note that you need to define the data structure in advance to use them effectively To have a working data table we need to first create a data structure where each entry of the data table will conform to. Data Table (left) with corresponding Data Structure (right) How to Read Data Table 1234567891011121314import unrealdt_path = r&#x27;/Game/Cinematics/Metadata/DT_TestMetadata.DT_TestMetadata&#x27;dt = unreal.EditorAssetLibrary.find_asset_data(dt_path).get_asset()col_name = &quot;Version&quot; row_names = unreal.DataTableFunctionLibrary.get_data_table_row_names(dt)positions = unreal.DataTableFunctionLibrary.get_data_table_column_as_string(dt, col_name)for idx, col in enumerate(positions): print(f&quot;&#123;row_names[idx]&#125; - &#123;col_name&#125;: &#123;col&#125;&quot;)# entry1 - Version: 2# entry2 - Version: 0 How to Write Data Table It seems like data tables are ready-only at first, as there are only get_data function sets: https://forums.unrealengine.com/t/set-data-table-row/85844 However, there are in fact a way to write to data table, and that is with the use of .csv or .json. 12unreal.DataTableFunctionLibrary.fill_data_table_from_json_file(data_table, json_file_path, data_structure)unreal.EditorAssetLibrary.save_loaded_asset(data_table, True) I won‚Äôt go into how to update .csv or .json files, but do note that the formatting of the text file is important, and you can get a reference of what the file would look at by simply export out the data table with some test data like so: Metadata To access metadat for each asset, you can do a right-click ‚ÄúAsset Actions‚Äù, ‚ÄúShow Metadata‚Äù. This is quite handy since, based on our need, it can be bound to an asset. And if we want to separate the binding between the asset and the data, we can also do so by creating an empty blueprint asset and use it as a central container to store metadata. The limitation however is that all the values are string type. How to Read Metadata 123456789101112import unrealu_asset_path = r&#x27;/Game/LevelPrototyping/Meshes/SM_ChamferCube.SM_ChamferCube&#x27;asset = unreal.EditorAssetLibrary.find_asset_data(u_asset_path).get_asset()map = unreal.EditorAssetLibrary.get_metadata_tag_values(asset)print(map)# &#123;&quot;version&quot;: &quot;4&quot;&#125;value = unreal.EditorAssetLibrary.get_metadata_tag(asset, &quot;version&quot;)print(value)# 4 How to Write Metadata We can also easily set and remove the metadata tag and values like so. 1234unreal.EditorAssetLibrary.set_metadata_tag(asset, &quot;version&quot;, &quot;4&quot;)unreal.EditorAssetLibrary.save_asset(u_asset_path)unreal.EditorAssetLibrary.remove_metadata_tag(asset, &quot;version&quot;) Blueprint Variable And lastly, I want to introduce the approach I ended up with: map variable in a custom blueprint asset. We first create a Blueprint asset using the basic Object class, and then add our custom ‚ÄòVersion‚Äô variable as a string: integer map this is basically equivalent to: 1&quot;Version&quot;: &#123;str: int&#125; Through scripting, we first need to get the default class object of the blueprint, which can be achieved like so: 12345678910import unrealu_bp_path = r&#x27;/asset_path&#x27;u_bp = unreal.EditorAssetLibrary.find_asset_data(u_bp_path).get_asset()# generated classu_bp_generated = unreal.load_object(None, u_bp.generated_class().get_path_name())# dcou_bp_dco = unreal.get_default_object(u_bp_generated) The advantage here lies in having a single blueprint asset capable of storing numerous variables, each natively typed to Unreal. Nevertheless, I haven‚Äôt yet attempted to create variables solely through code. How to Read Blueprint Variable 1234567def get_version(dco, name): try: version = dco.get_editor_property(&#x27;version&#x27;)[name] except KeyError: print(&#x27;no &#123;&#125; key&#x27;.format(name)) return version How to Write Blueprint Variable Note that we use the get_editor_property() to set the metadata 123456789def set_version(dco, name, version): try: u_bp_dco.get_editor_property(&#x27;version&#x27;)[name] = version except TypeError as e: print(&#x27;TypeError: &#123;&#125; of &#123;&#125; incorrect, &#123;&#125;&#x27;.format(type(version), version, e)) return False unreal.EditorAssetLibrary.save_asset(bp_path) return True Example Since, this approach is the one I have experimented the furthest along, here‚Äôs an example on how I access it in another Blueprint: Another way is to use ‚ÄòGet Class Default Object‚Äô and ‚ÄòCast To BP Test Metadata‚Äô which return ‚ÄòAs BP Test Metadata‚Äô and can then access the ‚ÄúVersion‚Äù variable. References Unreal Forum - How to store text data with Python? Unreal Forum - Reimport DataTable(csv) with python Unreal Forum - Reading a DataTable‚Äôs Values with Python","categories":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/categories/unreal/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"blueprint","slug":"blueprint","permalink":"https://www.xingyulei.com/tags/blueprint/"}]},{"title":"Customize Windows 10/11 Right-click Context Menu","slug":"py-win-contextmenu","date":"2023-08-28T16:00:00.000Z","updated":"2023-11-19T00:15:22.388Z","comments":true,"path":"post/py-win-contextmenu/","link":"","permalink":"https://www.xingyulei.com/post/py-win-contextmenu/","excerpt":"","text":"Introduction It‚Äôs been a while, today we have a pretty awesome content to explore that is how we can create the right-click context menu in Windows. I found that there‚Äôs not a lot of comprehensive and up-to-date tutorial on this subject for tech artists, but this would be a really powerful tool to speed up any types of workflow that involves going into Windows Explorer. (for example, right-click on a file and have a shortcut to get its perforce depot info) And the best thing is: it‚Äôs super easy to follow, certainly much easier than learning how to create a context menu in Qt. Registry Setup Everything regards to the Windows context menu setup is done within the Windows Registry Editor. Hierarchy First I‚Äôm gonna do an example of manual implementation. we‚Äôll want to navigate to this path for now: HKEY_CURRENT_USER\\Software\\Classes\\directory\\Background\\shell (we‚Äôll explain this later here) right-click on the ‚ÄòBackground‚Äô key/folder and create a new ‚Äòkey‚Äô named ‚Äòshell‚Äô if there isn‚Äôt one already create a key under ‚Äòshell‚Äô (I named mine ‚Äòtest_menu‚Äô) and then create a key under it called ‚Äòcommand‚Äô Field Next we‚Äôll want to modify the field of those keys, in the menu item key (in my case the ‚Äòtest_menu‚Äô) there are some optional fields we can add customize the appearance of our menu item. The following are some optional String Field: (To add field, right-click on the right panel, ‚ÄòNew‚Äô - ‚ÄòString Value‚Äô ) MUIVerb: The display name of the menu item, if this is not set, the name will default to the key name (i.e. ‚Äútest_menu‚Äù in our case) Icon: For displaying icon, the data should be set as the icon path, common format for the icons are .ico and .dll Position: changes the location of the menu item, e.g. ‚ÄúTop‚Äù, ‚ÄúBottom‚Äù Setting up Command Finally, we‚Äôll want to modify the command key‚Äôs field, so it can actually perform custom operations. Go to the {Default} and edit the Data to whatever operation we would like to perform when clicking this menu item. The syntax would be an execution command similar to ones we would put in command prompt or a .bat file. Running Python Script Here‚Äôs an example to run python script: In the Data section we would put: &quot;path to python.exe&quot; &quot;path to python script.py&quot; Passing Argument In order to pass in arguments, such as the directory or the file where the menu was initiated. We add %v for directory and %1 for file path at the end of the command Data: e.g. &quot;D:/python39/python.exe&quot; &quot;D:/p4clipboard.py&quot; &quot;%1&quot; be aware of the slashes if you would like to debug your python script and not make it close immediately after execution simply add -i flag after the &quot;python.exe&quot; And within the p4clipboard.py file, we can parse the argument passed in as such: 12345678910111213# converts the selected file to its perforce depot path and add to clipboardimport sysimport p4Util # this is a mock p4 moduleimport winUtil # also a mock moduleif __name__ == &#x27;__main__&#x27;: selected_file = sys.argv[1] with p4Util.connect(): p4_path = p4Util.get_depot_path(selected_file) winUtil.copy_to_clip(p4_path) Python Registry Automation The above examples are very cool, but requires a lot of manual set up, we can leverage Python to set up the registry entries for us. 12345678910111213141516171819202122# example from: https://github.com/seddie95/folder_organizer/blob/master/make_key.pyimport osimport sysimport winreg as regpython_exe = sys.executablescript_path = r&quot;D:\\test.py&quot;reg_root_path = r&#x27;Directory\\\\Background\\\\shell&#x27;reg_root = reg.OpenKey(reg.HKEY_CLASSES_ROOT, reg_root_path, 0, reg.KEY_ALL_ACCESS)reg_menu = reg.CreateKey(reg_root, r&quot;test_menu\\\\&quot;)reg.SetValue(reg_menu, &#x27;MUIVerb&#x27;, reg.REG_SZ, &#x27;this is my test menu&#x27;)reg.CloseKey(reg_menu)reg_root = reg.OpenKey(reg.HKEY_CLASSES_ROOT, reg_root_path, 0, reg.KEY_ALL_ACCESS)reg_menu_command = reg.CreateKey(reg_root, r&quot;test_menu\\\\command&quot;)reg.SetValue(reg_menu_command, &#x27;&#x27;, reg.REG_SZ, &quot;&#123;&#125; &#123;&#125; %v&quot;.format(python_exe, script_path))reg.CloseKey(reg_menu_command) Reg File Another way to transfer out the registry setup is by exporting out from registry editor directly to a .reg file. This can be done by simply selecting the top key and right-click and select ‚ÄòExport‚Äô; the .reg file is a text based file. Cascade Menu How should we go about implementing a multi-layered menu? I found a lot of examples online that are either complicated/messy or not working at all. Eventually I‚Äôve come across this blog explaining what I think is the ideal way to implement Cascading menu. It keeps everything in one place, has this clean and easy to understand hierarchy, and very easy. Essentially, we only need to add one additional field on the top level menu item called: subcommands, and we then keep all the children menu item nested within it like what we have previously done. (An example of the full hierarchy breakdown) Target Type Different context menu triggering condition requires editing different registry keys, This goes the same for different user group (registration visible to the current user vs. affecting globally to the machine). Background: when right-click on the backdrop of the explorer or desktop if you are administrator HKEY_CLASSES_ROOT\\Directory\\Background\\shell if you are a normal user HKEY_CURRENT_USER\\Software\\Classes\\directory\\Background\\shell Folder: when right-click on a folder in the explorer or desktop if you are administrator HKEY_CLASSES_ROOT\\Directory\\shell if you are a normal user HKEY_CURRENT_USER\\Software\\Classes\\directory\\shell File: when right-click on a file in the explorer or desktop if you are administrator HKEY_CLASSES_ROOT\\*\\shell if you are a normal user HKEY_CURRENT_USER\\Software\\Classes\\*\\shell File Type Association: when right-click on a specific file type: if you are administrator: HKEY_LOCAL_MACHINE\\Software\\Classes\\SystemFileAssociations\\&#123;.format&#125;\\shell if you are a normal user: HKEY_CURRENT_USER\\Software\\Classes\\SystemFileAssociations\\&#123;.format&#125;\\shell Noteworthy Mentions To further customize the context menu, we might be interested with adding separators between menu items, also having specific order or menu items. These can all be achieved quite easily described in Sverrir‚Äôs Blog which I‚Äôve linked below. Furthermore, there are also menu item with toggle box or check box; these are not explored as of now. References Stack Overflow - How add context menu item to Windows Explorer for folders Notion - Creating a context menu with sub-menu for Windows for a specific file extension Stack Overflow - Add menu item to Windows context menu only for specific filetype Sverrir‚Äôs Blog - Creating Cascading Menu Items in Windows Explorer 7, 8, 8.1 &amp; 10 Microsoft - Enhancing the ‚ÄúOpen Command Prompt here‚Äù Context Menu experience","categories":[{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/categories/windows/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Run Maya Batch Mode in 2023!","slug":"maya-batch-mode-2","date":"2023-05-05T16:00:00.000Z","updated":"2023-11-17T19:13:36.931Z","comments":true,"path":"post/maya-batch-mode-2/","link":"","permalink":"https://www.xingyulei.com/post/maya-batch-mode-2/","excerpt":"","text":"I‚Äôm reviving a post from exactly 4 years ago ‚åõÔ∏è. It was severely flawed since it was one of my earliest post while I‚Äôm still learning my ways around Maya. Standalone Module 12import maya.standalonemaya.standalone.initialize(name=&#x27;python&#x27;) Using mayapy Interpreter I strongly recommend using mayapy in order to stay consistent with the behaviour of GUI maya. Prefer using mayapy: Maya‚Äôs own python interpreter, this ensures all the libraries and plugins are compatible, it also saves some trouble configuring environments. Using External Python Interpreter When using external interpreter for whatever reason, we‚Äôll need to check: The python interpreter should match the maya python version e.g. (python27 for Maya 2018) System environment variable will need to set up in order to find maya modules Otherwise, we may encounter the following: 1ImportError: No module named maya.standalone To configure the environment for our external interpreter: 1234567891011121314151617181920import sysimport osMAYA_LOCATION = &quot;C:/Program Files/Autodesk/Maya2018&quot;PYTHON_LOCATION = MAYA_LOCATION + &quot;/Python/Lib/site-packages&quot;os.environ[&quot;MAYA_LOCATION&quot;] = MAYA_LOCATIONos.environ[&quot;PYTHONPATH&quot;] = PYTHON_LOCATIONsys.path.append(MAYA_LOCATION)sys.path.append(PYTHON_LOCATION)sys.path.append(MAYA_LOCATION+&quot;/bin&quot;)sys.path.append(MAYA_LOCATION+&quot;/lib&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/DLLs&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib/plat-win&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib/lib-tk&quot;)print(&#x27;\\n&#x27;.join(sys.path)) Making Our First Standalone Script After maya.standalone has initialized, we can import maya.cmds as usual. Let‚Äôs add a test function to our standalone script. 12345678910111213import maya.cmds as cmdsdef test(): maya_file_to_open = r&quot;C:\\Users\\Lei\\Desktop\\test.ma&quot; cmds.file(maya_file_to_open, o=True) # import a file and rename maya_file_to_import = r&quot;C:\\Users\\Lei\\Desktop\\import.ma&quot; cmds.file(maya_file_to_import, i=True, type=&quot;mayaAscii&quot;) temp_name = r&quot;C:\\Users\\Lei\\Desktop\\temp.ma&quot; cmds.file(rename=temp_name) cmds.file(force=True, save=True, options=&#x27;v=1;p=17&#x27;, type=&#x27;mayaBinary&#x27;) This test function opens a maya file on my desktop and import a maya file and save out as another file. Execution Here I‚Äôm using mayapy as example, we can of course using the external python interpreter, but again, it takes extra steps. Execute from Command Line make sure to add mayapy to our system environment variable. in system variable: add C:\\Program Files\\Autodesk\\Maya2018\\bin to Path open command prompt, and enter mayapy [directoryTo/firstStandalone.py] Execute using subprocess We can do it without going to command line, but by executing another .py using subprocess 123456789101112import subprocessmayapy = r&#x27;C:\\Program Files\\Autodesk\\Maya2018\\bin\\mayapy.exe&#x27;script = r&#x27;[directory/firstStandalone.py]&#x27;process = subprocess.Popen( [mayapy, script], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env)out, error = process.communicate() Here I‚Äôm removing the environment setup in firstStandlone.py, and add a wrapper: 12345678910111213141516171819202122232425262728import loggingimport tracebackimport maya.standalonemaya.standalone.initialize(name=&#x27;python&#x27;)import maya.cmds as cmdsdef test(): maya_file_to_open = r&quot;C:\\Users\\Lei\\Desktop\\test.ma&quot; cmds.file(maya_file_to_open, o=True) # import a file and rename maya_file_to_import = r&quot;C:\\Users\\Lei\\Desktop\\import.ma&quot; cmds.file(maya_file_to_import, i=True, type=&quot;mayaAscii&quot;) temp_name = r&quot;C:\\Users\\Lei\\Desktop\\temp.ma&quot; cmds.file(rename=temp_name) cmds.file(force=True, save=True, options=&#x27;v=1;p=17&#x27;, type=&#x27;mayaBinary&#x27;)if __name__ == &#x27;__main__&#x27;: try: cmds.evalDeferred(runMode) except: logging.error(traceback.print_exc()) Standalone Script with Arguments Sometimes, we would want to pass arguments to our standalone script Using sys.argv 1234import sysfile_path = sys.argv[1]file_name = sys.argv[2] Example from Toadstorm Nerdblog: 1234567891011121314151617181920212223242526272829import subprocessmaya_path = &#x27;directory/mayapy.exe&#x27; # mayapy or full path to mayapy.exescript_path = &#x27;directory/firstStandalone.py&#x27;def add_layer(file_names,layer_name): for file_name in file_names: command = r&#x27;mayapy &#123;&#125; &#123;&#125; &#123;&#125;&#x27;.format( script_path, file_name, layer_name ) process = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) process.wait() print(process.returncode) # this return the message from cmd if __name__ == &#x27;__main__&#x27;: # define a list of filenames to iterate through files = [&#x27;file1&#x27;, &#x27;file2&#x27;, &#x27;file3&#x27;] render_layer = &#x27;a new render layer&#x27; # run procedure, assuming you&#x27;ve already defined it add_layer(files, render_layer) Using argparser In the commandline launch script, add argment: 123456789101112import subprocess...scene = r&quot;C:\\Users\\Lei\\Desktop\\test.ma&quot;process = subprocess.Popen( [mayapy, script, &#x27;scene=&#123;&#125;&#x27;.format(scene)], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env)out, error = process.communicate() And then in the wrapper, use the ArgumentParser() 1234567891011import argparseparser = argparse.ArgumentParser()parser.add_argument(&#x27;scene&#x27;)command_line_args = parser.parse_args()SCENE = command_line_args.scenedef example(): cmds.file(SCENE, open=True, force=True) ... Bonus: Integrate UI Elements from Qt It is easy to integrate UI in a standalone tool by creating a QApplication instance, and for Maya GUI, Maya has QApplication instance already created. but for maya standalone script, we need to make sure to create a QApplication instance before the standalone initialization: 1234567891011import sysfrom Qt import QtWidgetsapp = QtWidgets.QApplication(sys.argv)import maya.standalonemaya.standalone.initialize()... Depending on our tool need, usually standalone script wouldn‚Äôt block the main event loop, so we just exit when finished, therefore, no need to add sys.exit(app.exec_()) Bonus: Copying GUI Maya Environment To get the exact environment as the GUI Maya version (this could be useful if there‚Äôs any startup scripts that modifies the environment) In the maya session, parse out the environment and save it as a dictionary: 123import osenv_dict = dict(os.environ) And in the commandline setup .py, apply the environment from the dictionary: 12345678910env_dict_copy_from_maya = &#123;&#x27;TEST&#x27;: &#x27;THIS IS A TEST&#x27;&#125;current_env = os.environ.copy()for key, value in env_dict_copy_from_maya.items(): current_env[key] = valueprocess = subprocess.Popen( ..., env=current_env) Reference Xingyu Lei - Save Time and Boost Efficiency: Learn to Run Maya in Batch Mode Stack Overflow - maya standalone with pyside2 Tech-Artist Org - Import maya.standalone problem Stack Overflow - use external python script to open maya and run another script inside maya Stack Overflow - How to use an external interpreter for Maya? Toadstorm Nerdblog - Python in Maya Standalone","categories":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/categories/maya/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"Beginner's Guide to Object-Oriented Design for Scalable Application","slug":"general-oo-design","date":"2023-04-01T16:00:00.000Z","updated":"2023-11-17T19:17:43.572Z","comments":true,"path":"post/general-oo-design/","link":"","permalink":"https://www.xingyulei.com/post/general-oo-design/","excerpt":"","text":"This blog is a second processed product/summary of the tutorial series: Linkedin Learning: Object-Oriented Programming. Bullet points extracted by me and reformatted with help from ChatGPT. Object-oriented design is a fundamental concept in software development that focuses on modeling the behavior and characteristics of real-world objects in a program. By understanding the basics of object identity, properties and attributes, behavior, and class, developers can create well-designed, efficient, and maintainable software. Introduction Object Identity: Objects are unique entities within a program that are separate and distinguishable from one another, even if they belong to the same class or type. Each object has a unique identifier that differentiates it from other objects, and this identity is essential for managing and manipulating objects within a program. Properties and Attributes: Objects have properties or attributes that define their characteristics, such as size, weight, color, and shape. These attributes are essential for representing real-world objects in a program and can be used to distinguish between different objects of the same type. Behavior: Objects have behavior or actions that they can perform, such as filling, swimming, or ringing. Behavior is typically defined as methods or functions that manipulate an object‚Äôs attributes or interact with other objects in the program. One of the challenges of object-oriented design is identifying what can be an object in a program. In general, objects should be represented by nouns and not verbs, and they should have a unique identity, attributes, and behavior. The focus should be on identifying the main objects in the program and their interactions with one another. A class is a template for creating objects in a program. It defines the name, type, attributes, and behavior of objects that belong to that class. A class can be used to create multiple objects of the same type and is an essential component of object-oriented design. Steps for Object-Oriented Design The process of object-oriented design involves analyzing and designing the program before writing the code. This includes gathering requirements, describing the application, identifying the main objects, describing the interactions between objects, and creating a class diagram using Unified Modeling Language (UML). Software/System Requirements In object-oriented design, understanding the software/system requirements is essential for creating a well-designed, efficient, and maintainable program. Sets of Requirements Software/system requirements can be divided into two sets of questions: what does it need to do? how should it do it? The first set of questions refers to the functionality of the program, while the second set refers to performance, legal, support, and security requirements. Function Requirements: refer to what the system/application must do. These requirements capture the bare necessities of the program and define the core functionality that the program needs to provide. Non-Functional Requirements: define how the system/application should do something. These requirements are concerned with aspects such as usability, reliability, performance, supportability, design, implementation, interface, and physical constraints. FURPS Requirement Model The FURPS requirement model is a framework for thinking about software/system requirements. FURPS stands for functionality, usability, reliability, performance, and supportability. Functionality refers to the capabilities of the system, while the other four elements are non-functional requirements. Usability focuses on the user and include factors such as human factors UI and documentation. The usability of the program is essential for ensuring that users can efficiently and effectively use the system. Reliability is concerned with predictability, availability, and failure rate. These requirements ensure that the program operates consistently and reliably. Performance relates to speed, efficiency, and limitations. These requirements ensure that the program operates efficiently and effectively, even when processing large amounts of data. Supportability is concerned with extensibility, configurability, and testability. These requirements ensure that the program can be maintained and updated over time. Design, Implementation, Interface, and Physical Constraints In addition to the FURPS requirements, other non-functional requirements include design (how the program is built), implementation (the programming language used and standards to follow), interface (the ability of the program to interface with other systems), and physical constraints (the hardware limitations of the system). Use Case The use case is a scenario that outlines a particular goal of an actor (user) with the system. It consists of the following elements: 123456[Title] Short and simple goal[Primary Actor] The user who desires to achieve the goal[Success Scenario] Steps or paragraphs describing how to achieve the goal To create a use case, identify the actors who interact with the system and separate them by their roles in the use case, not job titles. Focus on the intent of the goal and not go into too specific steps or too broad a goal. The scenario should be concise and avoid detailed technical implementation or UI elements. Focus on the ‚Äúsunny-day‚Äù scenario and avoid including rarely encountered scenarios. Avoid needless words and keep the scenario short and concise. Conceptual Model In object-oriented design, creating a conceptual model is a crucial step in developing a software or system. A conceptual model helps to identify the objects and their relationships that will form the backbone of the software. Here are the steps involved in creating a conceptual model. Identify Objects: The first step is to identify the objects that will be used as class objects in the system. This can be done by looking at the user story or use case and picking out the relevant nouns. For example, in a user story about ordering a meal, the relevant objects might include ‚Äúcustomer,‚Äù ‚Äúmenu,‚Äù and ‚Äúorder.‚Äù Identify Class Relationships: Once the objects have been identified, the next step is to connect them with lines to show their relationships. It is important to write down the verbs on each line to avoid using generic words like ‚Äúuse.‚Äù Instead, use verbs that describe the relationship between the objects. For example, in the meal ordering system, the ‚Äúcustomer‚Äù might ‚Äúplace‚Äù an ‚Äúorder‚Äù from the ‚Äúmenu.‚Äù Figure Out Class Responsibilities: The final step is to figure out the responsibilities of each class. This involves identifying the behaviors or actions that each class will perform. This can be done by looking at the user story or use case and picking out the relevant verbs. For example, in the meal ordering system, the ‚Äúmenu‚Äù class might have the responsibility of ‚Äúdisplaying‚Äù the available items while the ‚Äúorder‚Äù class might have the responsibility of ‚Äúcalculating‚Äù the total cost of the meal. It is important to note that each behavior should belong to the class that is most responsible for it. A behavior usually involves multiple objects, but each object should be responsible for itself. Avoid putting too much responsibility on a single object, which can lead to a ‚Äúgod object‚Äù that controls everything in the system. In addition to these steps, another useful tool for creating a conceptual model is CRC (Class Responsibility Collaboration) cards. These cards can be used to organize the classes and their responsibilities, making it easier to visualize the system and identify any potential issues. Class Diagram and Class Relationship In object-oriented design, UML class diagrams are used to represent the structure of a system‚Äôs classes and the relationships between them. Here are some important considerations when creating UML class diagrams. Each class in a UML class diagram should have a name, attributes, and behaviors. When creating classes, it‚Äôs important to focus on the behaviors of the objects, rather than just their attributes. This is because objects are meant to do things, not just hold data. In general, it‚Äôs recommended to keep as many class attributes and methods as private as possible, only making them public if we are certain that other objects will need to use them. Constructor: Constructors are considered as behavior and should be treated as such when creating UML class diagrams. In UML, a constructor is represented as a method with the same name as the class. Interface: In UML, abstract classes and interfaces are represented as types. Abstract classes are used to represent a general category of objects, while interfaces are used to represent shared capabilities or behaviors. For example, a draw() interface can be shared between different types of objects that can be drawn on a screen. While objects of different types cannot be categorized under the same abstract class, they can all share the draw() interface to be able to draw on the screen. A system can iterate through all objects and call the draw() interface to update the screen. Principles and Patterns There are several principles and patterns that can help make our software development more efficient and effective. Single Responsibility Principle: A class should have only one responsibility. Avoid creating god objects that try to do everything. Instead, split responsibilities into multiple classes. Don‚Äôt Repeat Yourself (DRY): Avoid duplicating code. Reuse code and extract common functionality into methods or classes. You Ain‚Äôt Gonna Need It (YAGNI): Don‚Äôt overdo it. Only add features that are necessary and useful. Avoid adding unnecessary complexity. Error Handling and Prompt to Guide Users: Design our software to handle errors gracefully and provide clear prompts to guide users. Good error handling can improve the user experience and prevent bugs. Software Testing: Testing is an important part of software development. Write automated tests to ensure that our code is working as intended and to catch regressions. Design Patterns: Design patterns are reusable solutions to common software design problems. Design Pattern They provide a template to help structure our code around. One of the most well-known books on design patterns is ‚ÄúDesign Patterns: Elements of Reusable Object-Oriented Software‚Äù by the ‚ÄúGang of Four‚Äù, which describes 23 patterns. Creational Patterns: These patterns deal with the instantiation of objects. Examples include Abstract Factory, Builder, Factory Method, Prototype, and Singleton. Structural Patterns: These patterns deal with how classes are designed and composed. Examples include Adapter, Bridge, Composite, Decorator, Facade, Flyweight, and Proxy. Behavioral Patterns: These patterns deal with communication between objects. Examples include Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, and Visitor. By following these principles and patterns, we can create software that is more modular, maintainable, and scalable.","categories":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/categories/general/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"design","slug":"design","permalink":"https://www.xingyulei.com/tags/design/"}]},{"title":"Python REST API: Build and Deploy Custom Server","slug":"py-http-server","date":"2023-01-06T16:00:00.000Z","updated":"2023-11-19T00:15:45.417Z","comments":true,"path":"post/py-http-server/","link":"","permalink":"https://www.xingyulei.com/post/py-http-server/","excerpt":"","text":"HTTP Server Basic In a client-server model, HTTP server plays the role of a server and implements using HTTP/HTTPS network protocol. HTTP runs on a socket and uses TCP/IP connection, but is a higher-level connection that takes care of the send and receive process in a predefined format. Request and Respond An HTTP request contains a URL, a method, a header and a body; ‚ÄúPOST‚Äù and ‚ÄúGET‚Äù are the two most common request methods: &quot;POST&quot;: from the client submits information to the server &quot;GET&quot;: from the client expect information back from the server A response is what the client receives from the server in answer to the HTTP request. An HTTP response contains a status code, a header and a body Rest API A REST (also known as RESTful) API is a web API that conforms to the constraints of REST (representational state transfer) architectural style and allows for interaction with RESTful web services. When a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint. The touch point of this request/communication is the endpoint. Each endpoint is the location (URL of a service) from which APIs can access the resources they need to carry out their function. The resource or information is delivered in one of several formats via HTTP (JSON being the most popular). Using http.server To build a simple HTTP Server with ‚ÄúPOST‚Äù and ‚ÄúGET‚Äù methods: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import jsonimport loggingimport refrom http.server import BaseHTTPRequestHandler, HTTPServerclass LocalData(object): records = &#123;&#125;class HTTPRequestHandler(BaseHTTPRequestHandler): def do_POST(self): if re.search(&#x27;/api/post/*&#x27;, self.path): length = int(self.headers.get(&#x27;content-length&#x27;)) data = self.rfile.read(length).decode(&#x27;utf8&#x27;) record_id = self.path.split(&#x27;/&#x27;)[-1] LocalData.records[record_id] = data logging.info(&quot;add record %s: %s&quot;, record_id, data) self.send_response(200) else: self.send_response(403) self.end_headers() def do_GET(self): if re.search(&#x27;/api/get/*&#x27;, self.path): record_id = self.path.split(&#x27;/&#x27;)[-1] if record_id in LocalData.records: self.send_response(200) self.send_header(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;) self.end_headers() # Return json, even though it came in as POST URL params data = json.dumps(LocalData.records[record_id]).encode(&#x27;utf-8&#x27;) logging.info(&quot;get record %s: %s&quot;, record_id, data) self.wfile.write(data) else: self.send_response(404, &#x27;Not Found: record does not exist&#x27;) else: self.send_response(403) self.end_headers() if __name__ == &#x27;__main__&#x27;: server = HTTPServer((&#x27;localhost&#x27;, 8000), HTTPRequestHandler) logging.info(&#x27;Starting httpd...\\n&#x27;) try: server.serve_forever() except KeyboardInterrupt: pass server.server_close() logging.info(&#x27;Stopping httpd...\\n&#x27;) On the client side, we‚Äôre utilizing the requests module for sending requests: 12345import requestsid = &#x27;test&#x27;data = &#123;&#x27;key&#x27;: &#x27;value&#x27;&#125;r = requests.post(&#x27;http://localhost:8000/api/post/&#123;&#125;&#x27;.format(id), json=data) Here, we send a ‚ÄúPOST‚Äù method request to access the http://localhost:8000/api/post endpoint which added a dictionary type data payload. The data has an id of test and content of &#123;'key': 'value'&#125;. 123id = &#x27;test&#x27;r = requests.get(&#x27;http://localhost:8000/api/get/&#123;&#125;&#x27;.format(id))print(r.text) Then, we can send a ‚ÄúGET‚Äù request to retrieve the data we just added by accessing another endpoint http://localhost:8000/api/get/; this can be done either through a browser with the corresponding id (http://localhost:8000/api/get/test), or by sending an HTTP ‚ÄúGET‚Äù request using requests module. The response from the server gives the output: &#123;'key': 'value'&#125; Using flask Flask is a micro web framework written in Python I am going to re-created the HTTP server above with ‚ÄúPOST‚Äù and ‚ÄúGET‚Äù endpoints using flask, this is much simpler: 1234567891011121314151617181920from flask import Flaskfrom flask import requestapp = Flask(__name__)class LocalData(object): records = &#123;&#125;# POST endpoint@app.post(&#x27;/api/post/&lt;id&gt;&#x27;)def create_entry(id): data = request.get_json(force=True) LocalData.records[id] = data return data# GET endpoint@app.get(&#x27;/api/get/&lt;id&gt;&#x27;)def get_record(id): return LocalData.records[id] Now to run the server, we run the following command flask --app &lt;appName.py&gt; run; Additional --debug flag can be added before run to auto reload the latest script change when debugging. Rendering Webpage One of the common cases, when hosting an HTML server, is that users have the ability access our endpoint with their browser. Instead of spitting out raw data, we often want to format it to a nice HTML page. 1234567@app.route(&#x27;/&#x27;)def index_page(): datas = get_all_local_datas() if not datas: return &#x27;Welcome!&#x27; return render_template(&#x27;index.html&#x27;, jsons=datas) Here we are specifying an ‚Äòindex.html‚Äô landing page using the root path (‚Äô‚Äô), then a dummpy function that gets all the data from our storage (e.g. database). For HTML We can pass in the datas to a variable named json which is defined in the .html: 123&lt;body&gt; &lt;p&gt;&#123;&#123;jsons&#125;&#125;&lt;/p&gt;&lt;/body&gt; Note: it is required that the .html files rest in a folder called ‚Äútemplates‚Äù, unless we overwrite that configuration. For JavaScript In javascript, we need to use a jinja2 filter: 123&lt;script&gt; myfunc( &#123;&#123;jsons|tojson|safe&#125;&#125; );&lt;/script&gt; Linking External Files If you would like to include additional external .js or .css files, they all need to rest in a folder called ‚Äústatic‚Äù. Linking the files can then be done as such: 1&lt;script src = &#123;&#123;url_for(&#x27;static&#x27;, filename=&quot;myJS.js&quot;)&#125;&#125;&gt;&lt;/script&gt; 1&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href= &#123;&#123;url_for(&#x27;static&#x27;, filename=&quot;main.css&quot;)&#125;&#125;&gt; References Cloud Flare - What is HTTP? Red Hat - What is a REST API Flask Linode - Create a RESTful API Using Python and Flask Stack Overflow - Difference between socket programing and http programming Stack Overflow - Pass Variable from python (flask) to HTML in render template? GitHub Gist - simple_server.py by dfrankow","categories":[{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/categories/windows/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Unreal Rendering Workflow with Python Automation","slug":"ue-rendering-basic","date":"2022-12-02T16:00:00.000Z","updated":"2023-11-17T19:25:57.213Z","comments":true,"path":"post/ue-rendering-basic/","link":"","permalink":"https://www.xingyulei.com/post/ue-rendering-basic/","excerpt":"","text":"Introduction In this post, I‚Äôll cover Python automation using Movie Render Queue (MRQ) and Movie Scene Capture. I‚Äôll go over how to make Python tools to run in the Unreal Editor as well as outside Unreal through command line; How to change settings and add call backs. The MRQ is more preferred over Movie Scene Capture as it‚Äôs much more customizable, both in supported render setting and in automation (In a later post you‚Äôll see). Movie Render Queue Movie Render Queue is a successor to the Sequencer Render Movie feature, and is built for higher quality, easier integration into production pipelines, and user extensibility. With Movie Render Queue you can accumulate multiple render samples together to produce the final output frame, which allows for higher quality anti-aliasing, radial motion blur, and reduced noise in ray tracing. The Movie Render Queue (MRQ) is the latest and the greatest from Unreal for Rendering out cinematic, over the legacy Movie Scene Capture Tool. Movie Render Queue in Editor Here we can find the full example from Epic: Engine\\Plugins\\MovieScene\\MovieRenderPipeline\\Content\\Python\\MoviePipelineEditorExample.py Bare Minimal Through Unreal Editor, we use a render executor called PlayInEditor (PIE) executor. 1234567891011121314def movie_queue_render(u_level_file, u_level_seq_file, u_preset_file): subsystem = unreal.get_editor_subsystem(unreal.MoviePipelineQueueSubsystem) queue = subsystem.get_queue() executor = unreal.MoviePipelinePIEExecutor() # config render job with movie pipeline config job = queue.allocate_new_job(unreal.MoviePipelineExecutorJob) job.job_name = &#x27;test&#x27; job.map = unreal.SoftObjectPath(u_level_file) job.sequence = unreal.SoftObjectPath(u_level_seq_file) preset = unreal.EditorAssetLibrary.find_asset_data(u_preset_file).get_asset() job.set_configuration(preset) subsystem.render_queue_with_executor_instance(executor) Override Settings All the render settings are stored as an unreal.MoviePipelineMasterConfig object. It has sub setting components class unreal.MoviePipeline, for example: unreal.MoviePipelineOutputSetting, unreal.MoviePipelineCameraSetting, unreal.MoviePipelineColorSetting and etc Each Setting class then have properties, for unreal.MoviePipelineOutputSetting, it has properties such as: use_custom_frame_rate frame_number_offset output_directory etc All of which can be modified, attached, and removed. Example: 123uPreset = unreal.MoviePipelineMasterConfig()uSetting = uPreset.find_setting_by_class(unreal.MoviePipelineOutputSetting)uSetting.output_resolution = unreal.IntPoint(1280, 720) Callback Callbacks can be added upon each Shot, Job, Queue Finished. The callback function has to be kept as global variable here to prevent it being destroyed by GC. 1234def render_finished(params): unreal.log(params)executor.on_individual_job_work_finished_delegate.add_callable_unique(render_finished) or. 123456def render_errored(executor, pipeline, is_fatal, error_msg): passERROR_CALLBACK = unreal.OnMoviePipelineExecutorErrored()ERROR_CALLBACK.add_callable(render_errored)exector.on_executor_errored_delegate = ERROR_CALLBACK See my convenient class for PIE here: https://github.com/leixingyu/unrealUtil/blob/master/render/render.py Movie Render Queue Commandline The default MRQ command line offers customization by using either an Unreal Render Preset/Config asset or an Unreal Render Queue asset. Since there are so many settings in the MRQ we can modify, it‚Äôs hard to expose all of the little details through command line. If you do wish to do so, I have an entire blog about Unreal MRQ Custom Executor. 12345678910111213141516171819202122def movie_queue_render(u_level_file, u_level_seq_file, u_preset_file): command = [ UNREAL_EXE, U_PROJECT, u_level_file, # required &quot;-LevelSequence=%s&quot; % u_level_seq_file, # The sequence to render &quot;-MoviePipelineConfig=\\&quot;%s\\&quot;&quot; % u_preset_file, &quot;-game&quot;, # options &quot;-NoLoadingScreen&quot;, &quot;-log&quot;, # window size not resolution &quot;-Windowed&quot;, &quot;-ResX=800&quot;, &quot;-ResY=600&quot;, ] proc = subprocess.Popen(command) return proc.communicate() Movie Scene Capture Now this part may or may not be relevant anymore as many people treats the Movie Scene Capture as deprecated. But I thought I write it down anyway, as it might be helpful as a comparison to MRQ Movie Scene Capture Editor Here we can find an example from Epic: Engine\\Plugins\\MovieScene\\SequencerScripting\\Content\\Python\\sequencer_examples.py Bare Minimal 1234import unrealcapture = unreal.AutomatedLevelSequenceCapture()capture.level_sequence_asset = unreal.SoftObjectPath(sequencer_path)unreal.SequencerTools.render_movie(capture, unreal.OnRenderMovieStopped()) In this example, we only need to supply the path to the Unreal sequencer asset. Note that the render happens in the current level, so make sure to pre-load the map before running the Movie Scene Capture. Callback 12345def on_render_movie_finished(success): unreal.log(&quot;Movie has finished rendering&quot;) on_finished_callback = unreal.OnRenderMovieStopped()on_finished_callback.bind_callable(on_render_movie_finished) Note the on_finished_callback is a global variable so it is persistent and won‚Äôt get destroyed during GC. The next step is to register the callback function: unreal.SequencerTools.render_movie(capture_settings, unreal.OnRenderMovieStopped()) Override Setting The settings can be modified through class unreal.MovieSceneCaptureSettings Example: 123capture = unreal.AutomatedLevelSequenceCapture()setting = capture.settingssetting.output_directory = unreal.DirectoryPath(export_path) Movie Scene Capture Commandline A lot of custom flags can be specified through the command line, see the full list of control commands: Command Line Arguments for Rendering Movies Console variables can even be set through command line which is decent. 123456789101112131415161718192021222324252627282930313233import subprocessdef movie_scene_capture(u_level_file, u_level_seq_file, output_folder): command = [ UNREAL_EXE, U_PROJECT, u_level_file, # required &quot;-LevelSequence=%s&quot; % u_level_seq_file, # The sequence to render &quot;-MovieSceneCaptureType=/Script/MovieSceneCapture.AutomatedLevelSequenceCapture&quot;, &quot;-NoLoadingScreen&quot;, &quot;-game&quot;, &quot;-log&quot;, &quot;-MovieCinematicMode=yes&quot;, # general property &quot;-MovieFolder=%s&quot; % output_folder, # if doing .avi &quot;-MovieFormat=Video&quot;, # JPG, BMP, PNG or Video &quot;-MovieFrameRate=24&quot;, &quot;-MovieQuality=100&quot;, # compression quality in percentage &quot;-Windowed&quot;, &quot;-ResX=1920&quot;, &quot;-ResY=1080&quot;, # other &quot;-NoTextureStreaming&quot;, # for final render &quot;-NoScreenMessages&quot;, # no screen debug message ] proc = subprocess.Popen(command) return proc.communicate() Additional References Unreal Forums - Unable to execute MoviePipelineQueue from Python","categories":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/categories/unreal/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"rendering","slug":"rendering","permalink":"https://www.xingyulei.com/tags/rendering/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"sequencer","slug":"sequencer","permalink":"https://www.xingyulei.com/tags/sequencer/"}]},{"title":"Unreal Python Command Line: 3 Easy Methods","slug":"ue-commandline-python","date":"2022-11-05T16:00:00.000Z","updated":"2023-11-17T19:11:48.611Z","comments":true,"path":"post/ue-commandline-python/","link":"","permalink":"https://www.xingyulei.com/post/ue-commandline-python/","excerpt":"","text":"Introduction The Unreal official documentation has two simple examples to run Python through commandline, one being Commandlet: a headless mode without even opening the Editor, the other one being the Full Editor mode which has Unreal Editor fully opened and loaded. Do you know there‚Äôs actually a ‚Äúthird‚Äù way? And today, I‚Äôll discuss my experience and preferences of using all of them. Commandlet 1UnrealEditor.exe &quot;C:\\projects\\MyProject.uproject&quot; -run=pythonscript -script=&quot;c:\\\\my_script.py&quot; The ‚ÄúCommandlet‚Äù mode runs Unreal in headless mode without editor opened, this means no asset and level loading (but we have access to the unreal python module). This is great if we want to write to the project (for example, importing/creating assets), but it‚Äôs not going to work well for reading from the project. Full Editor 1UnrealEditor.exe &quot;C:\\projects\\MyProject.uproject&quot; -ExecutePythonScript=&quot;c:\\my_script.py&quot; Using ‚ÄúFull Editor‚Äù mode, we now have everything loaded in engine and are able to do almost all operations, the trade-off being there‚Äôs a longer loading time, and also the editor will be opened. Note that at this point, once the python script finishes executing, the editor and the command prompt window will close automatically. UI If we ever needs to create a simple UI that launches from the ‚ÄúFull Editor‚Äù mode, we could do something like this in the python script. 12345678910111213141516171819import sysimport unrealif __name__ == &quot;__main__&quot;: global app global window if not QtWidgets.QApplication.instance(): app = QtWidgets.QApplication(sys.argv) window = TestWindow() unreal.parent_external_window_to_slate( window.winId().__init__(), unreal.SlateParentWindowSearchMethod.ACTIVE_WINDOW ) window.show() sys.exit(app.exec_()) Note that we are using sys.exit(app.exec_()) to prevent the UI being immediately destroyed. This does mean the Qt event loop would take over the main thread which renders Unreal editor non-interactable until function calls hands over the process to Unreal. However, I do find in rare cases (for example: when launching Movie Render Queue through commandline), either the UI still hangs the editor with the operation, or (without the UI) the editor just exit immediately after the operation is being called. Either of this will not let the render to finish. This brings me to method number three that perfectly solves this issue. Init Cmd 1UnrealEditor.exe &quot;C:\\projects\\MyProject.uproject&quot; -ExecCmds=&quot;py c:/my_script.py&quot; This method, although not present on Unreal Engine‚Äôs wiki, it is mentioned in the FAQ by the official Epic Games account on Linear Content Creation. For Automation/Testing we can pass the following to keep the editor running. ‚ÄìExecCmds=‚Äúpy PathToPyFile‚Äù Once we are done, we can call: unreal.SystemLibrary.execute_console_command(None,‚ÄúQUIT_EDITOR‚Äù) This is almost like running a specified startup python script in Unreal, and the editor is fully interactable when the script is running. The editor exit automatically when calling ‚ÄúQUIT_EDITOR‚Äù, if running a script with UI, we can hook up to the closeEvent(). 123def closeEvent(self, event): QtWidgets.QMainWindow.closeEvent(event) unreal.SystemLibrary.execute_console_command(None, &quot;QUIT_EDITOR&quot;) to override closeEvent() in instance-level instead of class-level, see here Logging To generate output from the commandline we can add two arguments: -stdout and -FullStdOutLogOutput. 12345678910111213141516def call(python_script): command = [ UNREAL_EXE, UPROJECT, &quot;-ExecCmds=py &#123;&#125;&quot;.format(python_script), &quot;-stdout&quot;, &quot;-FullStdOutLogOutput&quot; ] proc = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, ) return proc.communicate() and we can filter out only the log generated from Python as such 1234output = call(&#x27;python_script.py&#x27;)for line in str(output).split(r&#x27;\\r\\n&#x27;): if &#x27;LogPython&#x27; in line: print(line) Environment Another thing to consider is that, running in batch mode can mess up our tools and start up scripts. due to it being a different environment. We might want to re-configure our environment which we can do like such: 12345678910111213import osimport subprocessenv = os.environ.copy()env[&#x27;FOO&#x27;] = &#x27;BAR&#x27;# more env ...proc = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env ) Reference Unreal Doc - Scripting the Unreal Editor Using Python Unreal Forum - Unreal Engine Technical Guide to Linear Content Creation FAQs Adamrehn Docs - UE4CLI","categories":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/categories/unreal/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"Unreal Engine Cinematic FBX Workflow Explained","slug":"ue-cinematic-fbx","date":"2022-08-12T16:00:00.000Z","updated":"2023-11-19T00:12:33.403Z","comments":true,"path":"post/ue-cinematic-fbx/","link":"","permalink":"https://www.xingyulei.com/post/ue-cinematic-fbx/","excerpt":"","text":"Introduction How do we transfer assets and animation to Unreal needed for cinematic? .fbx is the way to go (at least for now). For each component of a cinematic, we want to set it up nicely so the data can be correctly presented in Unreal. However, do note there are limitations in .fbx and differences between DCCs, certain things just can‚Äôt be transferred through .fbx and certain things can‚Äôt be represented in Unreal. Always test your workflow before going into full scale production. Please refer to Unreal‚Äôs FBX Content Pipeline General The important thing to keep in mind is that consistency is king, we want to have consistent world unit, identify coordinate system for each DCC, and maintain a hierarchy standard for assets across DCCs. Certain workflow involves animating or placing components within Unreal instead of importing outside the engine which is totally fine. Static Mesh Static Meshes represents anything that is not animated, like a background environment. There shouldn‚Äôt be any keys on any of the transforms or attribute. They are meant to be modeled outside Unreal, and imported as a static mesh asset, placed in the level as a static mesh actor. Export: In the outliner, select all the meshes and export as .fbx Import: Make sure ‚Äòcombine mesh‚Äô is checked, otherwise the asset will be imported as separate meshes (probably not what we want) We have three types of Unreal assets created: Static Mesh, Textures and Materials. Static Mesh Animation If a mesh is animated in any capacity, even if it‚Äôs just translating or rotating as a whole without any deformation, it needs to be skinned with joint(s). Consider this as a common standard. See the process of Skeletal Mesh in the immediate following. Note: the joint transform pivot needs to be align with the mesh transform pivot. Example: Take a look at our previous flag prop. If we want to animate the flag like moving it around in Unreal, it needs to have joint hierarchy where we can apply animation to, even if it‚Äôs simple as this. Applying animation directly to transform is not recommended. Also, no need to worry about the extra joint and weight data added, the file size increase is negligible (&lt;10%). Skeletal Mesh (SKM) Skeletal Mesh could be used to represent an animated foreground prop or environment, or something as complicated as a character/creature. Example: Export Rigging in Game vs Animation A complex animation rig can‚Äôt translate 1 to 1 to game engine, the rigging phase needs to be planned to accommodate the limitation of the engine. Once we have a suitable rig in Maya, we need to prepare it for the engine. We would clean the rig up to get a desired hierarchy which contains only joints and meshes. So remove components like controllers and constraints, also get rid of any redundant namespace. Import In addition to Textures and Materials, we have three major components imported: Skeleton, Skeletal Mesh and Physics Asset. Skeleton: refers the joint hierarchy, it uses the Skeletal Mesh as the preview mesh Skeletal Mesh: is the Skinned Mesh along with the Skeleton Physics Asset: defines physics and collision used by the Skeletal Mesh (sometimes even rendering), a rough physics collision body is defined during import. Note: Blendshape / Morph Target can be imported during the Skeletal Mesh import step by toggling on the checkbox, this is required if we want to import blendshape animation. Skeletal Mesh Animation The exported animation should maintain the exact same hierarchy structure of the exported rig Generally, the root of the rig/skeleton, whether it‚Äôs a transform group or a root joint, should not have animation/keyed data on it, as it is generally used to offset world transform (and keyed transform can‚Äôt do that) Export Since keyframes are usually on controllers, so we have to bake the keys on all joints. Select the joint hierarchy and Bake Simulation, after that we can get rid of the controllers and constraints just like what we did during the rig clean up. This time, we only need to export the joint hierarchy (no meshes). Import (as Animation Sequence) Now during import phase simply select the Skeleton Unreal asset that matches our animation, no need to create a new Skeletal Mesh. An Animation Sequence Unreal asset is now created, we can also see a preview mesh through the Editor window. It is now ready to be used in the Sequencer. Blend Shape / Morph Target Animation Unreal supports blend shape (or morph target in Unreal‚Äôs term) animation, there are two ways it can be done: https://docs.unrealengine.com/4.27/en-US/WorkingWithContent/Importing/FBX/MorphTargets/ (Preferred) Custom Attribute on Joint https://docs.unrealengine.com/5.1/en-US/animation-curves-in-unreal-engine/ This feature is new in Unreal 5.0 add custom attribute(s) on any joint in the skeleton hierarchy (match all the blend shape attribute names 1 to 1) export only the joint chains (no need to include any meshes, no need to check ‚Äòblend shape‚Äô during export) import in Unreal with ‚ÄòImport Custom Attribute‚Äô checked This will ensure the keys on custom attributes which are on the joint chain to propagate through and drive the morph targets. Ideally, all the custom attributes can be set on the skeleton root. This method is preferred as it makes the export process easier by only needing to export the skeleton / joint chain, which is faster and light weight. Blend Shape Node find all meshes with blend shape node attached traverse in the node editor and locate the blend shape node bake simulation on the blend shape node include these meshes (ones with blend shape) during the export process, also make sure the ‚Äòblend shape‚Äô is checked in the fbx export option import in Unreal (can leave ‚ÄòImport Custom Attribute‚Äô unchecked) Although this process doesn‚Äôt need setting up custom attributes on joint(s), it exports out redundant mesh data which is why it‚Äôs not a preferable way. Camera Animation Maya Camera cannot be imported as an Unreal asset. Unreal has its own native Camera object, which is not 1-to-1 match to Maya‚Äôs Camera. What we can do is export Maya camera‚Äôs animation and attribute and import on an Unreal Cinematic Camera Actor. See video guide here Export The camera node has to be on the scene root, with no transform node on top. Otherwise, the animation won‚Äôt be imported correctly as Unreal is searching for the top node. Import (as Keyframes) Cameras are linked to the game viewport, therefore animation import needs to be plotted on the Sequencer as individual keyframes instead of being an Unreal asset. Create a camera track and bind it to a newly created Unreal CineCameraActor and hit ‚ÄòImport‚Äô. Maya FBX Export Option Reference FBX Export options: Full Help Embed Media: Could be checked during Static Mesh/Skeletal Mesh export based on needs, the Unreal import can pick up the texture and materials embedded. Smoothing Group: Usually needs to be checked so Unreal can use the smoothing group exported from Maya as opposed to perform smoothing calculation on Unreal side. Include Children: Almost always keep unchecked, and explicitly select nodes to export. Input Connections: Keep unchecked is usually a good idea to avoid exporting extra data, but also depends on different circumstances Deformed Models: For Skeletal Mesh export which is commonly a rig, check ‚ÄúSkins‚Äù to export skin deformation like skin clusters, check ‚ÄúBlend Shapes‚Äù to export all blend shape targets. For Skeletal Mesh Animation export, uncheck ‚ÄúSkins‚Äù and ‚ÄúBlend Shapes‚Äù. Skinning data is embedded within the Skeletal Mesh Asset in Unreal, and for blend shapes, as long as we are following this step, the imported .fbx would also carry over blend shape animation. Bake Animation: Leave this unchecked and use Maya‚Äôs Edit | Keys | Bake Simulation, as it offers more flexible solutions and is also generally much faster. Unreal FBX Import Option Reference FBX Import Options Reference: Full Help Static Mesh: ‚ÄúImport Mesh‚Äù checked ‚ÄúCreate New Materials‚Äù and ‚ÄúImport Textures‚Äù as needed Skeletal Mesh: Leave ‚ÄúSkeleton‚Äù blank, if you need to create a new skeleton asset ‚ÄúCreate Physics Asset‚Äù, if you need to create a new PA ‚ÄúSkeletal Mesh‚Äù and ‚ÄúImport Mesh‚Äù checked to import skinned meshes ‚ÄúCreate New Materials‚Äù and ‚ÄúImport Textures‚Äù as needed ‚ÄúImport Morph Targets‚Äù if blend shape animation will be needed Skeletal Animation: (Import as Animation Sequence) Choose existing skeleton for ‚ÄúSkeleton‚Äù ‚ÄúImport Mesh‚Äù unchecked to avoid importing blend shape source mesh if blend shape was exported during Maya export ‚ÄúImport Animations‚Äù checked ‚ÄúImport Custom Attribute‚Äù checked if using custom attribute on joint for blend shape animation Camera Animation: (Import as keyframes in Sequencer) ‚ÄúMatches by Name Only‚Äù unchecked ‚ÄúCreate Cameras‚Äù unchecked ‚ÄúReplace Transform Track‚Äù checked ‚ÄúReduce Keys‚Äù unchecked","categories":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/categories/unreal/"}],"tags":[{"name":"animation","slug":"animation","permalink":"https://www.xingyulei.com/tags/animation/"},{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"sequencer","slug":"sequencer","permalink":"https://www.xingyulei.com/tags/sequencer/"}]},{"title":"Professional-Quality Cinematic with Unreal Engine Sequencer","slug":"ue-cinematic-sequencer","date":"2022-07-15T16:00:00.000Z","updated":"2023-11-17T19:25:37.159Z","comments":true,"path":"post/ue-cinematic-sequencer/","link":"","permalink":"https://www.xingyulei.com/post/ue-cinematic-sequencer/","excerpt":"","text":"Introduction In this blog, I‚Äôm going to introduce the different components of a cinematic, how they are represented. This hopefully will give you an overview of how cinematic works in Unreal. Glossary Skeleton: a hierarchy that is used to define Bones (sometimes called joints), In Unreal, skeletons are used to store/driven by associated animation data. Static Mesh: a piece of geometry that consists of a set of polygons that can be cached in video memory and rendered out. Skeletal Mesh: in short is a collection of a skeleton hierarchy, and mesh(es) skinned to that skeleton. A set of polygons composed to make up the surface of the Skeletal Mesh, and a hierarchical set of interconnected bones which can be used to animate the vertices of the polygons Level: is all or part of our game‚Äôs ‚Äúworld‚Äù. Levels contain everything a player can see and interact with, like environments, usable objects, other characters, and so on. Actor: an Actor is any object that can be placed into a Level, such as a camera, Static Mesh, or player start location. Actors support 3D transformations such as translation, rotation, and scaling. They can be created and destroyed. Binding: a track in sequencer that binds a specific actor in the level, enables the level sequence to modify or animate its property when the level sequence is active. What makes a Sequencer Similar to other film and animation editing software, Sequencer requires us to add tracks in order to reference elements in our sequence. Any character, prop, camera, effect, or other viewport element can be referenced and manipulated in Sequencer Level Sequence A Level Sequence asset is a container for cinematic data, which includes tracks, animation and binding. Level Sequence Track If you used any video editing software, then tracks shouldn‚Äôt be new to you. Tracks are like layers, and the Level Sequence is the whole canvas; Tracks usually are used to reference different actors in the level, and then animated its properties. So in most time, tracks don‚Äôt overlay each other like layers in Photoshop do, they‚Äôre more like controlling different color channels that compose the final image. Level Sequence Section Asset Sections are the components that laid out in a Track, sections can be treated as individual animation clips of which make up the whole track. Some common section are Camera Cuts section, Shots section and Animation section. Basic Cinematic Component We‚Äôll break down a cinematic as the following components and tackle them one by one. Camera (Camera Actor) Background (Static Mesh Actor) Foreground &amp; Character (Skeletal Mesh Actor) Lighting (Light Actor) FX (Visual Effects Actor) Audio (Sound Wave Asset) Other Actor to Sequence (Object Binding) The level sequence operates within levels and operates on actors in the level. It can bind to an existing actor and animates its properties. It can also spawn an actor as needed. Spawnables vs. Possessables Static Mesh This is the simplest scenario, a static mesh actor is bound to the level sequence and the transform are keyed. Skeletal Mesh When it comes to skeletal mesh, another component is exposed: Animation. This sub-track takes Unreal Animation Sequence assets, which consists the skeleton animation, this effectively drives the skeleton within the skeletal mesh actor. Camera Binding and Camera Cut In order to set up camera view properly, in-addition to the camera binding, we also need a Camera Cuts Track. Whatever is on this track is what the viewport is capturing, it allows us to switch and blend between different cameras. (In short, the Camera Binding tracks drives the Camera Actor, the Camera Cut track decides what takes over the viewport) Audio Audio can be created using by possessing an audio/sound actor, or alternatively it can be created by adding Unreal Sound Wave asset. I would recommend the latter as it allows us to scrub in the timeline and still have the correct audio playback. Note: Set Sound Wave Asset‚Äôs ‚ÄòSound Asset Compression Type‚Äô to ‚ÄòPCM‚Äô so it plays correctly when scrubbing in timeline. More There are of course different actor types in the level that the level sequence can possess/bind to. Such as Light Actors, Gameplay Actors, Visual Effects Actors and more. Sub-sequence and Shot There are other two types of concept I‚Äôd like to touch upon: Subsequences and Shots. They are usually not directly bound to an actor, but they are containers for a level sequence that does. They can be very useful to organize and composite the cinematic level sequence structure. Subsequences represent an entire Level Sequence. Having subsequences allows multiple level sequence to be added into a ‚Äúparent‚Äù level sequence, These subsequences can be considered as the partition of the ‚Äúparent‚Äù and can be worked on as different sub-scenes by different artists. (Image from Unreal) Similar to Subsequence, each Shot Section represents a Level Sequence, it allows multiple level sequences be assembled and re-arranged freely on the Shots Track as Shot Section to form the full sequence/cinematic. This is to get rendering in Unreal to work correctly, and able to set per-shot preset in Movie Render Queue. Note: avoid using the ‚Äúlock‚Äù property in any of the clip as it sometimes causes un-wanted behaviours. High Quality Render with Motion Blur When implementing a setup with a full sequence length animation clip (skeletal mesh .fbx not being broken down into shots). It is important to follow the following to ensure there‚Äôs no Motion Blur produce during camera cuts. Camera: separate camera actor for each shot. Animation: leave the animation clip as ‚ÄòKeep State‚Äô when finished if possible. Subsequence: a good practice is to not extend sub-sequence range over the shot active range; Unreal still calculates motion in sub-sequence extending beyond the range of the shot active range such as Motion Blur, which can produce unwanted result during cuts between shots. Render Preset Camera Setting has to be set to ‚ÄòFrame Close‚Äô Anti-aliasing Setting can be toggled on for better quality For more information on setting up a sequencer with correct first frame, see Epic‚Äôs post on render warm-ups References Unreal Engine Documentation - Cinematics and Sequencer","categories":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/categories/unreal/"}],"tags":[{"name":"animation","slug":"animation","permalink":"https://www.xingyulei.com/tags/animation/"},{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"sequencer","slug":"sequencer","permalink":"https://www.xingyulei.com/tags/sequencer/"}]},{"title":"No More Freezing using Qt Multithreading: Learn with Examples","slug":"qt-threading","date":"2022-05-14T16:00:00.000Z","updated":"2023-11-19T00:16:00.438Z","comments":true,"path":"post/qt-threading/","link":"","permalink":"https://www.xingyulei.com/post/qt-threading/","excerpt":"","text":"Introduction It is inevitable that some of our tasks in the program will take long time to run, leaving the user staring at a frozen screen, whether it is reading/writing a large file, searching database or syncing assets. In a production environment, these seconds can really add up for the entire team; can you imagine how many working hours are wasted when every user need to wait for, let‚Äôs say, a library tool to query the entire asset database and finally displaying them every single time. We can surely improve the query, but that‚Äôs usually not where the bottleneck is. The speed of querying is usually sufficient for human brain to process. What we want is not to be slow down by un-interactive GUI. So, why not have assets to fill little by little in a continuous stream, or just query their name first, and use a separate thread to load in rest of the information like date created, author and thumbnail. Now, let‚Äôs get straight to the point. I‚Äôm going to show three basic examples of different methods to deal with frozen GUI, each has its own use cases. Example Issue 1234567891011121314151617181920212223242526272829import timeclass Window(QtWidgets.QMainWindow): def __init__(self, parent=None): QtWidgets.QMainWindow.__init__(self, parent) # ui setup: please ignore widget = QtWidgets.QWidget() layout = QtWidgets.QGridLayout() button = QtWidgets.QPushButton(&#x27;run task!&#x27;) button.clicked.connect(self.run_long_task) edit = QtWidgets.QLineEdit() layout.addWidget(edit, 0, 0) layout.addWidget(button, 1, 0) widget.setLayout(layout) self.setCentralWidget(widget) def run_long_task(self): time.sleep(2)if __name__ == &#x27;__main__&#x27;: app = QtWidgets.QApplication(sys.argv) win = Window() win.show() sys.exit(app.exec_()) Here I created a simple example to show how a long-running task can block controls in our Qt Gui. The run_long_task() is simply a time.sleep() that will halt for 2 seconds util returning control back to the main event loop. After evoking the run_long_task() method, we can no longer interact with the line edit from our UI, until the task has finished. (Clicking and typing has no effect while task is running) processEvent() Using QApplication.processEvent() can achieve a semi-interactive GUI during a long-running task. Here‚Äôs to show what I meant. Let‚Äôs add a progress bar to track our task status. 123456789101112131415161718192021class Window(QtWidgets.QMainWindow): def __init__(self, parent=None): QtWidgets.QMainWindow.__init__(self, parent) # ui setup: add progress bar self.ui_progress = QtWidgets.QProgressBar() self.statusBar().addPermanentWidget(self.ui_progress) ... def update_status(status_bar, msg): status_bar.showMessage(msg, 2000)def update_progress(progress_bar, value): progress_bar.setValue(value) if value &gt;= 100: progress_bar.setVisible(False) elif progress_bar.isHidden(): progress_bar.setVisible(True) And now, by evoking the static method processEvent() during the long-running task, we enforce Qt to handle normal events like updating GUI, and respond to our user input, before handing the control back to the task. 1234567def run_long_task(self): for i in range(1, 11): sleep(0.5) update_status(self.statusBar(), str(i)) update_progress(self.ui_progress, i*10) QtCore.QCoreApplication.processEvents() Now, as we can see, our main GUI can update the progress bar and messages, and even allow us to sort of interact with the line edit, but the interaction is by no means smooth. (Somewhat interactive, yet choppy) Before we create a real multi-threading solution, first, let‚Äôs establish a signal slot workflow that Qt provides: instead of updating the progress bar and status bar by calling its method directly, we emit a signal to handle that. 12345678910def __init__(self): ... self.progressed.connect(lambda value: update_progress(self.ui_progress, value)) self.messaged.connect(lambda msg: update_status(self.statusBar(), msg))def run_long_task(self): for i in range(1, 11): sleep(0.5) self.progressed.emit(int(i*10)) self.messaged.emit(str(i)) QThread Instead of directly subclassing QThread(), it is recommended by many to create a QObject() and attach it to a QThread(). The QObject() we created, known as the worker, will be running our long-running task, and emits the update signals. It is important to keep a note that, the QThread() that houses our worker needs to live in the main event loop (i.e. kept in the main application as self.__thread). If not, it will be collected by gc and the thread will exit pre-maturely. thread.worker = worker is also essential if the worker doesn‚Äôt live in the main event loop (i.e. self.__worker). Now as we can see, we can freely interact with the line edit while the long-running task is handled in the background. (Very smooth typing) QThreadPool and QRunnable A natural progression would be handling multiple long-running tasks, luckily, we have QThreadPool for that. In the following example, we have three long-running task in the background, while we still have free control of the main GUI. (Multiple threads and smooth typing) QThreadPool manages QRunnable, which doesn‚Äôt have built-in signals, thus we need to attach signals externally by creating a QObject to store them. QThreadPool also deletes the QRunnable instances automatically when it finishes by default. if max thread is exceeded, the process is queued until a thread is available. Reference PythonGUIs - Multithreading PyQt5 applications with QThreadPool Maya‚Äôs Programming &amp; Electronics Blog - How To Really, Truly Use QThreads; The Full Explanation Stack Overflow - Background thread with QThread in PyQt Qt doc - Process Events","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"threading","slug":"threading","permalink":"https://www.xingyulei.com/tags/threading/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Create Stunning Pie Charts in Qt : A Step-by-Step Tutorial","slug":"qt-pie-chart","date":"2022-04-26T16:00:00.000Z","updated":"2023-11-19T00:16:14.854Z","comments":true,"path":"post/qt-pie-chart/","link":"","permalink":"https://www.xingyulei.com/post/qt-pie-chart/","excerpt":"","text":"Introduction It‚Äôs time to learn new stuff again. This time, I want to implement a data visualization component in my tool: pie charts. I had some experience with matplotlib before, but I‚Äôm excited to find out that Qt has an add-on module QtCharts that can integrate with Qt application. Here are my learning results: on the left side, I created a static and simplistic design and on the right side, a slightly more flashy, animated design. In this blog, I will break down how they are created. They are also available in my guiUtil with full code. Example #1 Example #2 Installing QtCharts QtCharts was first introduced as an add-on module in Qt in version 5.7, so the Qt.py for Python Qt binding doesn‚Äôt support QtCharts as it isn‚Äôt available in PyQt and PySide. check your PySide2 or PyQt5 version:QtCore.qVersion(). (I‚Äôm using PyQt5 version 5.15.2) install the corresponding version of PyQtChart using 1pip install PyQtChart finally, test import from PyQt5 import QtCharts The Basics Classes QChart: QChart refers to the main diagram, in our case the pie chart is a QChart object. QPieSeries: To draw a pie chart, we‚Äôll need one or more QPieSeries added to our QChart object, to form the circular shape. To build other types of chart, we‚Äôll want to use Series such as QBoxPlotSeries, QCandlestickSeries, QXYSeries, QAreaSeries or QAbstractBarSeries. QPieSlice: a QPieSlice object represents a slice inside a QPieSeries object. Components There are other components that the examples will cover. Value reflects the size/span of each slice, and is added one by one in run-time to the QPieSeries. We‚Äôre able to retrieve useful information such as percentage and span angle once all the data is added. Label is a crucial component within the scope of the QPieSlice. Label can be displayed in different ways (Inside the slice: LabelInsideHorizontal, LabelInsideTangential, LabelInsideNormal or outside the slice: LabelOutside with labelArm). Legend in default, is attached to QChart, connecting with the labels of all the QPieSlice. We can separate it by detaching it or setting each individual markers (items) of the legend. We also defined an immutable data structure to represent the data fed into the QChart, which we‚Äôll take a look shortly. Example 1 1234567891011121314151617181920212223242526class MySimpleChart(QtChart.QChart): def __init__(self, datas, parent=None): super(MySimpleChart, self).__init__(parent) self._datas = datas self.outer = QtChart.QPieSeries() self.set_outer_series() self.addSeries(self.outer) def set_outer_series(self): slices = list() for data in self._datas: slice_ = QtChart.QPieSlice(data.name, data.value) slice_.setLabelVisible() slice_.setColor(data.primary_color) slice_.setLabelBrush(data.primary_color) slices.append(slice_) self.outer.append(slice_) # label styling for slice_ in slices: label = &quot;&lt;p align=&#x27;center&#x27; style=&#x27;color:&#123;&#125;&#x27;&gt;&#123;&#125;%&lt;/p&gt;&quot;.format(round(slice_.percentage()*100, 2)) slice_.setLabel(label) We start off by subclassing QChart, we then would want to add a QPieSeries as a container for inserting our slices (generated from our data). A simplified process: 123456pie_chart = QChart()series = QPieSeries()slice_ = QPieSlice(label, value)series.append(slice_)pie_chart.addSeries(series) note: slice is a Python built-in name so I‚Äôm against using it as variable name Labels and Legend As we can see from the example above, we have some flexibility with label formatting (QLabel methods and HTML formatting), we can also do legend formatting to some extent. Such as alignment and marker shapes. 12self.legend().setAlignment(QtCore.Qt.AlignRight)self.legend().setMarkerShape(QtChart.QLegend.MarkerShapeCircle) we can even separate legend vs. slice label, so they could display different content (but it may be bad being practice to unlink the two) 12for index, marker in enumerate(self.legend().markers()): marker.setLabel(self._datas[index].name) Other Adding variation can be easily done by shifting angles of all the slices. 123offset = 40self.outer.setPieStartAngle(offset)self.outer.setPieEndAngle(offset+360) If the outside labels are cramped together, we can create additional spacing by extending the label arm: 1slice_.setLabelArmLengthFactor(0.4) Example 2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class MyChart(QtChart.QChart): def __init__(self, datas, parent=None): super(MyChart, self).__init__(parent) self._datas = datas self.legend().hide() self.setAnimationOptions(QtChart.QChart.SeriesAnimations) self.outer = QtChart.QPieSeries() self.inner = QtChart.QPieSeries() self.outer.setHoleSize(0.35) self.inner.setPieSize(0.35) self.inner.setHoleSize(0.3) self.set_outer_series() self.set_inner_series() self.addSeries(self.outer) self.addSeries(self.inner) def set_outer_series(self): slices = list() for data in self._datas: slice_ = QtChart.QPieSlice(data.name, data.value) slice_.setLabelVisible() slice_.setColor(data.primary_color) slice_.setLabelBrush(data.primary_color) slices.append(slice_) self.outer.append(slice_) # label styling for slice_ in slices: color = &#x27;black&#x27; if slice_.percentage() &gt; 0.1: slice_.setLabelPosition(QtChart.QPieSlice.LabelInsideHorizontal) color = &#x27;white&#x27; label = &quot;&lt;p align=&#x27;center&#x27; style=&#x27;color:&#123;&#125;&#x27;&gt;&#123;&#125;&lt;br&gt;&#123;&#125;%&lt;/p&gt;&quot;.format( color, slice_.label(), round(slice_.percentage()*100, 2) ) slice_.setLabel(label) def set_inner_series(self): for data in self._datas: slice_ = self.inner.append(data.name, data.value) slice_.setColor(data.secondary_color) slice_.setBorderColor(data.secondary_color) Inner and Outer Series To create a circular/loop shape pie chart, we need to create a hole with setHoleSize(). And the inner loop and outer loop are two separate series adjacent to each other. In the example, I used a light color for inner loop (50% blend with white) and used solely the outer loop to display labels and values. Also, in order for labels to be displayed properly, I added a condition so that label will be displayed outside when the angle span is less than a threshold. Exploding Animation QPieSlice has a built-in hovered signal for us to achieve the exploding effect when mouse hovering over. 12345678910111213141516def set_outer_series(self): ... slice_.hovered.connect(partial(self.explode, slice_))def explode(self, slice_, is_hovered): if is_hovered: start = slice_.startAngle() end = slice_.startAngle()+slice_.angleSpan() self.inner.setPieStartAngle(end) self.inner.setPieEndAngle(start+360) else: self.inner.setPieStartAngle(0) self.inner.setPieEndAngle(360) slice_.setExplodeDistanceFactor(0.1) slice_.setExploded(is_hovered) The outer loop explosion can be set using slice_.setExploded(); The inner loop shifting is done by offsetting the pie start and end angle. Also, make sure we have set QChart.SeriesAnimations on the QChart object. Bonus Custom Data Class 1234567from collections import namedtupleData = namedtuple(&#x27;Data&#x27;, [&#x27;name&#x27;, &#x27;value&#x27;, &#x27;primary_color&#x27;, &#x27;secondary_color&#x27;])node = Data(&#x27;Node&#x27;, 333, QtGui.QColor(&quot;#82d3e5&quot;), QtGui.QColor(&quot;#cfeef5&quot;))connection = Data(&#x27;Connection&#x27;, 105, QtGui.QColor(&quot;#fd635c&quot;), QtGui.QColor(&quot;#fdc4c1&quot;))other = Data(&#x27;Other&#x27;, 20, QtGui.QColor(&quot;#feb543&quot;), QtGui.QColor(&quot;#ffe3b8&quot;)) A helper data structure for adding items to our pie chart. Generally, only the label/name and the value are required. I also assigned specific color values to achieve certain palette, but they can be randomly generated in the QChart class as well. Putting it Together The last thing we need to do is add a main body and instantiate a pie chart with some random data. We do this using a QChartView container. All the code is available at guiUtil. 12345678910111213141516171819202122import sysclass ChartView(QtWidgets.QMainWindow): def __init__(self, parent=None): super(ChartView, self).__init__(parent) self.setFixedSize(QtCore.QSize(700, 400)) datas = [node, connection, other] chart = MySimpleChart(datas) chart_view = QtChart.QChartView(chart) chart_view.setRenderHint(QtGui.QPainter.Antialiasing) self.setCentralWidget(chart_view)if __name__ == &#x27;__main__&#x27;: global win app = QtWidgets.QApplication(sys.argv) win = ChartView() win.show() sys.exit(app.exec_()) Reference Qt Doc - Nested Donut Example Qt Doc - QLegend Qt Doc - QChart Qt Doc - QPieSeries Qt Doc - QPieSlice Stack Overflow - Attach colors of my choosing to each slice of QPieSeries","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Run Python Commands as Admin (with Examples)","slug":"py-admin","date":"2022-03-18T16:00:00.000Z","updated":"2024-01-14T17:21:34.737Z","comments":true,"path":"post/py-admin/","link":"","permalink":"https://www.xingyulei.com/post/py-admin/","excerpt":"","text":"Introduction We often find ourselves needing to automate tasks on Windows machine, Although there are many Python libraries out there that supports some common Windows operations and even cross-platforms. It is really hard to substitute Window‚Äôs Command Prompt and PowerShell, as they are extremely useful in cases where we need to access different Windows components, configure settings and troubleshooting. User Account Control (UAC) Standard user accounts are for day-to-day activities with less permission, while the administrator account has elevated access for all features. For my personal machine, I‚Äôm operating on admin account all time (as the sole user). But Windows, for security reasons, still treats most of my actions as standard account. It only elevates to admin privilege when my operations want to make internal changes to Windows settings and my machine. The UAC feature when enabled, prompts the user when such action occurred and request for admin access. Additionally, for standard user, it means they need to ask for administrator account login. When the sign in is an administrator type account When the sign in is a standard type account Now, in terms of task automation in Python, we‚Äôll also want to figure out how to run certain operations with Admin privilege. Using subprocess Like most of us, I have been using subprocess to evoke cmd.exe or powershell.exe as desired by passing arguments as list into the function. Command Prompt: command = ['cmd.exe', '/c', &lt;argument&gt;] PowerShell: command = ['powershell.exe', '-command', &lt;argument&gt;] 12345678910import subprocessdef runCmd(*args): p = subprocess.Popen( *args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT ) out, error = p.communicate() return out, error But this doesn‚Äôt grant the process with admin privilege, and won‚Äôt notify us with UAC. How to achieve this? here are some ways to do it. Using ShellExecute runas 12345678910import ctypescommands = u&#x27;/k echo hi&#x27;ctypes.windll.shell32.ShellExecuteW( None, u&quot;runas&quot;, u&quot;cmd.exe&quot;, commands, None, 1 ) runas from the Windows API launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application. What about a more pythonic approach? Using runas in Command Prompt runas application runs command as a different user; it is most commonly used but not limited to perform operation with administrator account for granting admin access. Note: the password is handled outside UAC, which may not be the desired behavior 1234command = [&#x27;cmd.exe&#x27;, &#x27;/c&#x27;, &#x27;runas&#x27;, &#x27;/user:administrator&#x27;, &#x27;regedit&#x27;]p = subprocess.Popen(command, stdin=subprocess.PIPE)p.stdin.write(&#x27;password&#x27;)p.communicate() Using PowerShell -Verb Runas This is my preferred method, since it is most flexible and also evokes UAC for admin access. Start-Process 1Start-Process &lt;executable&gt; -argumentlist &lt;arugments&gt; -Verb Runas Call operator (&amp;) by adding call operator, we are able to run commands not limited in the environment path, also not need to worry about spaces in our path. 1&amp; &#123;Start-Process &lt;executable&gt; -argumentlist &lt;arugments&gt; -Verb Runas&#125; -ExecutionPolicy Bypass Sometimes, a security setting will prevent PowerShell running a .ps1 file, and we‚Äôll need to bypass execution policy: 1Start-Process &lt;executable&gt; -ExecutionPolicy Bypass -File &lt;file&gt; It is very obvious from the above example, we can basically use PowerShell to wrap around anything, including Command Prompt. 1Start-Process cmd.exe -argumentlist &#x27;/k &quot;dir&quot;&#x27; -Verb Runas To bundle everything together, a working example would look like this in Python: 123ps_command = &quot;&amp; &#123;&#123;Start-Process cmd.exe -argumentlist &#x27;/k \\&quot;dir\\&quot;&#x27; -Verb Runas&#125;&#125;&quot;command = [&#x27;powershell.exe&#x27;, &#x27;-command&#x27;, ps_command]runCmd(command) essentially using subprocess to run PowerShell in admin using -Verb Runas to execute command /k dir in Command Prompt (which also has elevated access). Redirect Output By doing the above, we are running an executable within a process. the sacrifice is that it is difficult to pass the output, but here‚Äôs a few workarounds: Output results to a file 1Start-Process cmd.exe -argumentlist &#x27;/c &quot;dir&quot;&#x27; -redirectStandardOutput &quot;C:\\Users\\xlei\\Desktop\\temp.txt&quot; Output result to the console Just the exit code: 12$output = Start-Process cmd.exe -argumentlist &#x27;/c &quot;dir&quot;&#x27; -PassThru -Wait$output.ExitCode A neat function I found here 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051function Start-ProcessWithOutput&#123; param ([string]$Path,[string[]]$ArgumentList) $Output = New-Object -TypeName System.Text.StringBuilder $Error = New-Object -TypeName System.Text.StringBuilder $psi = New-object System.Diagnostics.ProcessStartInfo $psi.CreateNoWindow = $true $psi.UseShellExecute = $false $psi.RedirectStandardOutput = $true $psi.RedirectStandardError = $true $psi.FileName = $Path if ($ArgumentList.Count -gt 0) &#123; $psi.Arguments = $ArgumentList &#125; $process = New-Object System.Diagnostics.Process $process.StartInfo = $psi [void]$process.Start() do &#123; if (!$process.StandardOutput.EndOfStream) &#123; [void]$Output.AppendLine($process.StandardOutput.ReadLine()) &#125; if (!$process.StandardError.EndOfStream) &#123; [void]$Error.AppendLine($process.StandardError.ReadLine()) &#125; Start-Sleep -Milliseconds 10 &#125; while (!$process.HasExited) #read remainder while (!$process.StandardOutput.EndOfStream) &#123; #write-verbose &#x27;read remaining output&#x27; [void]$Output.AppendLine($process.StandardOutput.ReadLine()) &#125; while (!$process.StandardError.EndOfStream) &#123; #write-verbose &#x27;read remaining error&#x27; [void]$Error.AppendLine($process.StandardError.ReadLine()) &#125; return @&#123;ExitCode = $process.ExitCode; Output = $Output.ToString(); Error = $Error.ToString(); ExitTime=$process.ExitTime&#125;&#125;$p = Start-ProcessWithOutput cmd.exe -argumentlist &#x27;/c &quot;dir&quot;&#x27;$p.ExitCode$p.Output$p.Error Run Python as Admin Running the whole python script in Admin, meaning that the subsequent processes will have admin access, if this is the behaviour you prefer. References Stack Exchange - Run .exe file via Python as Administrator Stack Overflow - How do I capture the output into a variable from an external process in PowerShell? Stack Overflow - Redirection of standard and error output appending to the same log file Stack Overflow - Powershell: Capturing standard out and error with Process object Windows Commandline - Windows runas command syntax and examples","categories":[{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/categories/windows/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"Using namedtuple in Python for Beginners","slug":"py-named-tuple","date":"2022-01-22T16:00:00.000Z","updated":"2023-11-17T19:10:38.678Z","comments":true,"path":"post/py-named-tuple/","link":"","permalink":"https://www.xingyulei.com/post/py-named-tuple/","excerpt":"","text":"I recently got side-tracked into exploring the basics of namedtuple() as I got a glimpse of its usage in our engineering codebase. Here‚Äôs my summary: Mutable and Hashable To understand the behavior of namedtuple(), it is best to also visit the concept of Python object‚Äôs mutability and hashability. These two concepts are closely linked. Hashability: an object‚Äôs is hashable when its hash value never changed during its lifetime Most of Python‚Äôs immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not; immutable containers (such as tuples and frozensets) are only hashable if their elements are hashable. Objects which are instances of user-defined classes are hashable by default Mutability: an object with a fixed value and cannot be altered is immutable (For example: int, float, string, tuple). in contrast, an object can keep its value while keeping its id() is mutable. (For example: list, dict) hash() and id() identity: id(), the identity of the two same value variables are the same If two objects (that exist at the same time) have the same identity, they‚Äôre actually two references to the same object. The is operator compares items by identity, a is b is equivalent to id(a) == id(b). hash value: hash(), hash value is based off an object‚Äôs value, and hash value must remain the same for the lifetime of the object. If an object is mutable, then it doesn‚Äôt make sense for it to have hash. The hash value is an integer which is used to quickly compare dictionary keys or sets. Why Hash? Hash values are very useful, as they enable quick look-up of values in a large collection of values, it‚Äôs commonly used in set and dict. with if x in elements:: In a list, Python needs to go through the whole list and compare x's value with each value in the list elements. In a set, Python keeps track of each element‚Äôs hash, Python will get the hash-value for x, look that up in an internal structure and find elements that have the same hash as x. It also means we can have non-hashable objects in a list, but not in a set or as keys in a dict. Example: There is no way to change an int object‚Äôs value without re-assigning (copy) it to a different object. 1234x = 5# id(x) is equal to 3054677212104x = 6# id(x) is equal to 3054677212080 But for list, we can edit its value after assignment while keeping its id() the same. (note: use list built-in function rather than re-assignment, this is the same for x.sort vs. x=sorted(x)) 123456x = [5]# ORIGINAL: id(x) is equal to 3054706521672x.append(6)# CORRECT: id(x) is equal to 3054706521672x = [5, 6]# WRONG: id(x) is equal to 3054713375816 NamedTuple A data class are just regular classes that are geared towards storing state, rather than containing a lot of logic, namedtuple() is one kind of data classes. Every time we create a class that mostly consists of attributes, we make a data class. With namedtuple(), we can create immutable sequence types that allow us to access their values using descriptive field names and the dot notation instead of unclear integer indices. Initialization typename: str, class name of the namedtuple field names: names that are used to access values in the namedtuple, it can be declared using any of the following: iterable of strings: [‚Äúa‚Äù, ‚Äúb‚Äù, ‚Äúc‚Äù] a string with name seperated by white spaces: ‚Äúa b c‚Äù a string with name separated by commas: ‚Äúa, b, c‚Äù Example: 12345678from collections import namedtuplePoint = namedtuple(&quot;Point&quot;, [&quot;x&quot;, &quot;y&quot;])&gt;&gt; Point# &lt;class &#x27;__main__.Point&#x27;&gt;&gt;&gt; Point(2, 4)# Point(x=2, y=4) Access and Edit Value It is very straight-forward to access a tuple‚Äôs attribute value using dot notation this gives namedtuple a great edge against dict or tuple. 12345Person = namedtuple(&#x27;Person&#x27;, &#x27;name children&#x27;)jj = Person(&#x27;Johnny J&#x27;, [&#x27;Tobby&#x27;])&gt;&gt; jj.children# [&#x27;Tobby&#x27;] Since namedtuple is immutable, we can‚Äôt assign value to its attribute; what we can do is to use ._replace(); and also, its value can be mutable, like a list. 12345678&gt;&gt; jj.children = [&#x27;Tobby&#x27;, &#x27;Wang&#x27;]# AttributeError: can&#x27;t set attribute&gt;&gt; jj.children.append(&#x27;Wang&#x27;)# Correct&gt;&gt; jj = jj._replace(name=&#x27;John J&#x27;)# Correct Using ._asdict() The built-in function ._asdict() converts namedtuple into a dictionary. 12345Person = namedtuple(&quot;Person&quot;, &quot;name age height&quot;)jane = Person(&quot;Jane&quot;, 25, 1.75)&gt;&gt; jane._asdict()# &#123;&#x27;name&#x27;: &#x27;Jane&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 1.75&#125; and to generate a namedtuple object from dictionary 1234567d = &#123; &#x27;name&#x27;: &#x27;Jane&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 1.75&#125;jane = Person(**d) @dataclass @dataclass came out after Python 3.7, which is similar to namedtuple, but they are mutable. thus, we can set value to a @dataclass attribute. 12345678910111213from dataclasses import dataclass@dataclassclass Person: name: str age: int country: str = &quot;Canada&quot;jane = Person(&quot;Jane&quot;, 25)&gt;&gt; jane.name = &quot;Jane Doe&quot;&gt;&gt; jane.name&#x27;Jane Doe&#x27; frozen attribute if we want @dataclass to behave like namedtuple with an un-editable ‚Äúprotected‚Äù attribute, just use @dataclass(frozen=True). override __iter__() @dataclass are also not iterable by default, unlike namedtuple. We can achieve that by implementing the special method .__iter__(): 1234567from dataclasses import astuple, dataclass@dataclassclass Person: ... def __iter__(self): return iter(astuple(self)) Subclassing namedtuple Subclassing namedtuple gives us additional functionality. 123456789101112BasePerson = namedtuple(&quot;BasePerson&quot;, &quot;name birthdate country&quot;)class Person(BasePerson): &quot;&quot;&quot;A namedtuple subclass to hold a person&#x27;s data.&quot;&quot;&quot; __slots__ = () def __repr__(self): return &quot;Name: &#123;&#125;, age: &#123;&#125; years old&quot;.format(self.name, self.age) @property def age(self): return (date.today() - self.birthdate).days // 365 In the above example, subclassing from namedtuple provides us better documentation (i.e. Person.__doc__), better string representation (i.e. print jane) and an extra property to access based off a Person‚Äôs instance attribute value. __new__() constructor Zechong Hu‚Äôs Blog - Inheritance for Python Namedtuples To override the constructor for namedtuple class with default value: 123456BasePerson = namedtuple(&quot;BasePerson&quot;, [&quot;name&quot;, &quot;birthdate&quot; ,&quot;country&quot;])class Person(BasePerson): __slots__ = () def __new__(cls, name, birthdate=&quot;2000.01.01&quot;, country=None): return super(Person, cls).__new__(cls, name, birthdate, country) __slots__ The special attribute __slots__ explicitly state what attribute we want our class instances to have. By default, when an instance (object) is created, __dict__ is used to store an object‚Äôs (writable) attributes. A dynamic dictionary: requires more memory takes longer time to create. Because namedtuple makes immutable instances that are lightweight, we need to prevent the creation of __dict__ to get the benefit while subclassing by setting __slots__ as empty tuple. In a more general note, please consider using __slots__ when creating tons of objects, this saves memory and time when instancing. Comparison __dict__ vs. __slots__ 123456789class Person(object): def __init__(self, name, age): self.name = name self.age = agejohn = Person(&#x27;john&#x27;, 15)&gt;&gt; john.__dict__# &#123;&#x27;age&#x27;: 15, &#x27;name&#x27;: &#x27;john&#x27;&#125; 123456789101112class Person(object): __slots__ = [&#x27;name&#x27;, &#x27;age&#x27;] def __init__(self, name, age): self.name = name self.age = agejohn = Person(&#x27;john&#x27;, 15)&gt;&gt; john.__slots__# [&#x27;name&#x27;, &#x27;age&#x27;]&gt;&gt; john.__dict__# AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__dict__&#x27; Reference Python Docs - Glossary Medium megha mohan - Mutable vs Immutable Objects in Python Real Python - namedtuple Stack Overflow - What are data classes and how are they different from common classes? Geeks for Geesk - Use of __slots__ Stack Overflow - Usage of __slots__? Stack Overflow - Difference between hash() and id() Stack Overflow - Two variables in Python have same id, but not lists or tuples Stack Overflow - What does hash do in python?","categories":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/categories/general/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"style","slug":"style","permalink":"https://www.xingyulei.com/tags/style/"}]},{"title":"Understanding QEnum and QFlags in Qt","slug":"qt-enum-flag","date":"2021-12-05T16:00:00.000Z","updated":"2023-11-17T19:09:13.588Z","comments":true,"path":"post/qt-enum-flag/","link":"","permalink":"https://www.xingyulei.com/post/qt-enum-flag/","excerpt":"","text":"Introduction I often take Qt namespace for granted, it became a natural habit of setting a Qt parameter using Qt namespace, for instance: setting alignment for a QStandardItem 123item = QtGui.QStandardItem(&#x27;test&#x27;)item.setTextAlignment(QtCore.Qt.AlignRight)type(QtCore.Qt.AlignRight) Here, the Qt.AlignRight is an AlignmentFlag Enum type object which has a value of 0x0002 or 2, which creates the behavior of aligning with the right edge. Now, let‚Äôs try parsing the alignment of the QStandardItem again, using: 12align = item.textAlignment()type(align) this returns a PyQt5.QtCore.Alignment object, which we don‚Äôt really know the value of. And also note that it is not a AlignmentFlag object like previously. So, What‚Äôs the difference between these two, and how should I retrieve the namespace value? QEnum and QFlags QFlags is used to store combinations of Enum, which provides type checking safety. thus, Alignment QFlags type is simply a typedef for AlignmentFlag QEnum. Qt.AlignmentFlag is QEnum type; AlignmentFlag being the enum name Qt.Alignment is QFlags type; Alignment being the type name there‚Äôs also non-flag enums, which have the same type and enum name Example Declaration of both object types 12345678# &lt;class &#x27;PyQt5.QtCore.AlignmentFlag&#x27;&gt;align_flag = QtCore.Qt.AlignRightalign_flag_value = 2# &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;align = QtCore.Qt.Alignment(align_flag)# or &lt;class &#x27;int&#x27;&gt;align = QtCore.Qt.Alignment(align_flag_value) As we can see, setAlignment() takes a Qt.Alignment parameter, which means that any combination of Qt.AlignmentFlag values, or int, is legal. 123456789item = QtGui.QStandardItem(&#x27;test&#x27;)# Alignment type is compatible with either int or AlignmentFlag(Enum)# &lt;class &#x27;PyQt5.QtCore.AlignmentFlag&#x27;&gt;item.setTextAlignment(QtCore.Qt.AlignRight)# or &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;item.setTextAlignment(align)# or &lt;class &#x27;int&#x27;&gt;item.setTextAlignment(2) The return value is QFlags type, but it can be cast to an integer type to reveal its Enum value 12345# &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;align = pathItem.textAlignment()# to get the Alignment value, convert the QFlags to intint(align) Parse Namespace and Value Mapping Still not sure what the Enum value means? We can either check the docs, or use this to print out a mapping of the namespace and its corresponding value 12345678910111213def enum_mapping(cls, enum): mapping = dict() for key in dir(cls): value = getattr(cls, key) if isinstance(value, enum): mapping[key] = value return mappingenum = enum_mapping(QtCore.Qt, QtCore.Qt.AlignmentFlag)# enum = enum_mapping(QtWidgets, QtWidgets.QStyle)for item in sorted(enum.items(), key=str): print(&#x27;%s: %s&#x27; % item) Reference GitHub - qutebrowser Qt Doc - QFlags Class Reference Qt Doc - QEnum/QFlag","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Windows Process Management using Python: Find PIDs and End Processes","slug":"py-end-process","date":"2021-10-24T16:00:00.000Z","updated":"2024-01-14T17:21:39.587Z","comments":true,"path":"post/py-end-process/","link":"","permalink":"https://www.xingyulei.com/post/py-end-process/","excerpt":"","text":"Introduction Interacting with Windows shell to end process is very common, there are many ways to do so, like through the traditional batch script but to gain more flexibility, using python is probably a better idea. os.system is not the most elegant way to use, and it is meant to be replaced by subprocess subprocess comes with Python standard library and allows us to spawn new processes, connect to their input/output/error pipes, and obtain their return codes psutil (python system and process utilities) is a cross-platform library for retrieving information on running processes and system utilization. However, it is a third-party library Bare Minimum the bare minimum command to kill process utilizes window‚Äôs taskkill; which doesn‚Äôt matter if we use os.system or subprocess 1234567import osPROCESS = &#x27;notepad.exe&#x27;STATUS = &#x27;running&#x27; # running or not respondingCMD = r&#x27;taskkill /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; &#x27;.format(PROCESS, STATUS)os.system(CMD) Using os.system Now consider a more flexible case where we want to gather information about the processes like its PID, and then proceed on ending the process. One of the downside of window shell command is that the output can‚Äôt be passed on to other command, the output is just text. Therefore, we output the text to a csv file which we will later process. 12345678910111213141516171819202122232425import csvimport osimport signalimport subprocessPROCESS = &#x27;notepad.exe&#x27;STATUS = &#x27;running&#x27; # running or not respondingTMP = r&#x27;&#123;&#125;/Desktop/tmp.txt&#x27;.format(os.environ[&#x27;userprofile&#x27;])CMD = r&#x27;tasklist /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; /fo &quot;csv&quot; &gt; &quot;&#123;&#125;&quot;&#x27;.format(PROCESS, STATUS, TMP)# output as csv formatos.system(CMD)with open(TMP, &#x27;r&#x27;) as temp: reader = csv.reader(temp) header = next(reader) pids = [int(row[1]) for row in reader]# kill processfor pid in pids: os.kill(pid, signal.SIGTERM) # or signal.SIGKILL print(&#x27;killed process with pid: &#123;&#125;&#x27;.format(pid))if os.path.exists(TMP): os.remove(TMP) Using subprocess With subprocess, we no longer need to create a temp file to store the output. Using psutil 1234567891011121314151617import psutilPROGRAM = r&#x27;maya.exe&#x27;def findProcess(name): procs = list() #Iterate over the all the running process for proc in psutil.process_iter(): try: if proc.name() == name and proc.status() == psutil.STATUS_RUNNING: pid = proc.pid procs.append(pid) except: pass return procsprocesses = findProcess(PROGRAM) we can find process start time by using 12import timestartTime = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(proc.create_time())) to kill process, either kill() or terminate() will work respectfully, SIGKILL or SIGTERM 1234p = psutil.Process(PID)p.terminate()p.kill()p.wait Bonus: Find Open Port (for socket connection) 123456process = psutil.Process(pid=PID)connections = process.connections(kind=&#x27;tcp4&#x27;)for c in [x for x in connections if x.status == psutil.CONN_LISTEN]: # gets the port number print(&#x27;port opened: &#123;&#125;&#x27;.format(c.laddr[-1])) Bonus: Find Main Window Title ctypes is a foreign function library for python, resulting a not-pythonic function Reference Microsoft Doc - tasklist ThisPointer - Python : Check if a process is running by name and find it‚Äôs Process ID (PID) Johannes Sasongko - Win32 Python: Getting all window titles Stack Overflow - Obtain Active window using Python Microsoft Docs - winuser.h header","categories":[{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/categories/windows/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"Dynamic Animation with Unity's State Machine Scripting API","slug":"unity-api-statemachine","date":"2021-08-28T16:00:00.000Z","updated":"2023-11-19T00:13:59.278Z","comments":true,"path":"post/unity-api-statemachine/","link":"","permalink":"https://www.xingyulei.com/post/unity-api-statemachine/","excerpt":"","text":"Introduction This post is not about state machine basic, rather how we would setup/access state machine parameters. There is a higher level Animator class to access a part of the animator features, but we need to use Unity‚Äôs Animations package in order to dive deeper. 1using UnityEditor.Animations; There‚Äôs a lot of parts composing Unity‚Äôs Animator: Layer, Parameter, State machine (and everything inside it including states of different kind, transition between states), there are of course multiple parameters inside a single state. The examples in this post is only about accessing states and state machines, as the rest is translatable. We start from the root: Base layer, if we think about it, a layer is essentially a state machine. Inside this root state machine are sets of states (including blend tree/state/sub-state machine) 12// getting the base layer state machineAnimatorStateMachine rootStateMachine = controller.layers[0].stateMachine; (Base Layer) Next up, a very confusing part of the scripting process are the definition of AnimatorStateMachine vs. ChildAnimatorStateMachine and AnimatorState vs. ChildAnimatorState. I really wish Unity provides internal ways to cast these to each other. To summarize: ChildAnimatorStateMachine[] and ChildAnimatorState[] is used in conjunction with Arrays as AnimatorStateMachine.states and AnimatorStateMachine.stateMachines will return the previous mentioned type. Instead of casting, they have an internal property ChildAnimatorStateMachine.stateMachine and ChildAnimatorState.state which respectively returns AnimatorStateMachine and AnimatorState type object States All states (state or. state with blendtree inside) 1234567891011121314151617181920212223ChildAnimatorState[] childStates = rootStateMachine.states;foreach(var childState in childStates)&#123; AnimatorState state = childState.state; print(state.name); // state with blendtree try &#123; var blendTree = (BlendTree)state.motion; foreach (var child in blendTree.children) &#123; print(&quot;\\t&quot; + child.motion.name); &#125; &#125; // simple state catch &#123; print(&quot;\\t&quot; + state.motion.name); &#125;&#125; (Simple state only contains a single clip) (BlendTree nested in a state) Sub-state Machine 12345678910111213141516ChildAnimatorStateMachine[] childSubStateMachines = rootStateMachine.stateMachines;foreach(var childSubStateMachine in childSubStateMachines)&#123; // Convert `ChildAnimatorStateMachine` to `AnimatorStateMachine` AnimatorStateMachine subStateMachine = childSubStateMachine.stateMachine; print(subStateMachine.name); // all states in idle sub state machine ChildAnimatorState[] states = subStateMachine.states; foreach (var childState in states) &#123; print(&quot;\\t&quot; + childState.state.name); &#125;&#125; (Essentially, another sub layer of state machine) Reference Unity Manual - State Machine Basics Unity Scripting API - AnimatorStateMachine Unity Scripting API - Animator.Play","categories":[{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/categories/unity/"}],"tags":[{"name":"animation","slug":"animation","permalink":"https://www.xingyulei.com/tags/animation/"},{"name":"c#","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]},{"title":"A Simple Guide to Resizing and Scaling Pixmap in Qt","slug":"qt-pixmap-scale","date":"2021-08-21T16:00:00.000Z","updated":"2023-11-17T19:08:51.285Z","comments":true,"path":"post/qt-pixmap-scale/","link":"","permalink":"https://www.xingyulei.com/post/qt-pixmap-scale/","excerpt":"","text":"Introduction During my attempts to create custom alignment push buttons, I encountered an issue with icon having jagged looking (even if with low resolution). I use a custom paintEvent() drawing QPixmap, and this happens when I use scaled() to resize my pixmap. I noticed the icon does not have the jagged look with the built-in setIcon() and setIconSize in QPushButton. So I know there‚Äôs some wrong with my approach. Example To really show out the difference, I first reduce the resolution of my image. 12345low_rez = QtCore.QSize(40, 40)high_rez = QtCore.QSize(400, 400)pixmap = QtGui.QPixmap(path)pixmap = pixmap.scaled(low_rez) I then increase the resolution back to normal. The default scale uses FastTransformation 1pixmap = pixmap.scaled(high_rez) This is the result: The Solution I‚Äôve searched many forums and people were all saying: enable the SmoothTransformation, I tried but didn‚Äôt work. Later on I found out that the Qt translation to Python has a mis-match keyword argument: so instead of transformMode=Qt.SmoothTransformation, it should actually be mode=Qt.SmoothTransformation So here‚Äôs the solution: 12345pixmap = pixmap.scaled( high_rez, aspectRatioMode=QtCore.Qt.KeepAspectRatio, mode=QtCore.Qt.SmoothTransformation) and result: Extra I also found post saying it might be some settings with the QPainter, but it is not the issue for me. 1234painter = QtGui.QPainter(self)painter.setRenderHint(QtGui.QPainter.Antialiasing, True)painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, True)painter.drawPixmap(self.pixmap) Reference Qt Documentation - QPixmap Class","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Create Beautiful Qt Button Interfaces: Left-align Icon and Center-align Text","slug":"qt-button-alignment","date":"2021-08-20T16:00:00.000Z","updated":"2023-11-19T00:17:27.777Z","comments":true,"path":"post/qt-button-alignment/","link":"","permalink":"https://www.xingyulei.com/post/qt-button-alignment/","excerpt":"","text":"Introduction I recently needed to display a series of buttons for my shelf tool, the problem I‚Äôm having with this is that although every button has an icon and text label, they are displayed as different width. Using center-align made it look not uniform. Should I go with left-align? Well, there are buttons with relatively longer label and some with shorter ones, so it doesn‚Äôt look nice either with empty spaces on the right side. So the solution is obvious, separate the alignment of the icon and the label: the icon stays left-align to give a clear sign of broader, and the label would be center-align to make the width look uniform. (Left: default center align, Center: left align, Right: custom align) In the following section, I will demonstrate three methods of achieving this custom alignment effect: Overriding QPushButton paintEvent() This method subclass from QPushButton and override the paintEvent() and sizeHint() to extend how a button is drawn; The alignment of content of the button is default to center-aligned, but we make the pixmap to be drawn on the left-side (5px margin against the left border) With this method, we no longer use QIcon, we use QPixmap instead; that is why we created a custom setPixmap() method to our MyButton to give user access to the pixmap being drawn. Custom layout inside pushbutton Here is another interesting approach: this method defaults its style to left-aligned, but it only contains the icon. What about the push button label(text)? It is actually a QLabel placed in the QPushButton layout, and being vertically center-aligned; To modify the push button text, use setText() to the label inside the button layout, instead of the button. Use QProxyStyle I haven‚Äôt personally test it because my Qt python binding doesn‚Äôt have QProxyStyle included but it‚Äôs worth putting it here in case someone is able to try it. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class ProxyStyle(QtWidgets.QProxyStyle): def drawControl(self, element, option, painter, widget=None): if element == QtWidgets.QStyle.CE_PushButtonLabel: icon = QtGui.QIcon(option.icon) option.icon = QtGui.QIcon() super(ProxyStyle, self).drawControl(element, option, painter, widget) if element == QtWidgets.QStyle.CE_PushButtonLabel: if not icon.isNull(): iconSpacing = 4 mode = ( QtGui.QIcon.Normal if option.state &amp; QtWidgets.QStyle.State_Enabled else QtGui.QIcon.Disabled ) if ( mode == QtGui.QIcon.Normal and option.state &amp; QtWidgets.QStyle.State_HasFocus ): mode = QtGui.QIcon.Active state = QtGui.QIcon.Off if option.state &amp; QtWidgets.QStyle.State_On: state = QtGui.QIcon.On window = widget.window().windowHandle() if widget is not None else None pixmap = icon.pixmap(window, option.iconSize, mode, state) pixmapWidth = pixmap.width() / pixmap.devicePixelRatio() pixmapHeight = pixmap.height() / pixmap.devicePixelRatio() iconRect = QtCore.QRect( QtCore.QPoint(), QtCore.QSize(pixmapWidth, pixmapHeight) ) iconRect.moveCenter(option.rect.center()) iconRect.moveLeft(option.rect.left() + iconSpacing) iconRect = self.visualRect(option.direction, option.rect, iconRect) iconRect.translate( self.proxy().pixelMetric( QtWidgets.QStyle.PM_ButtonShiftHorizontal, option, widget ), self.proxy().pixelMetric( QtWidgets.QStyle.PM_ButtonShiftVertical, option, widget ), ) painter.drawPixmap(iconRect, pixmap)if __name__ == &quot;__main__&quot;: app = QtWidgets.QApplication(sys.argv) app.setStyle(&#x27;fusion&#x27;) proxy_style = ProxyStyle(app.style()) app.setStyle(proxy_style) w = QtWidgets.QWidget() lay = QtWidgets.QVBoxLayout(w) icons = [ app.style().standardIcon(standardIcon) for standardIcon in ( QtWidgets.QStyle.SP_MediaPlay, QtWidgets.QStyle.SP_MediaPause, QtWidgets.QStyle.SP_MediaSeekBackward, QtWidgets.QStyle.SP_MediaSeekForward, ) ] for text, icon in zip(&quot;Play Pause Backward Forward&quot;.split(), (icons)): button = QtWidgets.QPushButton(text) button.setIcon(icon) lay.addWidget(button) w.show() sys.exit(app.exec_()) Reference Stack Overflow - QPushButton icon aligned left with text centered Stack Overflow - qpushbutton icon left alignment text center alignment","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Customize QPushButton with Double-Click and Hover Effects","slug":"qt-detect-click","date":"2021-08-07T16:00:00.000Z","updated":"2023-11-19T00:17:34.983Z","comments":true,"path":"post/qt-detect-click/","link":"","permalink":"https://www.xingyulei.com/post/qt-detect-click/","excerpt":"","text":"Introduction I want to showcase some examples that I used to create push button with custom behaviours. (Double click button) (Button hover effect) Double Click Problem with MouseButtonDblClick Hey, I thought this would be easy, since Qt offers a built-in event type: QEvent.MouseButtonDblClick. But the issue is it couldn‚Äôt distinguish a single click vs. a double click. Which means, the single click event will also be invoked when double-clicked. Solution using timeout Subclass QPushButton and override eventFilter() Using eventFilter() eventFilter() takes three argument, a QObject that the filter is installed on, a QObject that is being watched, and a reference to a QEvent type object to be filtered. Be sure to add self.installEventFilter(self) so to override event filtering. Now it‚Äôs only the matter of adding condition logic to filter out different event types such as QEvent.MouseButtonPress and QEvent.MouseButtonDblClick with event.type() We can also filter which button is being used using event.button(). timeout Using a built-in timer from Qt QTimer(), we are able to fire off timer events between our clicks. A timeout signal is fired after a certain interval we defined using setInterval(). the timeout() method is then used to determine what custom signal to emit. Custom Signal Note that I created three custom signals for three different clicking type I want to register. 123right_clicked = QtCore.Signal()left_clicked = QtCore.Signal()double_clicked = QtCore.Signal() This enhanced the usability of the click behaviour, meaning that this extended QPushbutton can tell whether the user did a single left or right click or a double click. In my example above, I wrapped all the click events in the class itself. But in the main application, we can also instantiate MyButton and connect click event to method of our choice. 123btn = MyButton(&#x27;Button1&#x27;)btn.doubled_clicked.connect(func1)btn.right_clicked.connect(func2) Hover Effect As a bonus, I want to include a ‚ÄúButton‚Äù with custom hover effect, but it is technically a QLabel object with extended functionality, which is being used in my SnapTool. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class HoverBtn(QtWidgets.QLabel): clicked = QtCore.Signal(QtCore.QObject) def __init__(self, parent): super(HoverBtn, self).__init__(parent) style = &quot;&quot;&quot; QFrame&#123; border-radius: 25px; border-width: 2px; border-style: solid; border-color: rgb(20, 20, 20); background-color: rgb(170, 170, 170); &#125; &quot;&quot;&quot; self.installEventFilter(self) self.setStyleSheet(style) def eventFilter(self, obj, event): if event.type() == QtCore.QEvent.Enter: self.set_outline(1) return True elif event.type() == QtCore.QEvent.Leave: self.set_outline(0) return True if event.type() == QtCore.QEvent.MouseButtonPress \\ and event.button() == QtCore.Qt.LeftButton: self.clicked.emit(self) return True return False def set_outline(self, status): &quot;&quot;&quot; Update widget stylesheet when highlight &quot;&quot;&quot; style = self.styleSheet() border_pattern = r&#x27;border-color\\: rgb\\(\\d+, \\d+, \\d+\\)&#x27; dark = &#x27;border-color: rgb(20, 20, 20)&#x27; light = &#x27;border-color: rgb(21, 255, 9)&#x27; if status == 1: style = re.sub(border_pattern, light, style) elif status == 0: style = re.sub(border_pattern, dark, style) self.setStyleSheet(style) The hover effect is achieved by swapping stylesheet properties, and the rest of the event filtering is very similar to the previous double click button. Reference Qt Centre - Double Click Capturing Stack Overflow - Pyqt Mouse MouseButtonDblClick event","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Connecting Qt Signal in For Loop","slug":"qt-signal-in-for-loop","date":"2021-04-16T16:00:00.000Z","updated":"2023-11-17T19:08:38.501Z","comments":true,"path":"post/qt-signal-in-for-loop/","link":"","permalink":"https://www.xingyulei.com/post/qt-signal-in-for-loop/","excerpt":"","text":"Introduction We often need to create ui elements on the fly, sometimes we do it in something like a for loop. An example would be creating a series of QPushButton and connect them to a function through different argument values. An example is shown below: 1234567891011121314151617class Demo(QtWidgets.QWidget): def __init__(self, parent=None): super(Demo, self).__init__(parent) # initialization object layout = QtWidgets.QVBoxLayout() for index in range(6): pushbutton = QtWidgets.QPushButton(&#x27;button &#123;&#125;&#x27;.format(index)) pushbutton.clicked.connect(lambda: self.trigger(index)) layout.addWidget(pushbutton) self.setLayout(layout) @staticmethod def trigger(index): print(&#x27;button &#123;&#125; clicked&#x27;.format(index)) Here I created six QPushButton and when I click them it should output which button is being clicked. But if we run this script and try to click each button it will always output ‚Äúbutton 5 clicked‚Äù (aka, the last button). It is safely to assume that the argument passed during the for loop always result in the last index. Explanation Based on a kind response from stackoverflow: lambdas do not store the value of button when it is defined. The code describing the lambda function is parsed and compiled but not executed until we actually call the lambda. Therefore, when a button is clicked, the current value of that variable is used (the last index). What‚Äôs the solution? Lambda with solid variable Passing solid variable to the lambda 1pushbutton.clicked.connect(lambda _, i=index: self.trigger(index=i)) Note that we created another temporary variable before index as the first argument passed in the lambda will always return as False. Because Qt defines the signal QAbstractButton.clicked to take a single argument with a default value of False. Since our lambda is handling that signal, it gets called with False. Partial approach Use functools.partial also works 12from functools import partialpushbutton.clicked.connect(partial(self.trigger, index)) Note that in some cases where wrappers are being used in trigger function, it could be trickier to use this as oppose to lambda Reference Stack Overflow - First lambda capture of local variable always False Stack Overflow - Connecting multiples signal/slot in a for loop in pyqt","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Qt Application Custom Widgets and Dialogs Templates (No .ui File)","slug":"qt-template-no-ui","date":"2021-02-10T16:00:00.000Z","updated":"2023-11-19T00:18:00.737Z","comments":true,"path":"post/qt-template-no-ui/","link":"","permalink":"https://www.xingyulei.com/post/qt-template-no-ui/","excerpt":"","text":"UI Module without .ui file There is a different between inheriting from QWidget class vs QMainWindow Inheriting from QWidget: 12345678910111213141516class InheritQWidget(QtWidgets.QWidget): def __init__(self, parent=None): super(InheritQWidget, self).__init__(parent) # initialization object layout = QtWidgets.QGridLayout() listWidget = QtWidgets.QListWidget() #treeWidget = QtWidgets.QTreeWidget() # set # treeWidget.setParent(listWidget) layout.addWidget(listWidget) self.setLayout(layout) listWidget.addItem(&#x27;item A&#x27;) listWidget.addItem(&#x27;item B&#x27;) Inheriting from QMainWindow 123456789101112131415161718class InheritQMainWindow(QtWidgets.QMainWindow): # Window inherits from QMainWindow the layout is already defined # to accommodate any toolbars or any other QMainWindow component # use the setCentralWidget() to accommodate this def __init__(self, parent=None): super(InheritQMainWindow, self).__init__(parent) # initialization object widget = QtWidgets.QWidget() layout = QtWidgets.QGridLayout() # set self.setCentralWidget(widget) widget.setLayout(layout) label = QtWidgets.QLabel(&#x27;test&#x27;) layout.addWidget(label, 0, 0) Custom Dialog Sometimes we need a quick window to display some information, but the built-in qt message boxes aren‚Äôt suitable for the job. Custom Widget We can choose to create a widget class, but also for saving time, we can create a temporary custom widget example: Couple of things worth noting: correctly initialize the widget self.customWidget = QtWidgets.QWidget() will allow widget be child of the main window, thus allow widget to close when main window is closed so not customWidget = QtWidgets.QWidget() or self.customWidget = QtWidgets.QWidget(self) use getattr in combination with QStyle and name of the built-in icon use win.setAttribute(QtCore.Qt.WA_DeleteOnClose) to make sure the child widget is killed after main window is closed, because default close only hides window objects self.customWidget.show() is the core command to call it to display Custom QMessageBox add custom buttons to the QMessageBox layout 123456789101112131415dialog = QtWidgets.QMessageBox()dialog.setText(&quot;Overwrite?&quot;)dialog.setIcon(QtWidgets.QMessageBox.Critical)yes_btn = dialog.addButton(&quot;Yes!&quot;, QtWidgets.QMessageBox.YesRole)no_btn = dialog.addButton(&quot;No&quot;, QtWidgets.QMessageBox.NoRole)abort_btn = dialog.addButton(&quot;Abort&quot;, QtWidgets.QMessageBox.RejectRole)dialog.exec_()if dialog.clickedButton() == yes_btn: print(&quot;yes&quot;)elif dialog.clickedButton() == no_btn: print(&quot;no&quot;)elif dialog.clickedButton() == abort_btn: print(&quot;abort&quot;) Don‚Äôt use the return value of QMessageBox::exec, as it only makes sense for standard buttons. Also don‚Äôt rely on buttonRole as multiple buttons could be sharing the same role. Reference Programiz - Python getattr() GUIS - Q&amp;A: Are there any built-in QIcons?","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Qt Template with Qt Menus, Submenus and Actions","slug":"qt-template-context-menu","date":"2021-02-04T16:00:00.000Z","updated":"2023-11-19T00:17:55.587Z","comments":true,"path":"post/qt-template-context-menu/","link":"","permalink":"https://www.xingyulei.com/post/qt-template-context-menu/","excerpt":"","text":"Reference Stack Overflow - How to add submenu in Qt","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Learn Qt Custom Sorting (Three Ways)","slug":"qt-sorting","date":"2021-01-22T16:00:00.000Z","updated":"2023-11-19T00:18:08.533Z","comments":true,"path":"post/qt-sorting/","link":"","permalink":"https://www.xingyulei.com/post/qt-sorting/","excerpt":"","text":"Sorting Overview Sorting happens a lot in qt viewports like list, table and tree. Using convenience class such as item-based widget provides limited sorting options. One common thing may occur when we are sorting items is the widget treats their value as string instead of int, which will result incorrect ordering 12345678910111213141516list = [&quot;3&quot;, &quot;1&quot;, &quot;2&quot;, &quot;20&quot;, &quot;92&quot;, &quot;89&quot;, &quot;40&quot;, &quot;10&quot;, &quot;11&quot;]if __name__ == &#x27;__main__&#x27;: app = QtWidgets.QApplication(sys.argv) mywidget = QtWidgets.QTableWidget() mywidget.insertColumn(0) for index in range(len(list)): mywidget.insertRow(index) value = list[index] item = QtWidgets.QTableWidgetItem(value) mywidget.setItem(index, 0, item) mywidget.sortItems(0, QtCore.Qt.AscendingOrder) mywidget.show() sys.exit(app.exec_()) This will sort the list of items based on their string, so the order will be: 1234- 1- 10- 11- 2 instead of 123- 1- 2- ... So naturally, we would need to specify the item value as integer type, but we cannot instantiate item with integer, but setData() will work 1234# intead of item = QtWidgets.QTableWidgetItem(int(value))# do thisitem.setData(QtCore.Qt.ItemDataRole, int(value)) Now everything will sort by numeric order Custom Sorting (Operator override) What if we need more than numeric value for our data, for example, when displaying frame number, we would like to include frame range too. Like frame 1, frame 2, frame 3-7, frame 8, frame 9-14. It looks like using string is the only option. This time we need to override value compare operator for these value, that is making our own item class like the following example the __lt__ is the less than operator (&lt;) Everything should behave correctly Custom Sorting (QSortFilterProxyModel Class) https://doc-snapshots.qt.io/qtforpython-5.15/PySide2/QtCore/QSortFilterProxyModel.html Reference Stack Overflow - Is it possible to sort numbers in a QTreeWidget column?","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Realistic Physics/Dynamics in Unity using Verlet Integration","slug":"unity-verlet-integration","date":"2020-11-18T16:00:00.000Z","updated":"2023-11-17T19:03:33.165Z","comments":true,"path":"post/unity-verlet-integration/","link":"","permalink":"https://www.xingyulei.com/post/unity-verlet-integration/","excerpt":"","text":"Introduction When simulating a particle movement, we naturally think of Euler integration, where the position of the particle can be expressed as such: (free falling motion) x=0.5‚àóg‚àót2x = 0.5*g*t^2 x=0.5‚àóg‚àót2 This is an extremely easy use case. The position of the particle can be represented using a function of time. But in real life, a particle can be affected by multiple forces (and even unstabled force caused non-constant acceleration) and Euler integration also has inaccurate estimation when time step is very large. In my understanding, the use of Verlet is good for complex particle movement. What it essentially does is relate force with position rather than velocity. The process first calculate the current particle position and the position one step back: velocity=X current ‚àíX previous ;velocity = X~current~-X~previous~; velocity=X current ‚àíX previous ; X previous =X current ;X current =X current +velocityX~previous~ = X~current~; X~current~ = X~current~+velocity X previous =X current ;X current =X current +velocity This works magically, here‚Äôs some sample code to help understand it, and a Demo. 1234// without other influence, the following updates the particle positionvelocity = posNow - posOld;posOld = posNow;posNow += velocity; Calculate Force What if we want to add gravity to the particle like the free falling above? Just add the acceleration to the current position, and the change will add-up on the next integration. The following also applies to forces like friction. 1posNow += GRAVITY; // not sure if we should multipy Time.deltatime Constraint Constraint are usually in the form of constraining particles to a specific distance, like spring. When mulitple constraints acts on single particle, one constraint will affect the other. To solve this, loop the constraint multiple time for each time step. 123456789101112131415161718192021222324252627for (int count = 0; count &lt; ITERATION; count++)&#123; Constriants();&#125;// constraint on rope to make fixed distance between segmentsvoid Constriants()&#123; for(int index = 0; index &lt; segment-1; index++) &#123; float distance = (currentSeg.posNow - nextSeg.posNow).magnitude; float error = Mathf.Abs(distance - ropeDist); Vector2 changeDir = Vector2.zero; if (distance &gt; ropeDist) changeDir = (currentSeg.posNow - nextSeg.posNow).normalized; else if (distance &lt; ropeDist) changeDir = (nextSeg.posNow - currentSeg.posNow).normalized; Vector2 changeAmount = changeDir * error; if (index == 0) nextSeg.posNow += changeAmount; else&#123; currentSeg.posNow -= changeAmount * 0.5f; nextSeg.posNow += changeAmount * 0.5f; &#125; &#125;&#125; Collision Penalty based system or projection collision reaction 12345678910111213141516171819// example for bounding box collisionVector2 velocity = posNow - posOld;if (posNow.x &gt; screenWidth)&#123; posNow.x = screenWidth; posOld.x = posNow.x + velocity.x;&#125;else if (posNow.x &lt; 0)&#123; posNow.x = 0; posOld.x = posNow.x + velocity.x;&#125;if (posNow.y &gt; screenWidth)&#123; posNow.y = screenWidth; posOld.y = posNow.y + velocity.y;&#125;else if (posNow.y &lt; 0)&#123; posNow.y = 0; posOld.y = posNow.y + velocity.y;&#125; Resources Gamedev.net - A Verlet based approach for 2D game physics Youtube - Coding Math: Episode 36 - Verlet Integration Part I Youtube - 2D Rope Tutorial - Make Swinging Rope in Unity (Verlet Integration) Wikipedia - Velocity Verlet","categories":[{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/categories/unity/"}],"tags":[{"name":"animation","slug":"animation","permalink":"https://www.xingyulei.com/tags/animation/"},{"name":"math","slug":"math","permalink":"https://www.xingyulei.com/tags/math/"},{"name":"c#","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]},{"title":"Beginner's Guide to Graphics Lighting and Shading","slug":"graphics-shading-basics","date":"2020-09-15T16:00:00.000Z","updated":"2023-11-17T19:16:01.068Z","comments":true,"path":"post/graphics-shading-basics/","link":"","permalink":"https://www.xingyulei.com/post/graphics-shading-basics/","excerpt":"","text":"Glossary Wikipedia - Computer Graphics Glossary Shader: programs running on gpu that describes general computation (vertex transformation: vertex shader; shading calculation: fragment shader) G-buffer: a screen space representation of geometry and material information (e.g. color, normal, position/depth) Fragment: is the corresponding pixel generated by geometric primitives, but a pixel on screen can be a product of more than one fragment due to Z-buffering, blending etc. Vertex lighting vs. Per-pixel lighting Vertex Lighting Lighting is computed per-vertex calculation happens in the vertex shader lighting/color information is then linearly interpolated across faces and rasterized it is cheaper, faster (since there are fewer vertices compared to pixels) but noticeable artifact with low-poly objects Per-Pixel Lighting Lighting is computed per-pixel/fragment (but what is this exactly? see the example below) Calculation happens in the fragment shader normal information (passed from vertex shader) is interpolated on the faces, lighting/color is calculated and rasterized. it is more expensive but less artifact Example of a per-pixel lighting shader Vertex Shader 123456789101112131415161718#version 330 corelayout (location = 0) in vec3 aPos;layout (location = 1) in vec3 aNormal;out vec3 FragPos;out vec3 Normal;uniform mat4 model;uniform mat4 view;uniform mat4 projection;void main()&#123; FragPos = vec3(model * vec4(aPos, 1.0)); Normal = mat3(transpose(inverse(model))) * aNormal; gl_Position = projection * view * vec4(FragPos, 1.0);&#125; Fragment Shader 123456789101112131415161718192021222324252627282930313233#version 330 coreout vec4 FragColor;in vec3 Normal; in vec3 FragPos; uniform vec3 lightPos; uniform vec3 viewPos; uniform vec3 lightColor;uniform vec3 objectColor;void main()&#123; // ambient float ambientStrength = 0.1; vec3 ambient = ambientStrength * lightColor; // diffuse vec3 norm = normalize(Normal); vec3 lightDir = normalize(lightPos - FragPos); float diff = max(dot(norm, lightDir), 0.0); vec3 diffuse = diff * lightColor; // specular float specularStrength = 0.5; vec3 viewDir = normalize(viewPos - FragPos); vec3 reflectDir = reflect(-lightDir, norm); float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular = specularStrength * spec * lightColor; vec3 result = (ambient + diffuse + specular) * objectColor; FragColor = vec4(result, 1.0);&#125; As we can see, fragment position and normal information are passed into the fragment shader from vertex shader (where the pre-compute happens), the lighting calculation (Phong lighting) is calculated per-fragment. On a related note: gpu cost are related to how many vertices are passed in to the gpu from buffer and how complex the lighting calculation is in the fragment shader (this could be the algorithm/model complexity, and the number of passes); Forward vs. Deferred Rendering Forward Rendering The standard, out-of-the-box rendering technique Geometries are passed to gpu, going through vertex shader and fragment shader, with each geometry and each light computed separately one at a time to form the final render. Render complexity: O(num of geometry fragments * num of lights) Deferred Rendering Render is deferred until all geometry has been processed Geometries are passed to gpu, going through vertex shader and fragment shader (without lighting pass), final rendering is computed/combined with multiple render passes (one pass for getting all geometry information to G-buffer, second pass for compute lighting based on the G-buffer). Render complexity: O(screen resolution * num of lights) Discussion Everything all comes down to lighting, as gpu can easily handle vertex information, but the most expensive are lighting calculation which can easily slow down the rendering. Forward rendering iterates and compute each fragments of each geometry, no matter if it overlaps or is hidden by other fragments. So for each pixel, we could have already run multiple fragment shaders. This is where deferred rendering come in handy, the G-buffer stores information such as color, normal and depth. The lighting later on can know how to produce the final render by combining all the information (For example: depth test can also cull out all the fragments that are being obscured). So essentially, each pixel only runs a single fragment shader. Rasterization vs. Ray tracing The forward, deferred rendering techniques are all in the realm of rasterization, which is the most popular and traditional real-time rendering technique. With the advance of hardware, ray tracing, which is computationally demanding (usually used in films/animation) can now be used in real-time video games. Rasterization We gather objects information and projects each one by one on screen (per fragment), fragment shader computes the final color of every fragment to form pixels on screen. The fundamental of rasterizing is that for each object/geometry, we look at (rasterize it) it‚Äôs verts/triangles to cover pixels. So, as discussed in deferred rendering, every object is drawn but not all of them are displayed on screen. This overdraw can be accelerated by using deferred shading‚Äôs depth test. Ray tracing We cast rays from our eyes (camera) for each pixel and gather information of those rays as they travel through/intersects with objects and interacts with lights to form the final render on screen. The fundamental of ray tracing is that for each pixel, we look at (shoot a ray) each object/geometry to see how they contribute to the color of that pixel. As for ray tracing, we need to shoot many rays for each pixel, and more when there are reflection and refraction. One way to accelerate this is to use bounding volume. Discussion The most significant difference in visual is that ray tracing is physically more accurate than rasterization, thus more realistic. Which is more apparent in dynamic environment with objects that reflects and refract. Rasterization needs many estimation techniques to handle lighting and shadowing such as more render passes, baked light map, cubemap reflection, but ray tracing gets all the results out of the box. Reference Envato tuts+ - Forward Rendering vs. Deferred Rendering Learn OpenGL - Deferred Shading Wikipedia - Deferred Lighting Learn OpenGL - Basic Lighting Knowww - Per-vertex vs. per-fragment lighting Unity Forum - What‚Äôs the difference between per-pixel and per-vertex lit in Forward Rendering? Youtube - OpenGL Fragment Shaders | How Do Fragment Shaders Work? Nvidia - Ray Tracing Essentials Stack Exchange - Mirror Reflections: Ray Tracing or Rasterization? Quora - What is the difference between ray tracing and very high shader details?","categories":[{"name":"graphics","slug":"graphics","permalink":"https://www.xingyulei.com/categories/graphics/"}],"tags":[{"name":"rendering","slug":"rendering","permalink":"https://www.xingyulei.com/tags/rendering/"}]},{"title":"Comprehensive Guide to C++ Reference and Pointer","slug":"cpp-reference-pointer","date":"2020-08-12T16:00:00.000Z","updated":"2023-11-17T19:16:17.934Z","comments":true,"path":"post/cpp-reference-pointer/","link":"","permalink":"https://www.xingyulei.com/post/cpp-reference-pointer/","excerpt":"","text":"Basics De-referencing add * before a pointer to expose the object‚Äôs value it‚Äôs pointing varN, varN‚Äôs value ptrN, varN‚Äôs address *ptrN, de-reference ptrN, varN‚Äôs value (&amp;ptrN, ptrN‚Äôs address, which has little meaning) Symbol to access a member of a class or class object (instance) a-&gt;b: b is the member of the object that pointer a refers to a.b: b is the member of the object, or the reference of an object a a::b: b is the member of the class, or namespace a Declaration Pointer Declaration Syntax: varType* varName Declaration 12//declare a c++ pointer to an integerint* ptrx; Initialization 1234// a pointer pointing to address of varN, varN type should be intint varN = 9;int* ptrN;ptrN = &amp;varN; short-hand: 1int* ptrN = &amp;varN; Reference Declaration Syntax: varType&amp; varName 123456789int main()&#123; int&amp; invalidRef; // error: references must be initialized int x = 5; int&amp; ref = x; // okay: reference to int is bound to int variable return 0;&#125; When a reference is initialized with an object (or function), we say it is bound to that object (or function). The process by which such a reference is bound is called reference binding references must be bound to a modifiable variable Function Pass Argument Both of these methods are prevented copying the variable, and capable of modifying the variable value that is passed in; if a variable is expensive to copy, e.g. struct, class By Reference Modify the variable, can‚Äôt pass in an un-modifiable variable like const Syntax varType&amp; varName 1234void printValue(int&amp; y)&#123; std::cout &lt;&lt; y &lt;&lt; &#x27;\\n&#x27;;&#125; Prevent modifying the variable, while having the benefit of not making a copy Syntax const varType&amp; varName 1234void printValue(const int&amp; y)&#123; std::cout &lt;&lt; y &lt;&lt; &#x27;\\n&#x27;;&#125; By Address (via pointer) Syntax varType* varName, to access the variable, de-reference using *varName 1234void printByAddress(const std::string* ptr) // The function parameter is a pointer that holds the address of str&#123; std::cout &lt;&lt; *ptr &lt;&lt; &#x27;\\n&#x27;; // print the value via the dereferenced pointer&#125; Function Return Argument Variable Pointer works almost identically to return by reference, except a pointer to an object is returned instead of a reference to an object The major advantage of return by address over return by reference is that we can have the function return nullptr if there is no valid object to return Variable Reference Never return a reference to a local variable or some such, because it won‚Äôt be there to be referenced. Syntax varType&amp; funName(args) References Stack Overflow - When do I use a dot, arrow, or double colon to refer to members of a class in C++? Runestone Academy - Pointers Learn C++ - Lvalue reference Learn C++ - Return by reference and return by address Learn C++ - Pass by lvalue reference Learn C++ - Pass by address","categories":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/categories/general/"}],"tags":[{"name":"c++","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]},{"title":"How to Run Maya in Batch Mode","slug":"maya-batch-mode","date":"2019-05-08T16:00:00.000Z","updated":"2024-01-03T02:35:11.544Z","comments":true,"path":"post/maya-batch-mode/","link":"","permalink":"https://www.xingyulei.com/post/maya-batch-mode/","excerpt":"","text":"Important: Post deprecated Please refer this blog post for most up-to-date Maya batch mode guide Import Standalone Module 12import maya.standalonemaya.standalone.initialize(name=&#x27;python&#x27;) Sometimes, import error could occur 1ImportError: No module named maya.standalone Solution check your python interpreter, it should match the maya python2 version. I changed my project interpreter in my pycharm setting. setup system environment variable, like the following if error still occurs, please check your maya directory 1234567891011121314151617181920import sysimport osMAYA_LOCATION = &quot;C:/Program Files/Autodesk/Maya2018&quot;PYTHON_LOCATION = MAYA_LOCATION + &quot;/Python/Lib/site-packages&quot;os.environ[&quot;MAYA_LOCATION&quot;] = MAYA_LOCATIONos.environ[&quot;PYTHONPATH&quot;] = PYTHON_LOCATIONsys.path.append(MAYA_LOCATION)sys.path.append(PYTHON_LOCATION)sys.path.append(MAYA_LOCATION+&quot;/bin&quot;)sys.path.append(MAYA_LOCATION+&quot;/lib&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/DLLs&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib/plat-win&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib/lib-tk&quot;)print(&#x27;\\n&#x27;.join(sys.path)) Add Functions Let‚Äôs add a test function to our standalone script. 1234567891011121314def test(): import maya.cmds as cmds # full path to your Maya file to OPEN maya_file_to_open = r&quot;C:\\Users\\Lei\\Desktop\\test.ma&quot; # Open your file cmds.file(maya_file_to_open, o=True) # full path to your Maya file to IMPORT maya_file_to_import = r&quot;C:\\Users\\Lei\\Desktop\\import.ma&quot; # Import the file. the variable &quot;nodes&quot; will hold the names of all nodes imported, just in case. cmds.file(maya_file_to_import, i=True, type=&quot;mayaAscii&quot;) render = r&quot;C:\\Users\\Lei\\Desktop\\te.ma&quot; cmds.file(rename=render) cmds.file(force=True, save=True, options=&#x27;v=1;p=17&#x27;, type=&#x27;mayaBinary&#x27;) print(&#x27;a&#x27;) This test function opens a maya file on my desktop and import a maya file and save out as another file. Execute from mayapy Execute from Command Line to do so, make sure to add mayapy to your system environment variable. in system variable: add C:\\Program Files\\Autodesk\\Maya2018\\bin to Path open command prompt, and enter mayapy [directory/firstStandalone.py] Execute using subprocess you can do it without going to command line, but by executing another .py using subprocess 1234567import subprocesscommand = &#x27;mayapy [directory/firstStandalone.py]&#x27;process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)process.wait()print(process.returncode) # this return the message from cmd Standalone Script with Arguments Sometimes, we would want to pass arguments to our standalone script get argument as variable using sys.argv 1234import sysfile_path = sys.argv[1]file_name = sys.argv[2] Example from Toadstorm Nerdblog: 1234567891011121314151617181920212223242526272829import subprocessmaya_path = &#x27;directory/mayapy.exe&#x27; # mayapy or full path to mayapy.exescript_path = &#x27;directory/firstStandalone.py&#x27;def add_layer(file_names,layer_name): for file_name in file_names: command = r&#x27;mayapy &#123;&#125; &#123;&#125; &#123;&#125;&#x27;.format( script_path, file_name, layer_name ) process = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) process.wait() print(process.returncode) # this return the message from cmd if __name__ == &#x27;__main__&#x27;: # define a list of filenames to iterate through files = [&#x27;file1&#x27;, &#x27;file2&#x27;, &#x27;file3&#x27;] render_layer = &#x27;a new render layer&#x27; # run procedure, assuming you&#x27;ve already defined it add_layer(files, render_layer) Reference Tech-Artist Org - Import maya.standalone problem Stack Overflow - use external python script to open maya and run another script inside maya Stack Overflow - How to use an external interpreter for Maya? Toadstorm Nerdblog - Python in Maya Standalone","categories":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/categories/maya/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"How to Use Python Import","slug":"py-import","date":"2019-03-15T16:00:00.000Z","updated":"2023-11-17T19:10:56.224Z","comments":true,"path":"post/py-import/","link":"","permalink":"https://www.xingyulei.com/post/py-import/","excerpt":"","text":"from ... import vs. import Always avoid wildcard imports like such: 1from my_module import * # don&#x27;t use this Instead, use regular import like: 1import my_module # use this Why? using wildcard import will pollute namespaces Using wildcard import will not import names with a leading underscore (unless the module defines an __all__ list) PEP8 recommend using regular import What does __init__.py do? __init__.py is used to specify a package, when import is trying to find the modules, But it is not required: meaning a package without __init__.py, The system can still find the modules after configuring appropriate PYTHONPATH using sys.path.append. __init__.py is executed after importing the package, I‚Äôve seen sub-directory being imported by appending as environment variable within __init__.py Example: so instead of using import project.foo.bar for the following structure: 123456project/ __init__.py foo/ __init__.py bar/ b.py inside the __init__.py, we could do a sys.path.append(PATH_TO_BAR) so with this file structure, we can just do import project they could even add the import statement for us in the __init__.py, although it is not transparent. 12345project/ __init__.py foo/ bar/ b.py Note: Whatever gets appended last overrides the previous env variable, so import to the same name module will find the latest append Dot Notation (.) in Import 12345678910parent/ __init__.py file.py one/ __init__.py anotherfile.py two/ __init__.py three/ __init__.py Each dot in our import will refer to something inside the package, could be another package or a module. But it can‚Äôt be a class. Import python modules could look like: import parent.file or import parent.one.anotherfile From ‚Ä¶ import classes or functions look like this: from parent.file import class which gives us direct access to the class namespace, but not the example above. Import Order Based on PEP8, imports should be grouped by the following order: Standard library import Related third-party import Local application/library specific import What is Standard Library Imports? Standard library are installed automatically by Python installer, full documentation link is here: https://docs.python.org/3/library/ What is the order after grouping? There is no specific rules, but based on common preferences, use alphabetical order, with import first and from ‚Ä¶ import after 12345import abcimport defimport xfrom g import ggfrom x import xx Intra-package In a structure like this, how would you do import from another directory? say from module-x.py import module-a 12345678910top-package/ __init__.py sub-package-a/ __init__.py module-x.py module-y.py sub-package-b/ __init__.py module-a.py module-b.py Here‚Äôs some examples doing relative imports in module-x 123456import module-yfrom . import module-yfrom .module-y import classAfrom .. import sub-package-bfrom ..subpackage-b import module-afrom ..subpackage-b.module-a import classB Import an import It is a common practice in C# to use import module or static class to stores all the global variables used for settings, or even all the modules. In Python it would be something like: constant.py 1234567891011121314import module_aimport module_bimport module_cGLOBAL_VAR_MAX = 50GLOBAL_VAR_MIN = 10GLOBAL_VAR_TIMEOUT = 2000GLOBAL_NAME = r&#x27;random name&#x27;# or evenclass Constant(object): gravity = 9.8 is_true = True With this setup, all the module in the same project would just import the constant module and have access to all the imports and variable. I thought this was a neat way to make code cleaner by getting rid of all the duplicated imports that might happen. there are also some voices against it: based on the style guide: Constants are usually defined on a module level also, suggestions have mentioned to refrain from using class as it could be instantiated which makes no sense. unless there‚Äôs a valid reason for all those modules to be collected under a common name. If not, then they should be kept separately. This is due to documentation, as other people open our file, they don‚Äôt get information on what is getting imported (what is needed) Same module import multiple times So if multiple files are importing the same module separately, does python optimize the import? Yes, python modules are considered as singletons, no matter how many times we import them they get initialized only once. unless reload is being called Reference Stack Overflow - constants in Python: at the root of the module or in a namespace inside the module? Stack Overflow - in python, do you need to import modules in each split file? Stack Overflow - Python: Importing an ‚Äúimport file‚Äù Stack Overflow - Does python optimize modules when they are imported multiple times? Stack Overflow - Why can I import successfully without init.py? Stack Overflow - relative path not working even with init.py","categories":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/categories/general/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"style","slug":"style","permalink":"https://www.xingyulei.com/tags/style/"}]},{"title":"The Only Qt Template You'll Ever Need","slug":"qt-template","date":"2018-10-15T16:00:00.000Z","updated":"2024-01-14T17:25:43.569Z","comments":true,"path":"post/qt-template/","link":"","permalink":"https://www.xingyulei.com/post/qt-template/","excerpt":"","text":"General Template 12345678class Window(QtWidgets.QMainWindow): def __init__(self, parent=None): super(Window, self).__init__(parent) self.setAttribute(QtCore.Qt.WA_DeleteOnClose) self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint) _loadUi(UI_PATH, self) Import Qt Modules if you are using PyQt5 binding: 12from PyQt5 import QtCore, QtGui, QtWidgetsfrom PyQt5.uic import loadUi if you are using PySide2 binding, here‚Äôs a wrapper I made which can be found here. I‚Äôm using Qt.py a Python 2 &amp; 3 shim around all Qt bindings, it just saves a lot of work. 12from Qt import QtCore, QtGui, QtWidgetsfrom Qt import _loadUi Using QApplication Launch as standalone application using QApplication, or if a QApplication instance exist, there‚Äôs no need to instantiate it. use QtWidgets.QApplication.instance() to check 12345678910if __name__ == &#x27;__main__&#x27;: import sys if QtWidgets.QApplication.instance(): window = ToolWindow() window.show() else: app = QtWidgets.QApplication(sys.argv) window = ToolWindow() window.show() sys.exit(app.exec_()) Close Event Delete Widget when Closed by default, closing the widget is hiding it not destroying the object 1&#123;WindowObject&#125;.setAttribute(QtCore.Qt.WA_DeleteOnClose) Unique Instance Raise existing instance (for example: widgets that are hidden during closeEvent); if no instance is available, create a new one. 12345678def show(): global WINDOW exists = WINDOW is not None if not exists: WINDOW = ToolWindow() WINDOW.showNormal() Other Register Style Sheet 123456def show(): ... APP = QtWidgets.QApplication(sys.argv) with open(PATH_TO_STYLESHEET, &#x27;r&#x27;) as f: qss = f.read() APP.setStyleSheet(qss) Register QResources QtCore.QResource.registerResource(PATH_TO_RCC) Maya Parent to Maya‚Äôs Main Window by default Qt window is not parented to Maya application 12345678910111213from shiboken2 import wrapInstancedef get_maya_main_window(): import maya.OpenMayaUI main_window_ptr = maya.OpenMayaUI.MQtUtil.mainWindow() return wrapInstance(long(main_window_ptr), QtWidgets.QMainWindow)class ModuleUI(QtWidgets.QMainWindow): def __init__(self, parent=get_maya_main_window()): super(ModuleUI, self).__init__(parent) _loadUi(UI_PATH, self) Window Docking Dockable Window The widget/window can now be docked into Maya‚Äôs main window; Auto-docking The above example of auto-docking may not work for certain Maya builds A workaround is to use the following method, but it only applies to QWidget type not QMainWindow type. Instantiate Widget When the UI has no parent (Maya main window), it will get instantly destroyed by the garbage collector, unless we keep an instance: 12345678# in the show functiondef show(): window = ModuleUI() window.show() return window# in maya script editorwin = moduleName.show() or using global variable to store the instance 1234567def show(): global window window = ModuleUI() window.show()# in maya script editormoduleName.show() Close Application in Maya 1234567def show(): if cmds.window(&#x27;xxx&#x27;, q=1, exists=1): cmds.deleteUI(&#x27;xxx&#x27;) global window window = somethingWindow() window.setObjectName(&#x27;xxx&#x27;) window.show() Error in PyCharm When this error occurs, it is due to MayaDevKit environment MayaDevKit allows maya python command auto-completion, remove it from PyCharm 12app = QtWidgets.QApplication(sys.argv)TypeError: &#x27;NoneType&#x27; object is not callable Unreal Engine 1234567891011import unrealdef show(): global app global window app = QtWidgets.QApplication.instance() or QtWidgets.QApplication(sys.argv) window = TestWindow() window.show() # this needs to happen before parenting unreal.parent_external_window_to_slate(int(window.winId())) Raise Existing Instance in the show() we need to return the window instance and assign it to a global variable: 12345# main.pydef show(): ... window.show() return window in the parent python command call (this maybe an Unreal menu command) 123from test import mainglobal editoreditor = main.show() Override closeEvent() To exit the Unreal Editor when Qt Window is closed: 123def closeEvent(self, event): QtWidgets.QMainWindow.closeEvent(event) unreal.SystemLibrary.execute_console_command(None, &quot;QUIT_EDITOR&quot;) To override at an instance level: 123456789import typesif __name__ == &quot;__main__&quot;: def _close_event(self, event): QtWidgets.QMainWindow.closeEvent(event) unreal.SystemLibrary.execute_console_command(None, &quot;QUIT_EDITOR&quot;) win = Window() win.closeEvent = types.MethodType(_close_event, win) Bonus: PySide2 UI Loading 12345678910111213141516171819202122232425262728from PySide2 import QtCore, QtWidgetsfrom PySide2.QtUiTools import QUiLoaderclass WrapperWindow(QtWidgets.QMainWindow): ui = &#x27;&#x27; def __init__(self, parent=None): super(WrapperWindow, self).__init__(parent) loader = QUiLoader() _file = QtCore.QFile(self.ui) _file.open(QtCore.QFile.ReadOnly) self.widget = loader.load(_file, parent) _file.close() self.setCentralWidget(self.widget)class Window(WrapperWindow): ui = &#x27;PATH_TO_UI_FILE&#x27; def __init__(self, parent=None): super(Window, self).__init__(parent) self.setCentralWidget(self.widget) # now we can access ui element like so self.widget.uiBtn.clicked.connect(self.someFunc) Reference Reddit - PyQt5 - Why do I get an Empty Window? Stack Overflow - pycharm use pyside2 TypeError: ‚ÄòNoneType‚Äô object is not callable","categories":[{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"}],"tags":[{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]}],"categories":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/categories/general/"},{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/categories/unreal/"},{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/categories/windows/"},{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/categories/maya/"},{"name":"qt","slug":"qt","permalink":"https://www.xingyulei.com/categories/qt/"},{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/categories/unity/"},{"name":"graphics","slug":"graphics","permalink":"https://www.xingyulei.com/categories/graphics/"}],"tags":[{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"blueprint","slug":"blueprint","permalink":"https://www.xingyulei.com/tags/blueprint/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"},{"name":"design","slug":"design","permalink":"https://www.xingyulei.com/tags/design/"},{"name":"rendering","slug":"rendering","permalink":"https://www.xingyulei.com/tags/rendering/"},{"name":"sequencer","slug":"sequencer","permalink":"https://www.xingyulei.com/tags/sequencer/"},{"name":"animation","slug":"animation","permalink":"https://www.xingyulei.com/tags/animation/"},{"name":"threading","slug":"threading","permalink":"https://www.xingyulei.com/tags/threading/"},{"name":"style","slug":"style","permalink":"https://www.xingyulei.com/tags/style/"},{"name":"c#","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"},{"name":"math","slug":"math","permalink":"https://www.xingyulei.com/tags/math/"},{"name":"c++","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]}