<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech Art Learning</title>
  
  
  <link href="https://www.xingyulei.com/atom.xml" rel="self"/>
  
  <link href="https://www.xingyulei.com/"/>
  <updated>2021-10-26T20:24:12.161Z</updated>
  <id>https://www.xingyulei.com/</id>
  
  <author>
    <name>Xingyu Lei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Three Ways to Find PID and End Process in Python</title>
    <link href="https://www.xingyulei.com/post/py-end-process/"/>
    <id>https://www.xingyulei.com/post/py-end-process/</id>
    <published>2021-10-25T04:00:00.000Z</published>
    <updated>2021-10-26T20:24:12.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><p>Interacting with Windows shell to end process is very common,<br />there are many ways to do so, like through the traditional batch script</p><p>but to gain more flexibility, using python is probably a better idea.</p><ul><li><code>os.system</code> is not the most elegant way to use, and it is meant to be replaced by <code>subprocess</code></li><li><code>subprocess</code> comes with Python standard library and allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes</li><li><code>psutil</code> (python system and process utilities) is a <strong>cross-platform</strong> library for retrieving information on running processes and system utilization.<br />However, it is a third-party library</li></ul><hr /><h3 id="bare-minimum"><a class="markdownIt-Anchor" href="#bare-minimum"></a> Bare Minimum:</h3><p>the bare minimum command to kill process utilizes window’s <code>taskkill</code>;<br />which doesn’t matter if you use <code>os.system</code> or <code>subprocess</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PROCESS = <span class="string">&#x27;notepad.exe&#x27;</span></span><br><span class="line">STATUS = <span class="string">&#x27;running&#x27;</span>  <span class="comment"># running or not responding</span></span><br><span class="line">CMD = <span class="string">r&#x27;taskkill /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; &#x27;</span>.<span class="built_in">format</span>(PROCESS, STATUS)</span><br><span class="line"></span><br><span class="line">os.system(CMD)</span><br></pre></td></tr></table></figure><h3 id="using-ossystem"><a class="markdownIt-Anchor" href="#using-ossystem"></a> Using <code>os.system</code></h3><p>Now consider a more flexible case where you want to gather information about the processes like its PID,<br />and then proceed on ending the process. One of the downside of window shell command is that the output<br />can’t be passed on to other command, the output is just text. Therefore, we<br />output the text to a csv file which we will later process.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">PROCESS = <span class="string">&#x27;notepad.exe&#x27;</span></span><br><span class="line">STATUS = <span class="string">&#x27;running&#x27;</span>  <span class="comment"># running or not responding</span></span><br><span class="line">TMP = <span class="string">r&#x27;&#123;&#125;/Desktop/tmp.txt&#x27;</span>.<span class="built_in">format</span>(os.environ[<span class="string">&#x27;userprofile&#x27;</span>])</span><br><span class="line">CMD = <span class="string">r&#x27;tasklist /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; /fo &quot;csv&quot; &gt; &quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(PROCESS, STATUS, TMP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output as csv format</span></span><br><span class="line">os.system(CMD)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(TMP, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> temp:</span><br><span class="line">reader = csv.reader(temp)</span><br><span class="line">header = <span class="built_in">next</span>(reader)</span><br><span class="line">pids = [<span class="built_in">int</span>(row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill process</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> pids:</span><br><span class="line">os.kill(pid, signal.SIGTERM) <span class="comment"># or signal.SIGKILL </span></span><br><span class="line">print(<span class="string">&#x27;killed process with pid: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pid))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(TMP):</span><br><span class="line">  os.remove(TMP)</span><br></pre></td></tr></table></figure><h3 id="using-subprocess"><a class="markdownIt-Anchor" href="#using-subprocess"></a> Using <code>subprocess</code></h3><p>With <code>subprocess</code>, we no longer need to create a temp file to store the output.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">PROCESS = <span class="string">&#x27;notepad.exe&#x27;</span></span><br><span class="line">STATUS = <span class="string">&#x27;running&#x27;</span>  <span class="comment"># running or not responding</span></span><br><span class="line">CMD = <span class="string">r&#x27;tasklist /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; /fo &quot;csv&quot;&#x27;</span>.<span class="built_in">format</span>(PROCESS, STATUS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output as csv format</span></span><br><span class="line">proc = subprocess.Popen(CMD, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get pids of the process in selected status</span></span><br><span class="line">reader = csv.reader(proc.stdout)</span><br><span class="line">header = <span class="built_in">next</span>(reader)</span><br><span class="line">pids = [<span class="built_in">int</span>(row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill process</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> pids:</span><br><span class="line">os.kill(pid, signal.SIGTERM) <span class="comment"># or signal.SIGKILL </span></span><br><span class="line">print(<span class="string">&#x27;killed process with pid: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pid))</span><br><span class="line"></span><br><span class="line">proc.wait()</span><br></pre></td></tr></table></figure><h3 id="using-psutil"><a class="markdownIt-Anchor" href="#using-psutil"></a> Using <code>psutil</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">PROGRAM = <span class="string">r&#x27;maya.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findProcess</span>(<span class="params">name</span>):</span>    </span><br><span class="line">    procs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Iterate over the all the running process</span></span><br><span class="line">    <span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> proc.name() == name <span class="keyword">and</span> proc.status() == psutil.STATUS_RUNNING:</span><br><span class="line">            pid = proc.pid            </span><br><span class="line">                procs.append(pid)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> procs</span><br><span class="line"></span><br><span class="line">processes = findProcess(PROGRAM)</span><br></pre></td></tr></table></figure><p>we can find process start time by using</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">startTime = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(proc.create_time()))</span><br></pre></td></tr></table></figure><p>to kill process, either <code>kill()</code> or <code>terminate()</code> will work<br />respectfully, <code>SIGKILL</code> or <code>SIGTERM</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = psutil.Process(PID)</span><br><span class="line">p.terminate()</span><br><span class="line">p.kill()</span><br><span class="line">p.wait</span><br></pre></td></tr></table></figure><h3 id="bonus-find-open-port-for-socket-connection"><a class="markdownIt-Anchor" href="#bonus-find-open-port-for-socket-connection"></a> Bonus: Find Open Port (for socket connection)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process = psutil.Process(pid=PID)</span><br><span class="line"></span><br><span class="line">connections = process.connections(kind=<span class="string">&#x27;tcp4&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> connections <span class="keyword">if</span> x.status == psutil.CONN_LISTEN]:</span><br><span class="line">    <span class="comment"># gets the port number</span></span><br><span class="line">    print(<span class="string">&#x27;port opened: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c.laddr[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="bonus-finding-main-window-title"><a class="markdownIt-Anchor" href="#bonus-finding-main-window-title"></a> Bonus: Finding Main Window Title</h3><p><code>ctypes</code> is a foreign function library for python, resulting a not-pythonic function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">EnumWindows = ctypes.windll.user32.EnumWindows</span><br><span class="line">EnumWindowsProc = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_int))</span><br><span class="line">GetWindowText = ctypes.windll.user32.GetWindowTextW</span><br><span class="line">GetWindowTextLength = ctypes.windll.user32.GetWindowTextLengthW</span><br><span class="line">GetWindowProcessId = ctypes.windll.user32.GetWindowThreadProcessId</span><br><span class="line">IsWindowVisible = ctypes.windll.user32.IsWindowVisible</span><br><span class="line"></span><br><span class="line">winMapping = <span class="built_in">dict</span>()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_maya_window</span>(<span class="params">hwnd, lParam</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> IsWindowVisible(hwnd):</span><br><span class="line">        <span class="comment"># window name</span></span><br><span class="line">        length = GetWindowTextLength(hwnd)</span><br><span class="line">        buff = ctypes.create_unicode_buffer(length + <span class="number">1</span>)</span><br><span class="line">        GetWindowText(hwnd, buff, length + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Autodesk Maya&#x27;</span> <span class="keyword">in</span> buff.value:</span><br><span class="line">            <span class="comment"># pid</span></span><br><span class="line">            pid = ctypes.wintypes.DWORD()</span><br><span class="line">            GetWindowProcessId(hwnd, ctypes.byref(pid))</span><br><span class="line">            winMapping[<span class="built_in">int</span>(pid.value)] = buff.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>to query the window title:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EnumWindows(EnumWindowsProc(find_maya_window), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> winMapping.items():</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tasklist">Microsoft Doc - tasklist</a></p><p><a href="https://thispointer.com/python-check-if-a-process-is-running-by-name-and-find-its-process-id-pid/">ThisPointer - Python : Check if a process is running by name and find it’s Process ID (PID)</a></p><p><a href="https://sjohannes.wordpress.com/2012/03/23/win32-python-getting-all-window-titles/">Johannes Sasongko - Win32 Python: Getting all window titles</a></p><p><a href="https://stackoverflow.com/questions/10266281/obtain-active-window-using-python">Stack overflow - Obtain Active window using Python</a></p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/">Microsoft Docs - winuser.h header</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h3&gt;
&lt;p&gt;Interacting with Windows shell to end process is very common,&lt;b</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>State Machine in Unity Scripting API</title>
    <link href="https://www.xingyulei.com/post/unity-api-statemachine/"/>
    <id>https://www.xingyulei.com/post/unity-api-statemachine/</id>
    <published>2021-08-29T04:00:00.000Z</published>
    <updated>2021-09-28T02:04:39.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>This post is not about state machine basic, rather how we would setup/access state machine parameters.<br />There is a higher level <code>Animator</code> class to access a part of the animator features, but we need to use<br />Unity’s <code>Animations</code> package in order to dive deeper.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor.Animations;</span><br></pre></td></tr></table></figure><p>There’s a lot of parts composing Unity’s Animator: Layer, Parameter, State machine (and everything inside it<br />including states of different kind, transition between states), there are of course multiple parameters inside a single state.</p><p>The examples in this post is only about accessing states and state machines, as the rest is translatable.</p><p>We start from the root: Base layer, if you think about it, a layer is essentially a state machine.<br />Inside this root state machine are sets of states (including blend tree/state/sub-state machine)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getting the base layer state machine</span></span><br><span class="line">AnimatorStateMachine rootStateMachine = controller.layers[<span class="number">0</span>].stateMachine;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HuSyYGs.png" alt="base layer state machine" /></p><p>(Base Layer)</p><p>Next up, a very confusing part of the scripting process are the definition of<br /><code>AnimatorStateMachine</code> vs. <code>ChildAnimatorStateMachine</code> and <code>AnimatorState</code> vs. <code>ChildAnimatorState</code>.<br />I really wish Unity provides internal ways to cast these to each other.</p><p>To summarize:</p><ul><li><p><code>ChildAnimatorStateMachine[]</code> and <code>ChildAnimatorState[]</code> is used in conjunction with Arrays as <code>AnimatorStateMachine.states</code> and<br /><code>AnimatorStateMachine.stateMachines</code> will return the previous mentioned type.</p></li><li><p>Instead of casting, they have an internal property <code>ChildAnimatorStateMachine.stateMachine</code> and <code>ChildAnimatorState.state</code> which<br />respectively returns <code>AnimatorStateMachine</code> and <code>AnimatorState</code> type object</p></li></ul><h3 id="states"><a class="markdownIt-Anchor" href="#states"></a> States</h3><p>All states (state or. state with blendtree inside)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ChildAnimatorState[] childStates = rootStateMachine.states;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> childState <span class="keyword">in</span> childStates)</span><br><span class="line">&#123;</span><br><span class="line">    AnimatorState state = childState.state;</span><br><span class="line">    print(state.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// state with blendtree</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> blendTree = (BlendTree)state.motion;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> child <span class="keyword">in</span> blendTree.children)</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">&quot;\t&quot;</span> + child.motion.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// simple state</span></span><br><span class="line">    catch</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;\t&quot;</span> + state.motion.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QbLtx2O.png" alt="simple state" /></p><p>(Simple state only contains a single clip)</p><p><img src="https://i.imgur.com/vQMjJ5z.png" alt="state with blendtree" /></p><p>(BlendTree nested in a state)</p><h3 id="sub-state-machine"><a class="markdownIt-Anchor" href="#sub-state-machine"></a> Sub-state machine</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ChildAnimatorStateMachine[] childSubStateMachines = rootStateMachine.stateMachines;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> childSubStateMachine <span class="keyword">in</span> childSubStateMachines)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Convert `ChildAnimatorStateMachine` to `AnimatorStateMachine`</span></span><br><span class="line">    AnimatorStateMachine subStateMachine = childSubStateMachine.stateMachine;</span><br><span class="line">    print(subStateMachine.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all states in idle sub state machine</span></span><br><span class="line">    ChildAnimatorState[] states = subStateMachine.states;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> childState <span class="keyword">in</span> states)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;\t&quot;</span> + childState.state.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/j6IoXLr.png" alt="sub state machine" /></p><p>(Essentially, another sub layer of state machine)</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://docs.unity3d.com/Manual/StateMachineBasics.html">Unity Manual - State Machine Basics</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Animations.AnimatorStateMachine.html">Unity Scripting API - AnimatorStateMachine</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Animator.Play.html">Unity Scripting API - Animator.Play</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;This post is not about state machine basic</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="c#" scheme="https://www.xingyulei.com/tags/c/"/>
    
    <category term="unity" scheme="https://www.xingyulei.com/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>How to Resize QPixmap</title>
    <link href="https://www.xingyulei.com/post/qt-pixmap-scale/"/>
    <id>https://www.xingyulei.com/post/qt-pixmap-scale/</id>
    <published>2021-08-22T04:00:00.000Z</published>
    <updated>2021-09-01T22:57:54.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><p>During my attempts to create custom alignment push buttons, I encountered an issue with icon having<br />jagged looking (even if with low resolution).</p><p>I use a custom <code>paintEvent()</code> drawing <code>QPixmap</code>, and this happens when I use <code>scaled()</code> to resize my pixmap.</p><p>I noticed the icon does not have the jagged look with the built-in <code>setIcon()</code> and <code>setIconSize</code> in<br /><code>QPushButton</code>. So I know there’s some wrong with my approach.</p><h3 id="the-test"><a class="markdownIt-Anchor" href="#the-test"></a> The Test</h3><p>To really show out the difference, I first reduce the resolution of my image.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">low_rez = QtCore.QSize(<span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">high_rez = QtCore.QSize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">pixmap = QtGui.QPixmap(path)</span><br><span class="line"></span><br><span class="line">pixmap = pixmap.scaled(low_rez)</span><br></pre></td></tr></table></figure><p>I then increase the resolution back to normal. The default scale uses <code>FastTransformation</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pixmap = pixmap.scaled(high_rez)</span><br></pre></td></tr></table></figure><p>This is the result:<br /><img src="https://imgur.com/8KiYjlW.png" alt="pixmap-not-smooth" /></p><h3 id="the-solution"><a class="markdownIt-Anchor" href="#the-solution"></a> The Solution</h3><p>I’ve searched many forums and people were all saying: enable the <code>SmoothTransformation</code>, I tried but didn’t work.</p><p>Later on I found out that the Qt translation to Python has a mis-match keyword argument:<br />so instead of <code>transformMode=Qt.SmoothTransformation</code>, it should actually be <code>mode=Qt.SmoothTransformation</code></p><p>So here’s the solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pixmap = pixmap.scaled(</span><br><span class="line">    high_rez,</span><br><span class="line">    aspectRatioMode=QtCore.Qt.KeepAspectRatio,</span><br><span class="line">    mode=QtCore.Qt.SmoothTransformation</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>and result:<br /><img src="https://imgur.com/TIjyqkm.png" alt="pixmap-smooth" /></p><h3 id="extra"><a class="markdownIt-Anchor" href="#extra"></a> Extra</h3><p>I also found post saying it might be some settings with the <code>QPainter</code>, but it is not the issue for me.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">painter = QtGui.QPainter(self)</span><br><span class="line">painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class="literal">True</span>)</span><br><span class="line">painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, <span class="literal">True</span>)</span><br><span class="line">painter.drawPixmap(self.pixmap)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://doc.qt.io/qt-5/qpixmap.html">https://doc.qt.io/qt-5/qpixmap.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h3&gt;
&lt;p&gt;During my attempts to create custom alignment push buttons, I e</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Left Align Icon, Center Align Text (Python)</title>
    <link href="https://www.xingyulei.com/post/qt-button-alignment/"/>
    <id>https://www.xingyulei.com/post/qt-button-alignment/</id>
    <published>2021-08-21T04:00:00.000Z</published>
    <updated>2021-09-01T22:57:54.405Z</updated>
    
    <content type="html"><![CDATA[<p>I recently needed to display a series of buttons for my shelf tool, the problem I’m having with this is that<br />although every button has an icon and text label, they are displayed as different width. Using <code>center-align</code><br />made it look not uniform.</p><p>Should I go with <code>left-align</code>? Well, there are buttons with relatively longer label and some with shorter ones,<br />so it doesn’t look nice either with empty spaces on the right side.</p><p>So the solution is obvious, separate the alignment of the icon and the label: the icon stays <code>left-align</code> to<br />give a clear sign of broader, and the label would be <code>center-align</code> to make the width look uniform.</p><p><img src="https://i.imgur.com/dMOZpkH.jpg" alt="three-alignment-side-by-side" /><br />(Left: default center align, Center: left align, Right: custom align)</p><p>In the following section, I will demonstrate three methods of achieving this custom alignment effect:</p><p><img src="https://imgur.com/3G6fmVN.png" alt="push-button-alignment" /></p><h3 id="overriding-qpushbutton-paintevent"><a class="markdownIt-Anchor" href="#overriding-qpushbutton-paintevent"></a> Overriding QPushButton <code>paintEvent</code></h3><p>Create a subclass from QPushButton called MyButton:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span>(<span class="params">QtWidgets.QPushButton</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyButton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPixmap</span>(<span class="params">self, pixmap</span>):</span></span><br><span class="line">        self.pixmap = pixmap</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sizeHint</span>(<span class="params">self</span>):</span></span><br><span class="line">        parent_size = QtWidgets.QPushButton.sizeHint(self)</span><br><span class="line">        <span class="keyword">return</span> QtCore.QSize(parent_size.width() + self.pixmap.width(), <span class="built_in">max</span>(parent_size.height(), self.pixmap.height()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        QtWidgets.QPushButton.paintEvent(self, event)</span><br><span class="line"></span><br><span class="line">        pos_x = <span class="number">5</span>  <span class="comment"># hardcoded horizontal margin</span></span><br><span class="line">        pos_y = (self.height() - self.pixmap.height()) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        painter = QtGui.QPainter(self)</span><br><span class="line">        painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class="literal">True</span>)</span><br><span class="line">        painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, <span class="literal">True</span>)</span><br><span class="line">        painter.drawPixmap(pos_x, pos_y, self.pixmap)</span><br></pre></td></tr></table></figure><p>With this method, we no longer use QIcon, we use pixmap instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUI</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MethodTwo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        pb = MyButton(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        path = <span class="string">r&quot;xxx&quot;</span></span><br><span class="line">        pixmap = QtGui.QPixmap(path).scaled(<span class="number">40</span>, <span class="number">40</span>, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)</span><br><span class="line">        pb.setPixmap(pixmap)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(pb)</span><br><span class="line">        self.setLayout(layout)  </span><br></pre></td></tr></table></figure><h3 id="custom-layout-inside-pushbutton"><a class="markdownIt-Anchor" href="#custom-layout-inside-pushbutton"></a> Custom layout inside pushbutton</h3><p>Remember to send setText signals to textLabel instead of pushButton since this is label within push button’s layout</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUI</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MethodThree, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        pb = QtWidgets.QPushButton()</span><br><span class="line"></span><br><span class="line">        name = <span class="string">&quot;SP_MessageBoxCritical&quot;</span></span><br><span class="line">        icon = self.style().standardIcon(<span class="built_in">getattr</span>(QtWidgets.QStyle, name))</span><br><span class="line">        pb.setIcon(icon)</span><br><span class="line"></span><br><span class="line">        pb.setStyleSheet(<span class="string">&#x27;text-align: left;&#x27;</span>)</span><br><span class="line">        pb.setLayout(QtWidgets.QGridLayout())</span><br><span class="line">        </span><br><span class="line">        label = QtWidgets.QLabel(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)</span><br><span class="line">        label.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents, <span class="number">1</span>)</span><br><span class="line">        pb_layout = pb.layout()</span><br><span class="line">        pb_layout.addWidget(label)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(pb)</span><br><span class="line">        self.setLayout(layout)</span><br></pre></td></tr></table></figure><h3 id="use-qproxystyle"><a class="markdownIt-Anchor" href="#use-qproxystyle"></a> Use QProxyStyle</h3><p>I haven’t personally test it because I’m using a custom python Qt binding that doesn’t have QProxyStyle included</p><p>but it’s worth putting it here in case someone is able to try it</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyStyle</span>(<span class="params">QtWidgets.QProxyStyle</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawControl</span>(<span class="params">self, element, option, painter, widget=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> element == QtWidgets.QStyle.CE_PushButtonLabel:</span><br><span class="line">            icon = QtGui.QIcon(option.icon)</span><br><span class="line">            option.icon = QtGui.QIcon()</span><br><span class="line">        <span class="built_in">super</span>(ProxyStyle, self).drawControl(element, option, painter, widget)</span><br><span class="line">        <span class="keyword">if</span> element == QtWidgets.QStyle.CE_PushButtonLabel:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> icon.isNull():</span><br><span class="line">                iconSpacing = <span class="number">4</span></span><br><span class="line">                mode = (</span><br><span class="line">                    QtGui.QIcon.Normal</span><br><span class="line">                    <span class="keyword">if</span> option.state &amp; QtWidgets.QStyle.State_Enabled</span><br><span class="line">                    <span class="keyword">else</span> QtGui.QIcon.Disabled</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    mode == QtGui.QIcon.Normal</span><br><span class="line">                    <span class="keyword">and</span> option.state &amp; QtWidgets.QStyle.State_HasFocus</span><br><span class="line">                ):</span><br><span class="line">                    mode = QtGui.QIcon.Active</span><br><span class="line">                state = QtGui.QIcon.Off</span><br><span class="line">                <span class="keyword">if</span> option.state &amp; QtWidgets.QStyle.State_On:</span><br><span class="line">                    state = QtGui.QIcon.On</span><br><span class="line">                window = widget.window().windowHandle() <span class="keyword">if</span> widget <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                pixmap = icon.pixmap(window, option.iconSize, mode, state)</span><br><span class="line">                pixmapWidth = pixmap.width() / pixmap.devicePixelRatio()</span><br><span class="line">                pixmapHeight = pixmap.height() / pixmap.devicePixelRatio()</span><br><span class="line">                iconRect = QtCore.QRect(</span><br><span class="line">                    QtCore.QPoint(), QtCore.QSize(pixmapWidth, pixmapHeight)</span><br><span class="line">                )</span><br><span class="line">                iconRect.moveCenter(option.rect.center())</span><br><span class="line">                iconRect.moveLeft(option.rect.left() + iconSpacing)</span><br><span class="line">                iconRect = self.visualRect(option.direction, option.rect, iconRect)</span><br><span class="line">                iconRect.translate(</span><br><span class="line">                    self.proxy().pixelMetric(</span><br><span class="line">                        QtWidgets.QStyle.PM_ButtonShiftHorizontal, option, widget</span><br><span class="line">                    ),</span><br><span class="line">                    self.proxy().pixelMetric(</span><br><span class="line">                        QtWidgets.QStyle.PM_ButtonShiftVertical, option, widget</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">                painter.drawPixmap(iconRect, pixmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    app.setStyle(<span class="string">&#x27;fusion&#x27;</span>)</span><br><span class="line">    proxy_style = ProxyStyle(app.style())</span><br><span class="line">    app.setStyle(proxy_style)</span><br><span class="line"></span><br><span class="line">    w = QtWidgets.QWidget()</span><br><span class="line">    lay = QtWidgets.QVBoxLayout(w)</span><br><span class="line">    icons = [</span><br><span class="line">        app.style().standardIcon(standardIcon)</span><br><span class="line">        <span class="keyword">for</span> standardIcon <span class="keyword">in</span> (</span><br><span class="line">            QtWidgets.QStyle.SP_MediaPlay,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaPause,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaSeekBackward,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaSeekForward,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> text, icon <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;Play Pause Backward Forward&quot;</span>.split(), (icons)):</span><br><span class="line">        button = QtWidgets.QPushButton(text)</span><br><span class="line">        button.setIcon(icon)</span><br><span class="line">        lay.addWidget(button)</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/44091339/qpushbutton-icon-aligned-left-with-text-centered">https://stackoverflow.com/questions/44091339/qpushbutton-icon-aligned-left-with-text-centered</a></p><p><a href="https://stackoverflow.com/questions/56129402/qpushbutton-icon-left-alignment-text-center-alignment">https://stackoverflow.com/questions/56129402/qpushbutton-icon-left-alignment-text-center-alignment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I recently needed to display a series of buttons for my shelf tool, the problem I’m having with this is that&lt;br /&gt;
although every button </summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QPushButton Detect Double Click</title>
    <link href="https://www.xingyulei.com/post/qt-detect-click/"/>
    <id>https://www.xingyulei.com/post/qt-detect-click/</id>
    <published>2021-08-08T04:00:00.000Z</published>
    <updated>2021-09-01T22:57:54.419Z</updated>
    
    <content type="html"><![CDATA[<p>It’s not as easy as it looks</p><h3 id="built-in-double-click"><a class="markdownIt-Anchor" href="#built-in-double-click"></a> Built-in Double Click</h3><p>Hey, I thought this would be easy, since Qt offers a built-in event <code>QEvent.MouseButtonDblClick</code>.<br />But the issue is it couldn’t distinguish a single click vs. a double click.</p><p>Which means, a single click event will also be called if double clicked.</p><p>Solution?</p><h3 id="custom-click-detection-with-timeout"><a class="markdownIt-Anchor" href="#custom-click-detection-with-timeout"></a> Custom click detection with <code>timeout</code></h3><p>Subclass QPushButton and override <code>eventFilter()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span>(<span class="params">QtWidgets.QPushButton</span>):</span></span><br><span class="line">    right_clicked = QtCore.Signal()</span><br><span class="line">    left_clicked = QtCore.Signal()</span><br><span class="line">    double_clicked = QtCore.Signal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyButton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        self.timer = QtCore.QTimer()</span><br><span class="line">        self.timer.setSingleShot(<span class="literal">True</span>)</span><br><span class="line">        self.timer.setInterval(<span class="number">250</span>)</span><br><span class="line">        self.timer.timeout.connect(self.timeout)</span><br><span class="line"></span><br><span class="line">        self.is_double = <span class="literal">False</span></span><br><span class="line">        self.is_left_click = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.installEventFilter(self)</span><br><span class="line"></span><br><span class="line">        self.double_clicked.connect(self.double_click_event)</span><br><span class="line">        self.left_clicked.connect(self.left_click_event)</span><br><span class="line">        self.right_clicked.connect(self.right_click_event)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eventFilter</span>(<span class="params">self, obj, event</span>):</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span>() == QtCore.QEvent.MouseButtonPress:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.timer.isActive():</span><br><span class="line">                self.timer.start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> event.button() == QtCore.Qt.LeftButton:</span><br><span class="line">                self.is_left_click = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.is_left_click = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span>() == QtCore.QEvent.MouseButtonDblClick:</span><br><span class="line">            self.is_double = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_double:</span><br><span class="line">            self.double_clicked.emit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.is_left_click:</span><br><span class="line">                self.left_clicked.emit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.right_clicked.emit()</span><br><span class="line"></span><br><span class="line">        self.is_double = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_click_event</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;left clicked&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_click_event</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;right clicked&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">double_click_event</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;double clicked&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.qtcentre.org/threads/7858-Double-Click-Capturing">https://www.qtcentre.org/threads/7858-Double-Click-Capturing</a></p><p><a href="https://stackoverflow.com/questions/19247436/pyqt-mouse-mousebuttondblclick-event">https://stackoverflow.com/questions/19247436/pyqt-mouse-mousebuttondblclick-event</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It’s not as easy as it looks&lt;/p&gt;
&lt;h3 id=&quot;built-in-double-click&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#built-in-double-click&quot;&gt;&lt;/a&gt; Built-in </summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Constant in Python</title>
    <link href="https://www.xingyulei.com/post/py-constant/"/>
    <id>https://www.xingyulei.com/post/py-constant/</id>
    <published>2021-07-16T04:00:00.000Z</published>
    <updated>2021-10-27T02:56:33.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>I recently saw some codes written by another tech artist, and he made a module called <code>constant.py</code></p><p>In it stored all the global variables and all the import modules, something like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#constant.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_a</span><br><span class="line"><span class="keyword">import</span> module_b</span><br><span class="line"><span class="keyword">import</span> module_c</span><br><span class="line"></span><br><span class="line">GLOBAL_VAR_MAX = <span class="number">50</span></span><br><span class="line">GLOBAL_VAR_MIN = <span class="number">10</span></span><br><span class="line">GLOBAL_VAR_TIMEOUT = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">GLOBAL_NAME = <span class="string">r&#x27;random name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or even</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constant</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    gravity = <span class="number">9.8</span></span><br><span class="line">    is_true = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>With this setup, all the module in the same project would just import the <code>constant</code> module and have access to<br />all the imports and variable. I thought this was a neat way to make code cleaner by getting rid of all the duplicated imports<br />that might happened.</p><p>But turns out that there’s a lot of people against doing things like this.</p><h3 id="constant-in-python"><a class="markdownIt-Anchor" href="#constant-in-python"></a> Constant in Python</h3><p>the root level where the constant lives actually matters:</p><p>based on the style guide: Constants are usually defined on a <em>module</em> level and written in all capital letters with underscores separating words. Examples include MAX_OVERFLOW and TOTAL.</p><p>also suggestions have mentioned to refrain from using <em>class</em> as it could be instantiated which makes no sense. (maybe a static class in another language would work)</p><h4 id="separate-module-for-import"><a class="markdownIt-Anchor" href="#separate-module-for-import"></a> Separate module for import</h4><p>Despite the root level of constant this, is it a good practice to have a separate module for import?</p><p>No, unless there’s a valid reason for all those modules to be collected under a common name. If not, then they should<br />be kept separately. This is due to documentation, as other people open your file, they don’t get information on<br />what is getting imported (what is needed)</p><h4 id="same-module-import-multiple-times"><a class="markdownIt-Anchor" href="#same-module-import-multiple-times"></a> Same module import multiple times</h4><p>So if multiple files are importing the same module separately, does python optimize the import?</p><p>Yes, python modules are considered as singletons, no matter how many times you import them they get initialized only once.<br />unless reload is being called</p><p>See my other <a href="/py-import/index.html">blog</a> in regards to python import</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/5027400/constants-in-python-at-the-root-of-the-module-or-in-a-namespace-inside-the-modu">Stack Overflow - constants in Python: at the root of the module or in a namespace inside the module?</a></p><p><a href="https://stackoverflow.com/questions/40419582/in-python-do-you-need-to-import-modules-in-each-split-file">Stack Overflow - in python, do you need to import modules in each split file?</a></p><p><a href="https://stackoverflow.com/questions/6206204/python-importing-an-import-file">Stack Overflow - Python: Importing an “import file”</a></p><p><a href="https://stackoverflow.com/questions/296036/does-python-optimize-modules-when-they-are-imported-multiple-times">Stack Overflow - Does python optimize modules when they are imported multiple times?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;I recently saw some codes written by anoth</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="style" scheme="https://www.xingyulei.com/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>Qt Connect Signal in For Loop</title>
    <link href="https://www.xingyulei.com/post/qt-signal-in-for-loop/"/>
    <id>https://www.xingyulei.com/post/qt-signal-in-for-loop/</id>
    <published>2021-04-17T04:00:00.000Z</published>
    <updated>2021-10-11T13:35:11.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>We often needs to create ui elements on the fly, sometimes we do it in something like a for loop.<br />An example would be creating a series of <code>QPushButton</code> and connect them to a function through<br />different argument values. A example is shown below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Demo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            pushbutton = QtWidgets.QPushButton(<span class="string">&#x27;button &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(index))</span><br><span class="line">            pushbutton.clicked.connect(<span class="keyword">lambda</span>: self.trigger(index))</span><br><span class="line">            layout.addWidget(pushbutton)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trigger</span>(<span class="params">index</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;button &#123;&#125; clicked&#x27;</span>.<span class="built_in">format</span>(index))</span><br></pre></td></tr></table></figure><p>Here I created six <code>QPushButton</code> and when I click them it should output which button is being clicked. But if you<br />run this script and try to click each button it will always output “button 5 clicked” (aka, the last button).<br />It is safely to assume that the argument passed during the for loop always result in the last index.</p><h3 id="explanation"><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>Based on a kind response from stackoverflow: lambdas do <strong>not</strong> store the value of button when it is defined.<br />The code describing the lambda function is parsed and compiled but not executed until you actually<br />call the lambda. Therefore, when a button is clicked, the current value of that variable is used (the last index).</p><p>What’s the solution?</p><h3 id="lambda-with-solid-variable"><a class="markdownIt-Anchor" href="#lambda-with-solid-variable"></a> Lambda with solid variable</h3><p>Passing solid variable to the lambda</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pushbutton.clicked.connect(<span class="keyword">lambda</span> _, i=index: self.trigger(index=i))</span><br></pre></td></tr></table></figure><p>Note that we created another temporary variable before index as<br />the first argument passed in the lambda will always return as <code>False</code>.<br />Because Qt defines the signal <code>QAbstractButton.clicked</code> to take a single<br />argument with a default value of <code>False</code>. Since your lambda is handling that signal,<br />it gets called with <code>False</code>.</p><h3 id="partial-approach"><a class="markdownIt-Anchor" href="#partial-approach"></a> Partial approach</h3><p>Use <code>functools.partial</code> also works</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">pushbutton.clicked.connect(partial(self.trigger, index))</span><br></pre></td></tr></table></figure><p>Note that in some cases where wrappers are being used in <code>trigger</code> function, it could be trickier to use this as oppose to <code>lambda</code></p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/27953895/first-lambda-capture-of-local-variable-always-false">Stack Overflow - First lambda capture of local variable always False</a></p><p><a href="https://stackoverflow.com/questions/46300229/connecting-multiples-signal-slot-in-a-for-loop-in-pyqt">Stack Overflow - Connecting multiples signal/slot in a for loop in pyqt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;We often needs to create ui elements on th</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Template without UI file</title>
    <link href="https://www.xingyulei.com/post/qt-template-no-ui/"/>
    <id>https://www.xingyulei.com/post/qt-template-no-ui/</id>
    <published>2021-02-11T05:00:00.000Z</published>
    <updated>2021-10-18T22:25:23.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ui-module-without-ui-file"><a class="markdownIt-Anchor" href="#ui-module-without-ui-file"></a> UI Module without <code>.ui</code> file</h3><p>There is a different between inheriting from QWidget class vs QMainWindow</p><p>Inheriting from QWidget:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritQWidget</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(InheritQWidget, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        listWidget = QtWidgets.QListWidget()</span><br><span class="line">        <span class="comment">#treeWidget = QtWidgets.QTreeWidget()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># set</span></span><br><span class="line">        <span class="comment"># treeWidget.setParent(listWidget)</span></span><br><span class="line">        layout.addWidget(listWidget)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        listWidget.addItem(<span class="string">&#x27;item A&#x27;</span>)</span><br><span class="line">        listWidget.addItem(<span class="string">&#x27;item B&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Inheriting from QMainWindow</p><h2 id="-code1-"><a class="markdownIt-Anchor" href="#-code1-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritQMainWindow</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line">    <span class="comment"># Window inherits from QMainWindow the layout is already defined</span></span><br><span class="line">    <span class="comment"># to accommodate any toolbars or any other QMainWindow component</span></span><br><span class="line">    <span class="comment"># use the setCentralWidget() to accommodate this</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(InheritQMainWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        widget = QtWidgets.QWidget()</span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set</span></span><br><span class="line">        self.setCentralWidget(widget)</span><br><span class="line">        widget.setLayout(layout)</span><br><span class="line">        </span><br><span class="line">        label = QtWidgets.QLabel(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        layout.addWidget(label, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></h2><h3 id="custom-dialog"><a class="markdownIt-Anchor" href="#custom-dialog"></a> Custom Dialog</h3><p>Maya Main UI module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttrConnectWindow</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=getMainWindow(<span class="params"></span>)</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(AttrConnectWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>]</span><br><span class="line">        dialog = NamespaceEditDialog()</span><br><span class="line">        dialog.setNamespaceCBox(<span class="built_in">list</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># only when self.accept() is returned</span></span><br><span class="line">        <span class="comment"># need close event to return self.close()</span></span><br><span class="line">        <span class="keyword">if</span> dialog.exec_():</span><br><span class="line">            print(<span class="string">&#x27;accepted&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;not accepted&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        text = dialog.getText()</span><br><span class="line">        option = dialog.getCombo()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> text, option</span><br></pre></td></tr></table></figure><p>Dialog Module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamespaceEditDialog</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NamespaceEditDialog, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create widgets</span></span><br><span class="line">        self.namespaceCBox = QtWidgets.QComboBox()</span><br><span class="line">        self.namespaceEdit = QtWidgets.QLineEdit()</span><br><span class="line">        self.acceptButton = QtWidgets.QPushButton(<span class="string">&quot;Confirm&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create layout and add widgets</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        layout.addWidget(self.namespaceCBox, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.namespaceEdit, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(self.acceptButton, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set dialog layout</span></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        self.acceptButton.clicked.connect(self.onClickAccept)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClickAccept</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNamespaceEdit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.namespaceEdit.text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNamespaceCBox</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.namespaceCBox.currentText()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNamespaceCBox</span>(<span class="params">self, items</span>):</span></span><br><span class="line">        self.namespaceCBox.addItems(items)</span><br></pre></td></tr></table></figure><p>Sometimes you need a quick window to display some information,<br />but the built-in qt message boxes aren’t suitable for the job.</p><hr /><h3 id="custom-widget"><a class="markdownIt-Anchor" href="#custom-widget"></a> Custom Widget</h3><p>You can choose to create a widget class, but also for saving time, you can create<br />a temporary custom widget</p><p>example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWidget</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">    self.connectSignal()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connectSignal</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.someBtn.clicked.connect(self.openCustomWidget)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">openCustomWidget</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># initialize with a widget and a layout</span></span><br><span class="line">    self.customWidget = QtWidgets.QWidget()</span><br><span class="line">    layout = QtWidgets.QHBoxLayout(self.customWidget)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    self.customWidget.setWindowTitle(<span class="string">&#x27;Error Log&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set window display behavior</span></span><br><span class="line">    self.customWidget.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set window icon (using a built-in icon)</span></span><br><span class="line">    name = <span class="string">&quot;SP_MessageBoxCritical&quot;</span></span><br><span class="line">    style = self.customWidget.style()</span><br><span class="line">    icon = style.standardIcon(<span class="built_in">getattr</span>(QtWidgets.QStyle, name))</span><br><span class="line">    self.customWidget.setWindowIcon(icon)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add custom elements here</span></span><br><span class="line">    message = <span class="string">&quot;happy new year&quot;</span></span><br><span class="line">    errorLabel = QtWidgets.QLabel(messages)</span><br><span class="line">    scrollArea = QtWidgets.QScrollArea()</span><br><span class="line">    scrollArea.setWidgetResizable(<span class="literal">True</span>)</span><br><span class="line">    scrollArea.setWidget(errorLabel)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># finalize</span></span><br><span class="line">    layout.addWidget(scrollArea)</span><br><span class="line">    self.customWidget.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showWindow</span>():</span></span><br><span class="line">    win = MainWidget()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        win.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    win.setAttribute(QtCore.Qt.WA_DeleteOnClose)</span><br><span class="line">    win.show()</span><br></pre></td></tr></table></figure><p>Couple of things worth noting:</p><ol><li><p>correctly initialize the widget</p><p><code>self.customWidget = QtWidgets.QWidget()</code> will allow widget be child of the main window,<br />thus allow widget to close when main window is closed</p><p>so not <code>customWidget = QtWidgets.QWidget()</code> or <code>self.customWidget = QtWidgets.QWidget(self)</code></p></li><li><p>use <code>getattr</code> in combination with <code>QStyle</code> and name of the built-in icon</p></li><li><p>use <code>win.setAttribute(QtCore.Qt.WA_DeleteOnClose)</code> to make sure the child widget is killed<br />after main window is closed, because default close only hides window objects</p></li><li><p><code>self.customWidget.show()</code> is the core command to call it to display</p></li></ol><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.programiz.com/python-programming/methods/built-in/getattr">Programiz - Python getattr()</a></p><p><a href="https://forum.learnpyqt.com/t/are-there-any-built-in-qicons/185/2">GUIS - Q&amp;A: Are there any built-in QIcons?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ui-module-without-ui-file&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ui-module-without-ui-file&quot;&gt;&lt;/a&gt; UI Module without &lt;code&gt;.ui&lt;/code&gt; fi</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
    <category term="template" scheme="https://www.xingyulei.com/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>Qt Model View List Model</title>
    <link href="https://www.xingyulei.com/post/qt-mv-list/"/>
    <id>https://www.xingyulei.com/post/qt-mv-list/</id>
    <published>2021-02-07T05:00:00.000Z</published>
    <updated>2021-09-01T22:58:18.674Z</updated>
    
    <content type="html"><![CDATA[<p>The following example demonstrates how to create custom list model for<br />displaying list-like data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui, QtCore, QtWidgets</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaletteListModel</span>(<span class="params">QtCore.QAbstractListModel</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, colors=[], parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        QtCore.QAbstractListModel.__init__(self, parent)</span><br><span class="line">        self.__colors = colors</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">headerData</span>(<span class="params">self, section, orientation, role</span>):</span></span><br><span class="line">        <span class="comment"># orientation: indicates horizontal or vertical header</span></span><br><span class="line">        <span class="comment"># section:     indicates which index on the header</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class="line">            <span class="keyword">if</span> orientation == QtCore.Qt.Horizontal:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Palette&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Color &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(section+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rowCount</span>(<span class="params">self, parent</span>):</span></span><br><span class="line">        <span class="comment"># parent: are for tree view with hierarchical structure</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__colors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span>(<span class="params">self, index, role</span>):</span></span><br><span class="line">        <span class="comment"># display data for each index, of each data role</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.EditRole:</span><br><span class="line">            <span class="keyword">return</span> self.__colors[index.row()].name()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.ToolTipRole:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hex code: &quot;</span>+self.__colors[index.row()].name()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DecorationRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            value = self.__colors[row]</span><br><span class="line"></span><br><span class="line">            pixmap = QtGui.QPixmap(<span class="number">26</span>, <span class="number">26</span>)</span><br><span class="line">            pixmap.fill(value)</span><br><span class="line">            icon = QtGui.QIcon(pixmap)</span><br><span class="line">            <span class="keyword">return</span> icon</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            value = self.__colors[row]</span><br><span class="line">            <span class="keyword">return</span> value.name()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flags</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="keyword">return</span> QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setData</span>(<span class="params">self, index, value, role=QtCore.Qt.EditRole</span>):</span></span><br><span class="line">        <span class="comment"># set data for each index of the value, data role is set to edit role default</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.EditRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            color = QtGui.QColor(value)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> color.isValid():</span><br><span class="line">                self.__colors[row] = color</span><br><span class="line">                <span class="comment"># have to emit and dataChanged signal to sync with display</span></span><br><span class="line">                self.dataChanged.emit(index, index)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertRows</span>(<span class="params">self, position, rows, parent=QtCore.QModelIndex(<span class="params"></span>)</span>):</span></span><br><span class="line">        self.beginInsertRows(parent, position, position+rows-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            self.__colors.insert(position, QtGui.QColor(<span class="string">&quot;#000000&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.endInsertRows()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeRows</span>(<span class="params">self, position, rows, parent=QtCore.QModelIndex(<span class="params"></span>)</span>):</span></span><br><span class="line">        self.beginRemoveRows(parent, position, position+rows-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            value = self.__colors[position]</span><br><span class="line">            self.__colors.remove(value)</span><br><span class="line"></span><br><span class="line">        self.endRemoveRows()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    red = QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    green = QtGui.QColor(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    blue = QtGui.QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    model = PaletteListModel([red, green, blue])</span><br><span class="line">    model.insertRows(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    listView = QtWidgets.QListView()</span><br><span class="line">    listView.show()</span><br><span class="line">    listView.setModel(model)</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h3><ol><li><p>Since <code>parent</code> is used  for hierarchical structure, it is not set or set to null index<br />in this example.</p></li><li><p><code>index</code> is a <code>QModelIndex</code> instance to locate data in model</p></li><li><p>In <code>setData()</code>, make sure to add <code>self.dataChanged.emit(index, index)</code> for syncing data change</p></li><li><p>For inserting and removing rows</p><ol><li>always starts with <code>insertRows/removeRows</code> and<br />close with <code>endInsertRows/endRemoveRows</code> so that view and model is in-sync</li><li>no parent in list view so pass a null index: <code>QModelIndex()</code></li><li>essentially, it is modifying the <code>self.__colors</code> which is displayed in <code>data()</code></li></ol></li></ol><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> Source</h3><p><a href="https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo">https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo</a></p><p><a href="https://doc.qt.io/qtforpython-5.12/PySide2/QtCore/QModelIndex.html#PySide2.QtCore.QModelIndex">https://doc.qt.io/qtforpython-5.12/PySide2/QtCore/QModelIndex.html#PySide2.QtCore.QModelIndex</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following example demonstrates how to create custom list model for&lt;br /&gt;
displaying list-like data&lt;/p&gt;
&lt;figure class=&quot;highlight pytho</summary>
      
    
    
    
    <category term="model view programming" scheme="https://www.xingyulei.com/categories/model-view-programming/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Model View Intro</title>
    <link href="https://www.xingyulei.com/post/qt-mv-intro/"/>
    <id>https://www.xingyulei.com/post/qt-mv-intro/</id>
    <published>2021-02-06T05:00:00.000Z</published>
    <updated>2021-09-01T22:58:18.679Z</updated>
    
    <content type="html"><![CDATA[<p>The following example demonstrated how same data is accessed through a Model<br />and shared across Views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui, QtCore, QtWidgets</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># no QString needed in Qt5, use python string instead</span></span><br><span class="line">    data = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    listView = QtWidgets.QListView()</span><br><span class="line">    listView.show()</span><br><span class="line"></span><br><span class="line">    model = QtCore.QStringListModel(data)</span><br><span class="line">    listView.setModel(model)</span><br><span class="line"></span><br><span class="line">    combobox = QtWidgets.QComboBox()</span><br><span class="line">    combobox.setModel(model)</span><br><span class="line">    combobox.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>In Qt 5, the <code>QtCore.QStringList()</code> is replaced by python’s built-in <code>string</code> type</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qt 4</span></span><br><span class="line">data = QtCore.QStringList()</span><br><span class="line">data &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="string">&quot;four&quot;</span> &lt;&lt; <span class="string">&quot;five&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># qt 5</span></span><br><span class="line">data = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> Source</h3><p><a href="https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo">https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo</a><br /><a href="https://stackoverflow.com/questions/27757678/importerror-cannot-import-name-qstringlist-in-pyqt5">https://stackoverflow.com/questions/27757678/importerror-cannot-import-name-qstringlist-in-pyqt5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following example demonstrated how same data is accessed through a Model&lt;br /&gt;
and shared across Views&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    <category term="model view programming" scheme="https://www.xingyulei.com/categories/model-view-programming/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Context Menu Template (Menu, Submenu and Action)</title>
    <link href="https://www.xingyulei.com/post/qt-template-context-menu/"/>
    <id>https://www.xingyulei.com/post/qt-template-context-menu/</id>
    <published>2021-02-05T05:00:00.000Z</published>
    <updated>2021-10-14T01:44:28.516Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Demo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        self.widget = QtWidgets.QListWidget()</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.widget)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.widget.addItem(<span class="string">&#x27;item A&#x27;</span>)</span><br><span class="line">        self.widget.addItem(<span class="string">&#x27;item B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.widget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)</span><br><span class="line">        self.widget.customContextMenuRequested.connect(self.openContextMenu)</span><br><span class="line"></span><br><span class="line">        self.widget.itemClicked.connect(<span class="keyword">lambda</span> item: self.printThings(item))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openContextMenu</span>(<span class="params">self</span>):</span></span><br><span class="line">        contextMenu = QtWidgets.QMenu()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Enable options when only certain number of row is selected (typically one)</span></span><br><span class="line">        selectedIndexes = <span class="built_in">list</span>(</span><br><span class="line">            <span class="built_in">set</span>([item.row() <span class="keyword">for</span> item <span class="keyword">in</span> self.widget.selectedIndexes()]))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(selectedIndexes) == <span class="number">1</span>:</span><br><span class="line">            item = self.widget.currentItem()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># menu option</span></span><br><span class="line">            functionAction = contextMenu.addAction(<span class="string">&#x27;Menu Text go here&#x27;</span>)</span><br><span class="line">            functionAction.triggered.connect(</span><br><span class="line">                <span class="keyword">lambda</span>: self.execFunctionWithArgs(item))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># menu option with sub-menu</span></span><br><span class="line">            functionMenu = contextMenu.addMenu(<span class="string">&#x27;More options here!&#x27;</span>)</span><br><span class="line">            submenu = functionMenu.addAction(<span class="string">&#x27;Sub Menu here&#x27;</span>)</span><br><span class="line">            submenu.triggered.connect(<span class="keyword">lambda</span>: self.execFunctionWithArgs(item))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            items = self.widget.selectedItems()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Enable options for other senarios</span></span><br><span class="line">        anotherAction = contextMenu.addAction(<span class="string">&#x27;Menu Text go here&#x27;</span>)</span><br><span class="line">        anotherAction.triggered.connect(self.execFunction)</span><br><span class="line"></span><br><span class="line">        cursor = QtGui.QCursor()</span><br><span class="line">        contextMenu.exec_(cursor.pos())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execFunctionWithArgs</span>(<span class="params">self, argument</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execFunction</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printThings</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/13799033/how-to-add-submenu-in-qt">https://stackoverflow.com/questions/13799033/how-to-add-submenu-in-qt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
    <category term="template" scheme="https://www.xingyulei.com/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>Error Handling in Python</title>
    <link href="https://www.xingyulei.com/post/py-error-handle/"/>
    <id>https://www.xingyulei.com/post/py-error-handle/</id>
    <published>2021-01-24T05:00:00.000Z</published>
    <updated>2021-10-12T01:47:20.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="finally-is-a-guarantee"><a class="markdownIt-Anchor" href="#finally-is-a-guarantee"></a> <code>finally</code> is a guarantee</h3><p><code>finally</code> will guarantee execution in <code>try-exception-finally</code> block even after</p><ul><li><code>return</code></li><li><code>raise</code></li></ul><hr /><h3 id="passing-on-exception-message"><a class="markdownIt-Anchor" href="#passing-on-exception-message"></a> Passing on Exception Message</h3><p>usually just <code>print(e)</code> is enough</p><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&#x27;message&#x27;</span>):</span><br><span class="line">            print(e.message)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(e)</span><br></pre></td></tr></table></figure></h2><h3 id="raise-error-to-parent"><a class="markdownIt-Anchor" href="#raise-error-to-parent"></a> <code>raise</code> error to parent</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">0</span>  <span class="comment"># this will raise an ZeroDivision Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># error handling</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>an error in a child function can be handled both from the child itself:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">child_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span>/<span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">&#x27;error being handled in the child&#x27;</span>)</span><br></pre></td></tr></table></figure><p>or the parent function that is calling it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parent_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        child_error()</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># error handling</span></span><br><span class="line">        print(<span class="string">&#x27;error being handled in the parent&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">child_error</span>():</span></span><br><span class="line">    output = <span class="number">10</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure><p>we can also use <code>raise</code> to pass the error to the parent function</p><p>the following example makes that whatever is calling <code>make_error()</code> getting<br />custom error and messages, useful for debugging</p><h2 id="-code4-"><a class="markdownIt-Anchor" href="#-code4-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        message = <span class="string">&#x27;this is a custom message&#x27;</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(message)</span><br></pre></td></tr></table></figure></h2><h3 id="catch-traceback-without-haulting"><a class="markdownIt-Anchor" href="#catch-traceback-without-haulting"></a> Catch Traceback without haulting</h3><p>Using maya’s built-in timer can be helpful measuring execution time when debugging,<br />we need a guarantee start and end thus using <code>finally</code>, and a wild error handling with <code>Exception</code>.<br />But doing so we can’t get the full stack traceback, unless we do something like this:</p><h2 id="-code5-"><a class="markdownIt-Anchor" href="#-code5-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line">cmds.timer(startTimer=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    make_error()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(traceback.format_exc())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cmds.timer(endTimer=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></h2><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/49262379/does-finally-always-execute-in-python">Stack Overflow - Does ‘finally’ always execute in Python?</a></p><p><a href="https://stackoverflow.com/questions/33239308/how-to-get-exception-message-in-python-properly">Stack Overflow - How to get exception message in Python properly</a></p><p><a href="https://stackoverflow.com/questions/3702675/how-to-catch-and-print-the-full-exception-traceback-without-halting-exiting-the">Stack Overflow - How to catch and print the full exception traceback without halting/exiting the program?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;finally-is-a-guarantee&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#finally-is-a-guarantee&quot;&gt;&lt;/a&gt; &lt;code&gt;finally&lt;/code&gt; is a guarantee&lt;/h3&gt;
&lt;p</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>How to Underscore in Python</title>
    <link href="https://www.xingyulei.com/post/py-dunder/"/>
    <id>https://www.xingyulei.com/post/py-dunder/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-10-12T01:15:23.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="underscore-naming"><a class="markdownIt-Anchor" href="#underscore-naming"></a> Underscore Naming</h3><p>Single Leading Underscore:</p><ul><li><p><code>_var</code></p></li><li><p>Indicating a name is <strong>protected</strong>, for internal use. Not enforced by python interpreter</p></li></ul><hr /><p>Double Leading Underscore:</p><ul><li><code>__var</code></li><li>Indicating a name is <strong>private</strong>. Enforced by interpreter, attempt to call it will trigger <code>AttributeError</code></li></ul><hr /><p>Double Leading Trailing Underscore:</p><ul><li><code>__var__</code></li><li>Special methods (magic methods) defined by python language, avoid naming your own attribute</li></ul><hr /><p>Single Trailing Underscore:</p><ul><li><code>var_</code></li><li>Avoid naming conflict with python keywords</li></ul><hr /><p>Single Underscore:</p><ul><li><code>_</code></li><li>Temporary variable name, variables that are never used</li><li>Example:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = ([] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> random_list:</span><br><span class="line">    some_operation()</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://dbader.org/blog/meaning-of-underscores-in-python#">Dan Bader - The Meaning of Underscores in Python</a></p><p><a href="https://www.tutorialsteacher.com/python/public-private-protected-modifiers">Tutorials Teacher - Python - Public, Protected, Private Members</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;underscore-naming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#underscore-naming&quot;&gt;&lt;/a&gt; Underscore Naming&lt;/h3&gt;
&lt;p&gt;Single Leading Underscore:&lt;</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Qt Custom Sorting</title>
    <link href="https://www.xingyulei.com/post/qt-sorting/"/>
    <id>https://www.xingyulei.com/post/qt-sorting/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-10-12T01:14:12.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sorting-overview"><a class="markdownIt-Anchor" href="#sorting-overview"></a> Sorting Overview</h3><p>Sorting happens a lot in qt viewports like list, table and tree. Using<br />convenience class such as item-based widget provides limited sorting options.</p><p>One common thing may occur when you are sorting items is the widget treats their<br />value as <em>string</em> instead of <em>int</em>, which will result incorrect ordering</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;92&quot;</span>, <span class="string">&quot;89&quot;</span>, <span class="string">&quot;40&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = QtWidgets.QTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>This will sort the list of items based on their string, so the order will be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 10</span><br><span class="line">- 11</span><br><span class="line">- 2</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><p>So naturally, you would need to specify the item value as integer type,<br />but you cannot instantiate item with integer, but <code>setData()</code> will work</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># intead of </span></span><br><span class="line">item = QtWidgets.QTableWidgetItem(<span class="built_in">int</span>(value))</span><br><span class="line"><span class="comment"># do this</span></span><br><span class="line">item.setData(QtCore.Qt.ItemDataRole, <span class="built_in">int</span>(value))</span><br></pre></td></tr></table></figure><p>Now everything will sort by numeric order</p><h3 id="custom-sorting-operator-override"><a class="markdownIt-Anchor" href="#custom-sorting-operator-override"></a> Custom Sorting (Operator override)</h3><p>What if you need more than numeric value for your data, for example, when displaying frame number, you would like to include frame range<br />too. Like frame 1, frame 2, frame 3-7, frame 8, frame 9-14. It looks like using string<br />is the only option.</p><p>This time you need to override value compare operator for these value, that is making<br />your own item class like the following example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTableWidgetItem</span>(<span class="params">QtWidgets.QTableWidgetItem</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        QtWidgets.QTableWidgetItem.__init__(self, parent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, otherItem</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(self.text().split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]) &lt; <span class="built_in">int</span>(otherItem.text().split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">return</span> self.text() &lt; otherItem.text()</span><br></pre></td></tr></table></figure><p>the <code>__lt__</code> is the less than operator (<code>&lt;</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;14-15&quot;</span>, <span class="string">&quot;120&quot;</span>, <span class="string">&quot;100-115&quot;</span>, <span class="string">&quot;59-62&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = MyTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>Everything should behave correctly</p><h3 id="custom-sorting-qsortfilterproxymodel-class"><a class="markdownIt-Anchor" href="#custom-sorting-qsortfilterproxymodel-class"></a> Custom Sorting (QSortFilterProxyModel Class)</h3><p>To be continued</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/363200/is-it-possible-to-sort-numbers-in-a-qtreewidget-column">Stack Overflow - Is it possible to sort numbers in a QTreeWidget column?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sorting-overview&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sorting-overview&quot;&gt;&lt;/a&gt; Sorting Overview&lt;/h3&gt;
&lt;p&gt;Sorting happens a lot in qt vi</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Understand Python Imports</title>
    <link href="https://www.xingyulei.com/post/py-import/"/>
    <id>https://www.xingyulei.com/post/py-import/</id>
    <published>2021-01-16T05:00:00.000Z</published>
    <updated>2021-10-11T02:35:31.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="from-import-vs-import"><a class="markdownIt-Anchor" href="#from-import-vs-import"></a> <code>from ... import</code> vs. <code>import</code></h3><p>Always avoid wildcard imports like such:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module <span class="keyword">import</span> *  <span class="comment"># don&#x27;t use this</span></span><br></pre></td></tr></table></figure><p>Instead, use regular import like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module  <span class="comment"># use this</span></span><br></pre></td></tr></table></figure><p>Why?</p><ul><li>using wildcard import will pollute namespaces</li><li>Using wildcard import will <strong>not</strong> import names with a leading underscore (unless the module defines an <code>__all__</code> list)</li><li><em>PEP8</em> recommend using regular import</li></ul><h3 id="what-does-__init__py-do"><a class="markdownIt-Anchor" href="#what-does-__init__py-do"></a> What does <code>__init__.py</code> do?</h3><ol><li><p><code>__init__.py</code> is used to specify a package, when import is trying to find the modules,<br />But it is not required: meaning a package without <code>__init__.py</code>,<br />The system can still find the modules after configuring appropriate PYTHONPATH using<br /><code>sys.path.append</code>.</p></li><li><p><code>__init__.py</code> is executed after importing the package, I’ve seen<br />sub-directory being imported by appending as environment variable within <code>__init__.py</code></p></li></ol><h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example:</h4><p>so instead of using <code>import project.foo.bar</code> for the following structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    foo&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        bar&#x2F;</span><br><span class="line">            b.py</span><br></pre></td></tr></table></figure><p>inside the <code>__init__.py</code>, we could do a <code>sys.path.append(PATH_TO_BAR)</code></p><p>so with this file structure, you can just do <code>import project</code></p><p>they could even add the import statement for you in the <code>__init__.py</code>, although it is not transparent.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    foo&#x2F;</span><br><span class="line">        bar&#x2F;</span><br><span class="line">            b.py</span><br></pre></td></tr></table></figure><p>Note: Whatever gets appended last overrides the previous<br />env variable, so import to the same name module will find the latest append</p><h3 id="dot-notation-in-import"><a class="markdownIt-Anchor" href="#dot-notation-in-import"></a> Dot notation (<code>.</code>) in Import</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parent&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    file.py</span><br><span class="line">    one&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        anotherfile.py</span><br><span class="line">    two&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">    three&#x2F;</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure><p>Each dot in your import will refer to something inside the package, could be another package<br />or a module. But it can’t be a class.</p><p>Import python modules could look like:<br /><code>import parent.file</code> or <code>import parent.one.anotherfile</code></p><p>From … import classes or functions look like this:<br /><code>from parent.file import class</code><br />which gives you direct access to the class namespace, but not the example above.</p><h3 id="import-order"><a class="markdownIt-Anchor" href="#import-order"></a> Import Order</h3><p>Based on PEP8, imports should be grouped by the following order:</p><ol><li>Standard library import</li><li>Related third-party import</li><li>Local application/library specific import</li></ol><p><strong>What is Standard Library Imports?</strong></p><p>Standard library are installed automatically by Python installer, full documentation link<br />is here: <a href="https://docs.python.org/3/library/">https://docs.python.org/3/library/</a></p><p><strong>What is the order after grouping?</strong></p><p>There is no specific rules, but based on common preferences, use alphabetical order, with<br />import first and from … import after</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> <span class="function"><span class="keyword">def</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">x</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">g</span> <span class="title">import</span> <span class="title">gg</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">x</span> <span class="title">import</span> <span class="title">xx</span></span></span><br></pre></td></tr></table></figure><h3 id="intra-package"><a class="markdownIt-Anchor" href="#intra-package"></a> Intra-Package</h3><p>In a structure like this, how would you do import from another directory?<br />say from <code>module-x.py</code> import <code>module-a</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top-package&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    sub-package-a&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        module-x.py</span><br><span class="line">        module-y.py</span><br><span class="line">    sub-package-b&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        module-a.py</span><br><span class="line">        module-b.py</span><br></pre></td></tr></table></figure><p>Here’s some examples doing relative imports in <code>module-x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module-y</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module-y</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .module-y <span class="keyword">import</span> classA</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> sub-package-b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..subpackage-b <span class="keyword">import</span> module-a</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ..subpackage-b.module-a <span class="keyword">import</span> classB</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/37974843/why-can-i-import-successfully-without-init-py">Stack Overflow - Why can I import successfully without <strong>init</strong>.py?</a></p><p><a href="https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py">Stack Overflow - relative path not working even with <strong>init</strong>.py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;from-import-vs-import&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#from-import-vs-import&quot;&gt;&lt;/a&gt; &lt;code&gt;from ... import&lt;/code&gt; vs. &lt;code&gt;import</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="style" scheme="https://www.xingyulei.com/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>List Comprehension, Next() and Conditional Expression</title>
    <link href="https://www.xingyulei.com/post/conditional-expression/"/>
    <id>https://www.xingyulei.com/post/conditional-expression/</id>
    <published>2021-01-06T05:00:00.000Z</published>
    <updated>2021-09-19T15:27:08.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list-comprehension"><a class="markdownIt-Anchor" href="#list-comprehension"></a> List Comprehension</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">list</span>.append(item)</span><br></pre></td></tr></table></figure><p>which can be re-written as a one-liner</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [item <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br></pre></td></tr></table></figure><p>But, the use of list comprehension is usually combined with operation and statement,<br />otherwise it doesn’t make sense.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [operate_func(item) <span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><p>Note that list comprehension is meant for creating list, not executing multiple operations</p><h2 id="-code3-"><a class="markdownIt-Anchor" href="#-code3-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wrong: as it creates a list which takes up memory</span></span><br><span class="line">[operation() <span class="keyword">for</span> _ <span class="keyword">in</span> steps]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Correct: it&#x27;s okay to have multi-line here</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> steps:</span><br><span class="line">    operation()</span><br></pre></td></tr></table></figure></h2><h3 id="next"><a class="markdownIt-Anchor" href="#next"></a> Next()</h3><p>In order to use <code>next()</code>, the object has to be iterator type. We can<br />do so by converting it using <code>iter()</code>, or we can use generator expression<br />(similar as the list comprehension above).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert list into iterator</span></span><br><span class="line">iter_list = <span class="built_in">iter</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generator expression</span></span><br><span class="line">iter_list = (item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>To get the next item of the iterator, simply use <code>next(_iterator)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">next</span>(iter_list)  <span class="comment"># output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(iter_list)  <span class="comment"># output: 2</span></span><br></pre></td></tr></table></figure><p>After each iteration (using <code>next()</code>), the iterator shortens, but not the original list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print([item <span class="keyword">for</span> item <span class="keyword">in</span> iter_list])</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: [3, 4]</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="common-usage"><a class="markdownIt-Anchor" href="#common-usage"></a> Common Usage</h4><ol><li>Get the first element that matches condition of a list, if no element<br />is found then returns a default value.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># no default value</span></span><br><span class="line"><span class="built_in">next</span>(item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> item &gt; <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with default value</span></span><br><span class="line"><span class="comment"># generator expression must be parenthesized if not sole argument</span></span><br><span class="line"><span class="built_in">next</span>((item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> item &lt; <span class="number">0</span>), <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>Get rid of the first element, such as title/header of <code>.csv</code> file and parse only the data in the body</li></ol><h2 id="-code8-"><a class="markdownIt-Anchor" href="#-code8-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">reader = csv.reader(file)</span><br><span class="line">header = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this only prints main body</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure></h2><h3 id="conditional-expression-or-ternary-operators"><a class="markdownIt-Anchor" href="#conditional-expression-or-ternary-operators"></a> Conditional Expression (or. Ternary Operators)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    value = value_if_true</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = value_if_false</span><br></pre></td></tr></table></figure><p>this can be re-written as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = value_if_true <span class="keyword">if</span> condition <span class="keyword">else</span> value_if_false</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/14250184/default-value-for-next-element-in-python-iterator-if-iterator-is-empty">Stack Overflow - Default value for next element in Python iterator if iterator is empty?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;list-comprehension&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list-comprehension&quot;&gt;&lt;/a&gt; List Comprehension&lt;/h3&gt;
&lt;figure class=&quot;highlight py</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="style" scheme="https://www.xingyulei.com/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>Difference between Field and Property</title>
    <link href="https://www.xingyulei.com/post/field-property/"/>
    <id>https://www.xingyulei.com/post/field-property/</id>
    <published>2020-12-20T05:00:00.000Z</published>
    <updated>2021-09-28T02:07:24.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>In C#:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> _name;<span class="comment">// this is a field</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name<span class="comment">// this is a property</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> _name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span>&#123;</span><br><span class="line">         _name = <span class="keyword">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> Age&#123; <span class="keyword">get</span>;<span class="keyword">set</span>; &#125; <span class="comment">// AutoProperty generates private field for us</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Celsius</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, temperature=<span class="number">0</span></span>):</span></span><br><span class="line">        self._temperature = temperature  <span class="comment"># this is a protected field</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">temperature</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Getting value...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._temperature</span><br><span class="line"></span><br><span class="line"><span class="meta">    @temperature.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">temperature</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Setting value...&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; -<span class="number">273.15</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Temperature below -273 is not possible&quot;</span>)</span><br><span class="line">        self._temperature = value</span><br><span class="line"></span><br><span class="line"><span class="comment"># in this case, access the protected temperature value</span></span><br><span class="line">human = Celsius(<span class="number">37</span>)</span><br><span class="line"><span class="comment"># get</span></span><br><span class="line">temperature = human.temperature  <span class="comment"># note that this is not calling a method</span></span><br><span class="line"><span class="comment"># set/modify</span></span><br><span class="line">human.temperature = <span class="number">36.5</span></span><br></pre></td></tr></table></figure><h3 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h3><p><strong>Field</strong> which stores the internal data should almost always be private.</p><p><strong>Property</strong> gives access to field (or exposed field).</p><p>Above provides an example of field and property as well as a short-hand for get &amp; set, and AutoProperty in C#.</p><p>The python example, use the decorator <code>@property</code> for getting value, use <code>@name.setter</code>: name is the property name.<br />In this case: <code>@temperature.setter</code>. There is also a deleter.</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.w3schools.com/cs/cs_properties.asp">W3Schools - C# Properties</a></p><p><a href="https://medium.com/omarelgabrys-blog/properties-vs-fields-in-c-6cec86c59dc9">Medium - Properties vs, Fields in C#</a></p><p><a href="https://www.freecodecamp.org/news/python-property-decorator/">FreeCodeCamp - The @property Decorator in Python: Its Use Cases, Advantages, and Syntax</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;example&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#example&quot;&gt;&lt;/a&gt; Example&lt;/h3&gt;
&lt;p&gt;In C#:&lt;/p&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="c#" scheme="https://www.xingyulei.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Structure and Class in C#</title>
    <link href="https://www.xingyulei.com/post/structure-class/"/>
    <id>https://www.xingyulei.com/post/structure-class/</id>
    <published>2020-12-20T05:00:00.000Z</published>
    <updated>2021-10-14T01:44:19.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="struct"><a class="markdownIt-Anchor" href="#struct"></a> Struct</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Coord&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coord</span>(<span class="params"><span class="built_in">float</span> x, <span class="built_in">float</span> y</span>)</span>&#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> X &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Y &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="class"><a class="markdownIt-Anchor" href="#class"></a> Class</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Structure</strong> types have value semantics. That is, a variable of a structure type contains an instance of the type. By default, variable values are copied on assignment, passing an argument to a method, and returning a method result. In the case of a structure-type variable, an instance of the type is copied Because structure type have value semantics, it is recommended using “readonly” to declare structure type as immutable.</p><p><strong>Class</strong> types have reference semantics. That is, a variable of a class type contains a reference to an instance of the type, not the instance itself. Therefore, the following example shows the different use cases.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Person Jack = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">28</span>);</span><br><span class="line">Jack.Name = <span class="string">&quot;Jackson&quot;</span>;</span><br><span class="line">Console.WriteLine(Jack.Name);</span><br><span class="line"></span><br><span class="line">Coord origin = <span class="keyword">new</span> Coord(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Console.WriteLine(origin.X);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error! the return value X is not a variable</span></span><br><span class="line"><span class="comment">// it is actrually the copy of the instance</span></span><br><span class="line">origin.X = <span class="number">5</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// clear! can only set new X this way   </span></span><br><span class="line">origin = <span class="keyword">new</span> Coord(<span class="number">5</span>, <span class="number">0</span>);  </span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/1747654/error-cannot-modify-the-return-value-c-sharp">Stack Overflow - Error: “Cannot modify the return value” c#</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct">Microsoft - Structure types (C# reference)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;struct&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#struct&quot;&gt;&lt;/a&gt; Struct&lt;/h3&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="c#" scheme="https://www.xingyulei.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Verlet Integration in Unity</title>
    <link href="https://www.xingyulei.com/post/verlet-integration/"/>
    <id>https://www.xingyulei.com/post/verlet-integration/</id>
    <published>2020-11-19T05:00:00.000Z</published>
    <updated>2021-10-11T03:54:37.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>When simulating a particle movement, we naturally think of Euler integration, where the position of the particle can be expressed as such: (free falling motion)</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>0.5</mn><mo>∗</mo><mi>g</mi><mo>∗</mo><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x = 0.5*g*t^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>This is an extremely easy use case. The position of the particle can be represented using a function of time. But in real life, a particle can be affected by multiple forces (and even unstabled force caused non-constant acceleration) and Euler integration also has inaccurate estimation when time step is very large.</p><p>In my understanding, the use of Verlet is good for complex particle movement. What it essentially does is relate force with position rather than velocity. The process first calculate the current particle position and the position one step back:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>=</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo>−</mo><mi>X</mi><mtext> </mtext><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi>i</mi><mi>o</mi><mi>u</mi><mi>s</mi><mtext> </mtext><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">velocity = X~current~-X~previous~;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mspace nobreak"> </span><span class="mpunct">;</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mtext> </mtext><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi>i</mi><mi>o</mi><mi>u</mi><mi>s</mi><mtext> </mtext><mo>=</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo separator="true">;</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo>=</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo>+</mo><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">X~previous~ = X~current~;X~current~ = X~current~+velocity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace nobreak"> </span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p><p>This works magically, here’s some sample code to help understand it, and a <a href="https://leixingyu.itch.io/rope-simulation">Demo</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// without other influence, the following updates the particle position</span></span><br><span class="line">velocity = posNow - posOld;</span><br><span class="line">posOld = posNow;</span><br><span class="line">posNow += velocity;</span><br></pre></td></tr></table></figure><h3 id="calculate-force"><a class="markdownIt-Anchor" href="#calculate-force"></a> Calculate Force</h3><p>What if we want to add gravity to the particle like the free falling above? Just add the acceleration to the current position, and the change will add-up on the next integration. The following also applies to forces like friction.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posNow += GRAVITY; <span class="comment">// not sure if we should multipy Time.deltatime</span></span><br></pre></td></tr></table></figure><h3 id="constraint"><a class="markdownIt-Anchor" href="#constraint"></a> Constraint</h3><p>Constraint are usually in the form of constraining particles to a specific distance, like spring. When mulitple constraints acts on single particle, one constraint will affect the other. To solve this, loop the constraint multiple time for each time step.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> count = <span class="number">0</span>; count &lt; ITERATION; count++)&#123;</span><br><span class="line">    Constriants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constraint on rope to make fixed distance between segments</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Constriants</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; segment<span class="number">-1</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> distance = (currentSeg.posNow - nextSeg.posNow).magnitude;</span><br><span class="line">        <span class="built_in">float</span> error = Mathf.Abs(distance - ropeDist);</span><br><span class="line">        Vector2 changeDir = Vector2.zero;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (distance &gt; ropeDist)</span><br><span class="line">            changeDir = (currentSeg.posNow - nextSeg.posNow).normalized;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; ropeDist)</span><br><span class="line">            changeDir = (nextSeg.posNow - currentSeg.posNow).normalized;</span><br><span class="line">    </span><br><span class="line">        Vector2 changeAmount = changeDir * error;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            nextSeg.posNow += changeAmount;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            currentSeg.posNow -= changeAmount * <span class="number">0.5f</span>;</span><br><span class="line">            nextSeg.posNow += changeAmount * <span class="number">0.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collision"><a class="markdownIt-Anchor" href="#collision"></a> Collision</h3><p>Penalty based system or projection collision reaction</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example for bounding box collision</span></span><br><span class="line">Vector2 velocity = posNow - posOld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (posNow.x &gt; screenWidth)&#123;</span><br><span class="line">    posNow.x = screenWidth;</span><br><span class="line">    posOld.x = posNow.x + velocity.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (posNow.x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    posNow.x = <span class="number">0</span>;</span><br><span class="line">    posOld.x = posNow.x + velocity.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (posNow.y &gt; screenWidth)&#123;</span><br><span class="line">    posNow.y = screenWidth;</span><br><span class="line">    posOld.y = posNow.y + velocity.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (posNow.y &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    posNow.y = <span class="number">0</span>;</span><br><span class="line">    posOld.y = posNow.y + velocity.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resources"><a class="markdownIt-Anchor" href="#resources"></a> Resources</h3><p><a href="https://youtu.be/3HjO_RGIjCU">Youtube - Coding Math: Episode 36 - Verlet Integration Part I</a></p><p><a href="https://www.youtube.com/watch?v=FcnvwtyxLds">Youtube - 2D Rope Tutorial - Make Swinging Rope in Unity (Verlet Integration)</a></p><p><a href="https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet">Wikipedia - Velocity Verlet</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;When simulating a particle movement, we na</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="c#" scheme="https://www.xingyulei.com/tags/c/"/>
    
    <category term="unity" scheme="https://www.xingyulei.com/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>Learning Graphics Basics</title>
    <link href="https://www.xingyulei.com/post/graphics-learning/"/>
    <id>https://www.xingyulei.com/post/graphics-learning/</id>
    <published>2020-09-16T04:00:00.000Z</published>
    <updated>2021-10-11T03:48:12.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="glossary"><a class="markdownIt-Anchor" href="#glossary"></a> Glossary</h3><p><a href="https://en.wikipedia.org/wiki/Glossary_of_computer_graphics">Wikipedia - Computer Graphics Glossary</a></p><p><strong>Shader</strong>: programs running on gpu that describes general computation (vertex transformation: vertex shader;<br />shading calculation: fragment shader)</p><p><strong>G-buffer</strong>: a screen space representation of geometry and material information (e.g. color, normal, position/depth)</p><h2 id="fragment-is-the-corresponding-pixel-generated-by-geometric-primitivesbut-a-pixel-on-screen-can-be-a-product-of-more-than-one-fragment-due-to-z-buffering-blending-etc"><a class="markdownIt-Anchor" href="#fragment-is-the-corresponding-pixel-generated-by-geometric-primitivesbut-a-pixel-on-screen-can-be-a-product-of-more-than-one-fragment-due-to-z-buffering-blending-etc"></a> <strong>Fragment</strong>: is the corresponding pixel generated by geometric primitives,<br />but a pixel on screen can be a product of more than one fragment due to Z-buffering, blending etc.</h2><h3 id="vertex-lighting-vs-per-pixel-lighting"><a class="markdownIt-Anchor" href="#vertex-lighting-vs-per-pixel-lighting"></a> Vertex lighting vs. Per-pixel lighting</h3><p><img src="https://www.researchgate.net/profile/Christoph-Guetter/publication/235696712/figure/fig1/AS:299742132228097@1448475501091/The-graphics-pipeline-in-OpenGL-consists-of-these-5-steps-in-the-new-generation-of-cards.png" alt="modern graphics pipeline" /></p><h4 id="vertex-lighting"><a class="markdownIt-Anchor" href="#vertex-lighting"></a> Vertex Lighting</h4><ul><li><p>Lighting is computed per-vertex</p></li><li><p>calculation happens in the vertex shader</p></li><li><p>lighting/color information is<br />then linearly interpolated across faces and rasterized</p></li><li><p>it is cheaper, faster (since there are fewer vertices compared to pixels) but noticeable artifact with low-poly objects</p></li></ul><h4 id="per-pixel-lighting"><a class="markdownIt-Anchor" href="#per-pixel-lighting"></a> Per-Pixel Lighting</h4><ul><li><p>Lighting is computed per-pixel/fragment (but what is this exactly? see the example below)</p></li><li><p>Calculation happens in the fragment shader</p></li><li><p>normal information (passed from vertex shader) is interpolated on the faces, lighting/color is calculated and rasterized.</p></li><li><p>it is more expensive but less artifact</p></li></ul><h3 id="example-of-a-per-pixel-lighting-shader"><a class="markdownIt-Anchor" href="#example-of-a-per-pixel-lighting-shader"></a> Example of a per-pixel lighting shader</h3><h4 id="vertex-shader"><a class="markdownIt-Anchor" href="#vertex-shader"></a> Vertex Shader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">layout (location &#x3D; 0) in vec3 aPos;</span><br><span class="line">layout (location &#x3D; 1) in vec3 aNormal;</span><br><span class="line"></span><br><span class="line">out vec3 FragPos;</span><br><span class="line">out vec3 Normal;</span><br><span class="line"></span><br><span class="line">uniform mat4 model;</span><br><span class="line">uniform mat4 view;</span><br><span class="line">uniform mat4 projection;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    FragPos &#x3D; vec3(model * vec4(aPos, 1.0));</span><br><span class="line">    Normal &#x3D; mat3(transpose(inverse(model))) * aNormal;  </span><br><span class="line">    </span><br><span class="line">    gl_Position &#x3D; projection * view * vec4(FragPos, 1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fragment-shader"><a class="markdownIt-Anchor" href="#fragment-shader"></a> Fragment Shader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">out vec4 FragColor;</span><br><span class="line"></span><br><span class="line">in vec3 Normal;  </span><br><span class="line">in vec3 FragPos;  </span><br><span class="line">  </span><br><span class="line">uniform vec3 lightPos; </span><br><span class="line">uniform vec3 viewPos; </span><br><span class="line">uniform vec3 lightColor;</span><br><span class="line">uniform vec3 objectColor;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ambient</span><br><span class="line">    float ambientStrength &#x3D; 0.1;</span><br><span class="line">    vec3 ambient &#x3D; ambientStrength * lightColor;</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; diffuse </span><br><span class="line">    vec3 norm &#x3D; normalize(Normal);</span><br><span class="line">    vec3 lightDir &#x3D; normalize(lightPos - FragPos);</span><br><span class="line">    float diff &#x3D; max(dot(norm, lightDir), 0.0);</span><br><span class="line">    vec3 diffuse &#x3D; diff * lightColor;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; specular</span><br><span class="line">    float specularStrength &#x3D; 0.5;</span><br><span class="line">    vec3 viewDir &#x3D; normalize(viewPos - FragPos);</span><br><span class="line">    vec3 reflectDir &#x3D; reflect(-lightDir, norm);  </span><br><span class="line">    float spec &#x3D; pow(max(dot(viewDir, reflectDir), 0.0), 32);</span><br><span class="line">    vec3 specular &#x3D; specularStrength * spec * lightColor;  </span><br><span class="line">        </span><br><span class="line">    vec3 result &#x3D; (ambient + diffuse + specular) * objectColor;</span><br><span class="line">    FragColor &#x3D; vec4(result, 1.0);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>As you can see, fragment position and normal information are passed into the fragment shader<br />from vertex shader (where the pre-compute happens), the lighting calculation (Phong lighting)<br />is calculated per-fragment.</p><p>On a related note: gpu cost are related to 1. how many vertices are passed in to the gpu from<br />buffer and 2. how complex the lighting calculation is in the fragment shader (this could be<br />the algorithm/model complexity, and the number of passes);</p><hr /><h3 id="forward-vs-deferred-rendering"><a class="markdownIt-Anchor" href="#forward-vs-deferred-rendering"></a> Forward vs. Deferred Rendering</h3><h4 id="forward-rendering"><a class="markdownIt-Anchor" href="#forward-rendering"></a> Forward Rendering</h4><p>The standard, out-of-the-box rendering technique</p><p>Geometries are passed to gpu, going through vertex shader and fragment shader,<br />with each geometry and each light computed separately one at a time to form the final render.</p><p>Render complexity: O(num of geometry fragments * num of lights)</p><p><img src="https://cdn.tutsplus.com/cdn-cgi/image/width=600/gamedev/uploads/2013/11/forward-v2.png" alt="forward rendering" /></p><h4 id="deferred-rendering"><a class="markdownIt-Anchor" href="#deferred-rendering"></a> Deferred Rendering</h4><p>Render is deferred until all geometry has been processed</p><p>Geometries are passed to gpu, going through vertex shader and fragment shader (without lighting pass),<br />final rendering is computed/combined with multiple render passes<br />(one pass for getting all geometry information to G-buffer,<br />second pass for compute lighting based on the G-buffer).</p><p>Render complexity: O(screen resolution * num of lights)</p><p><img src="https://cdn.tutsplus.com/cdn-cgi/image/width=600/gamedev/uploads/2013/11/deferred-v2.png" alt="deferred rendering" /></p><h4 id="discussion"><a class="markdownIt-Anchor" href="#discussion"></a> Discussion</h4><p>Everything all comes down to lighting, as gpu can easily handle vertex information,<br />but the most expensive are lighting calculation which can easily slow down the rendering.<br />Forward rendering iterates and compute each fragments of each geometry, no matter if it overlaps or is hidden<br />by other fragments. So for each pixel, we could have already run multiple fragment shaders.</p><p>This is where deferred rendering come in handy, the G-buffer stores information such as color, normal and depth.<br />The lighting later on can know how to produce the final render by combining all the information (For example: depth test can<br />also cull out all the fragments that are being obscured). So essentially, each pixel only runs a single fragment shader.</p><hr /><h3 id="rasterization-vs-ray-tracing"><a class="markdownIt-Anchor" href="#rasterization-vs-ray-tracing"></a> Rasterization vs. Ray tracing</h3><p>The forward, deferred rendering techniques are all in the realm of rasterization, which is the<br />most popular and traditional real-time rendering technique. With the advance of hardware, ray tracing,<br />which is computationally demanding (usually used in films/animation) can now be used in<br />real-time video games.</p><h4 id="rasterization"><a class="markdownIt-Anchor" href="#rasterization"></a> Rasterization</h4><p>We gather objects information and projects each one by one on screen (per fragment), fragment shader<br />computes the final color of every fragments to form pixels on screen.</p><p>The fundamental of rasterizing is that for each object/geometry, we look at (rasterize it) it’s verts/triangles<br />to cover pixels.</p><p>So, as discussed in deferred rendering, every object is drawn but not all of them are displayed on screen.<br />This overdraw can be accelerated by using deferred shading’s depth test.</p><p><img src="https://www.scratchapixel.com/images/upload/rasterization/raytracing-raster5.png?" alt="rasterization" /></p><h4 id="ray-tracing"><a class="markdownIt-Anchor" href="#ray-tracing"></a> Ray tracing</h4><p>We cast rays from our eyes (camera) for each pixel and gather information of those rays as they travel<br />through/intersects with objects and interacts with lights<br />to form the final render on screen.</p><p>The fundamental of ray tracing is that for each pixel, we look at (shoot a ray) each object/geometry to see<br />how they contribute to the color of that pixel.</p><p>As for ray tracing, we need to shoot many rays for each pixel, and more when there are reflection and refraction.<br />One way to accelerate this is to use bounding volume.</p><p><img src="https://i.stack.imgur.com/e3SXv.png" alt="ray tracing" /></p><h4 id="discussion-2"><a class="markdownIt-Anchor" href="#discussion-2"></a> Discussion</h4><p>The most significant difference in visual is that ray tracing is physically more accurate<br />than rasterization, thus more realistic. Which is more apparent in dynamic environment with<br />objects that reflects and refract. Rasterization needs many estimation techniques to handle lighting and shadowing<br />such as more render passes, baked light map, cubemap reflection, but ray tracing gets all the results out of the box.</p><p><img src="https://i.stack.imgur.com/e9CSY.png" alt="rasterization vs. ray tracing" /></p><hr /><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://gamedevelopment.tutsplus.com/articles/forward-rendering-vs-deferred-rendering--gamedev-12342">Envato tuts+ - Forward Rendering vs. Deferred Rendering</a></p><p><a href="https://learnopengl.com/Advanced-Lighting/Deferred-Shading">Learn OpenGL - Deferred Shading</a></p><p><a href="https://en.wikipedia.org/wiki/Deferred_shading#Deferred_lighting">Wikipedia - Deferred Lighting</a></p><p><a href="https://learnopengl.com/Lighting/Basic-Lighting">Learn OpenGL - Basic Lighting</a></p><p><a href="https://knowww.eu/nodes/59b8e93cd54a862e9d7e414a">Knowww - Per-vertex vs. per-fragment lighting</a></p><p><a href="https://answers.unity.com/questions/1749305/whats-the-difference-between-per-pixel-and-per-ver.html">Unity Forum - What’s the difference between per-pixel and per-vertex lit in Forward Rendering?</a></p><p><a href="https://www.youtube.com/watch?v=dhVJE7g3hig">Youtube - OpenGL Fragment Shaders | How Do Fragment Shaders Work?</a></p><p><a href="https://developer.nvidia.com/blog/ray-tracing-essentials-part-2-rasterization-versus-ray-tracing/">Nvidia - Ray Tracing Essentials</a></p><p><a href="https://computergraphics.stackexchange.com/questions/4585/mirror-reflections-ray-tracing-or-rasterisation">Stack Exchange - Mirror Reflections: Ray Tracing or Rasterization?</a></p><p><a href="https://www.quora.com/What-is-the-diferrence-between-ray-tracing-and-very-high-shader-details">Quora - What is the diferrence between ray tracing and very high shader details?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;glossary&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#glossary&quot;&gt;&lt;/a&gt; Glossary&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Glossary_of_com</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="graphic programming" scheme="https://www.xingyulei.com/tags/graphic-programming/"/>
    
  </entry>
  
</feed>
