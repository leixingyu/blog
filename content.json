{"meta":{"title":"Tech Art Learning","subtitle":"","description":"","author":"Xingyu Lei","url":"https://www.xingyulei.com","root":"/"},"pages":[{"title":"404 Page Not Found","date":"2022-04-10T15:19:15.970Z","updated":"2022-04-10T15:19:15.970Z","comments":false,"path":"/404.html","permalink":"https://www.xingyulei.com/404.html","excerpt":"","text":""},{"title":"Books","date":"2022-04-10T15:41:13.790Z","updated":"2022-04-10T15:41:13.790Z","comments":false,"path":"books/index.html","permalink":"https://www.xingyulei.com/books/index.html","excerpt":"","text":""},{"title":"Xingyu Lei","date":"2022-09-22T00:18:34.911Z","updated":"2022-09-22T00:18:34.911Z","comments":false,"path":"about/index.html","permalink":"https://www.xingyulei.com/about/index.html","excerpt":"","text":"‚≠êÔ∏è 4+ years of experience in Technical Art Self-motivated learner, critical thinker and problem solver Technical Artist üéÆ &emsp; PlayStation, Sony Interactive Entertainment [Jan 2021 - Present] The Last of Us: Part I Engine optimization on framerate and memory Develop and maintain a tool ecosystem that closely supports Naughty Dog across multiple departments: including Character Library, Pose Library, Engine Capture tool and more Virtual face tracking, technical scene prep, rigging QC, PC and PS5 devkit setup Un-announced Project Design and build a UE5 game cinematics pipeline from scratch Optimize and develop Maya and MotionBuilder Animation tools and workflow Cross-department coordination, code review, new-hire training Computer Graphics Research Assistant üìö &emsp; Purdue University [Sep 2018 - Dec 2020] Developed a state-machine-based procedural animation system in Unity and integration with a machine-learning-based emotion recognition module Created automation tool for character rigging and mocap retargeting Technical Documentation and Research Paper Drafting CFX TD üé® &emsp; Blur Studio [May - July 2020] [Jun - Aug 2019] CFX pipeline development and optimization Tool development: hair QC, Qualoth IO, version comparer, soft modification, camera toolkit and more Delivered over 70 shots of cloth/hair simulation using Maya and 3dsMax Works The Last of Us: Part I 2022 Love Death & Robots 2020 Call of Duty: Modern Warefare 2019"},{"title":"Links","date":"2022-04-25T03:45:56.440Z","updated":"2022-04-25T03:45:56.440Z","comments":true,"path":"links/index.html","permalink":"https://www.xingyulei.com/links/index.html","excerpt":"","text":""},{"title":"Categories","date":"2022-04-10T15:19:42.148Z","updated":"2022-04-10T15:19:42.148Z","comments":false,"path":"categories/index.html","permalink":"https://www.xingyulei.com/categories/index.html","excerpt":"","text":""},{"title":"Ê†áÁ≠æ","date":"2021-04-23T03:34:50.357Z","updated":"2021-02-07T16:58:04.032Z","comments":false,"path":"tags/index.html","permalink":"https://www.xingyulei.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-04-23T03:34:50.419Z","updated":"2021-02-07T16:58:04.032Z","comments":false,"path":"repository/index.html","permalink":"https://www.xingyulei.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Three ways of using Python Unreal Command Line","slug":"ue-commandline-python","date":"2022-11-06T04:00:00.000Z","updated":"2022-11-08T14:47:35.430Z","comments":true,"path":"post/ue-commandline-python/","link":"","permalink":"https://www.xingyulei.com/post/ue-commandline-python/","excerpt":"","text":"Introduction The Unreal official documentation has two simple examples to run Python through commandline, one being Commandlet: a headless mode without even opening the Editor, the other one being the Full Editor mode which has Unreal Editor fully opened and loaded. Do you know there‚Äôs actually a ‚Äúthird‚Äù way? And today, I‚Äôll discuss my experience and preferences of using all of them. Commandlet 1UnrealEditor.exe &quot;C:\\projects\\MyProject.uproject&quot; -run&#x3D;pythonscript -script&#x3D;&quot;c:\\\\my_script.py&quot; The ‚ÄúCommandlet‚Äù mode runs Unreal in headless mode without editor opened, this means no asset and level loading (but we have access to the unreal python module). This is great if we want to write to the project (for example, importing/creating assets), but it‚Äôs not going to work well for reading from the project. Full Editor 1UnrealEditor.exe &quot;C:\\projects\\MyProject.uproject&quot; -ExecutePythonScript&#x3D;&quot;c:\\my_script.py&quot; Using ‚ÄúFull Editor‚Äù mode, we now have everything loaded in engine and are able to do almost all operations, the trade-off being there‚Äôs a longer loading time, and also the editor will be opened. Note that at this point, once the python script finishes executing, the editor and the command prompt window will close automatically. UI If we ever needs to create a simple UI that launches from the ‚ÄúFull Editor‚Äù mode, we could do something like this in the python script. 12345678910111213141516171819import sysimport unrealif __name__ == &quot;__main__&quot;: global app global window if not QtWidgets.QApplication.instance(): app = QtWidgets.QApplication(sys.argv) window = TestWindow() unreal.parent_external_window_to_slate( window.winId().__init__(), unreal.SlateParentWindowSearchMethod.ACTIVE_WINDOW ) window.show() sys.exit(app.exec_()) Note that we are using sys.exit(app.exec_()) to prevent the UI being immediately destroyed. This does mean the Qt event loop would take over the main thread which renders Unreal editor non-interactable until function calls hands over the process to Unreal. However, I do find in rare cases (for example: when launching Movie Render Queue through commandline), either the UI still hangs the editor with the operation, or (without the UI) the editor just exit immediately after the operation is being called. Either of this will not let the render to finish. This brings me to method number three that perfectly solves this issue. Init Cmd 1UnrealEditor.exe &quot;C:\\projects\\MyProject.uproject&quot; -ExecCmds&#x3D;&quot;py c:&#x2F;my_script.py&quot; This method, although not present on Unreal Engine‚Äôs wiki, it is mentioned in the FAQ by the official Epic Games account on Linear Content Creation. For Automation/Testing you can pass the following to keep the editor running. ‚ÄìExecCmds=‚Äúpy PathToPyFile‚Äù Once you are done, you can call: unreal.SystemLibrary.execute_console_command(None,‚ÄúQUIT_EDITOR‚Äù) This is almost like running a specified startup python script in Unreal, and the editor is fully interactable when the script is running. The editor exit automatically when calling ‚ÄúQUIT_EDITOR‚Äù, if running a script with UI, we can hook up to the closeEvent(). 123def closeEvent(self, event): QtWidgets.QMainWindow.closeEvent(event) unreal.SystemLibrary.execute_console_command(None, &quot;QUIT_EDITOR&quot;) to override closeEvent() in instance-level instead of class-level, see here Logging To generate output from the commandline we can add two arguments: -stdout and -FullStdOutLogOutput. 12345678910111213141516def call(python_script): command = [ UNREAL_EXE, UPROJECT, &quot;-ExecCmds=py &#123;&#125;&quot;.format(python_script), &quot;-stdout&quot;, &quot;-FullStdOutLogOutput&quot; ] proc = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, ) return proc.communicate() and we can filter out only the log generated from Python as such 1234output = call(&#x27;python_script.py&#x27;)for line in str(output).split(r&#x27;\\r\\n&#x27;): if &#x27;LogPython&#x27; in line: print(line) Environment Another thing to consider is that, running in batch mode can mess up our tools and start up scripts. due to it being a different environment. We might want to re-configure our environment which you can do like such: 12345678910111213import osimport subprocessenv = os.environ.copy()env[&#x27;FOO&#x27;] = &#x27;BAR&#x27;# more env ...proc = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env ) Reference Unreal Doc - Scripting the Unreal Editor Using Python Unreal Forum - Unreal Engine Technical Guide to Linear Content Creation FAQs Adamrehn Docs - UE4CLI","categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"}],"tags":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/tags/unreal/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"Transformation Matrix Conversion between DCCs","slug":"math-xform-conversion","date":"2022-10-22T04:00:00.000Z","updated":"2022-10-30T03:22:18.768Z","comments":true,"path":"post/math-xform-conversion/","link":"","permalink":"https://www.xingyulei.com/post/math-xform-conversion/","excerpt":"","text":"Introduction Have you noticed the different transform values when one asset is imported to a different package? When we do .fbx importing and exporting, the plugin does this conversion for us. FBX is very reliable and hassle-free, but how does the math works? Important: Before continuing, I highly recommend reading these previous posts Euler Angles Change of Basis Transformation Value To demonstrate the different transform between DCCs, here I have some ‚Äòaxis‚Äô object placed in Maya, Unity and Unreal. When inspecting the ‚Äòaxis‚Äô located on the top-right, the transformation values are seen as follow: translation rotation scale Maya x: -1.31, y: 0.33, z: 0.19 x: -335, y: -12, z: 98 x: 1, y: 1, z: 1 Unity x: 1.31, y: 0.33, z: 0.19 x: 7, y: -27, z: -102 x: 1, y: 1, z: 1 Unreal x: -1.31, y: 0.19, z: 0.33 x: 149, y: 75, z: 123 x: 1, y: 1, z: 1 Usually, for translation and scale there is a pattern to be found, usually the operation involves swapping values between axes, and flipping them. For rotation, however, the values don‚Äôt seem to have connections between one another, so how can we compute them? The fundamental reason for all of this is that even though all DCCs use a Cartesian coordinate system, they have different axis direction and rotation order. Methods Overview The method I use are all fundamental matrix calculation. From the source package, retrieve translation, rotation and scale (tsource,rsource,ssourcet_{source}, r_{source}, s_{source}tsource‚Äã,rsource‚Äã,ssource‚Äã) and compose a transformation matrix: MsourceM_{source}Msource‚Äã Convert the transformation matrix to the target software coordinate system using change of basis operation: Mtarget=Mcob‚àóMsource‚àóMcob‚àí1M_{target} = M_{cob} * M_{source} * {M_{cob}}^{-1}Mtarget‚Äã=Mcob‚Äã‚àóMsource‚Äã‚àóMcob‚Äã‚àí1 Decompose the transformation matrix: MtargetM_{target}Mtarget‚Äã and re-order the target translation, rotation and scale value such (ttarget,rtarget,stargett_{target}, r_{target}, s_{target}ttarget‚Äã,rtarget‚Äã,starget‚Äã) Composition and De-composition It is helpful to re-visit the transform matrix calculation, but we will later use a math library to handle them. Translation: a translating along t=&lt;dx,dy,dz&gt;t = &lt;d_x, d_y, d_z&gt;t=&lt;dx‚Äã,dy‚Äã,dz‚Äã&gt; can be thought as multiplying by the translation matrix: Mtranslation=[100dx010dy001dz0001] M_{translation} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; d_x\\\\ 0 &amp; 1 &amp; 0 &amp; d_y\\\\ 0 &amp; 0 &amp; 1 &amp; d_z\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mtranslation‚Äã=‚é£‚é¢‚é¢‚é°‚Äã1000‚Äã0100‚Äã0010‚Äãdx‚Äãdy‚Äãdz‚Äã1‚Äã‚é¶‚é•‚é•‚é§‚Äã Scale: a scaling upon s=&lt;Œ≤x,Œ≤y,Œ≤z&gt;s = &lt;\\beta_x, \\beta_y, \\beta_z&gt;s=&lt;Œ≤x‚Äã,Œ≤y‚Äã,Œ≤z‚Äã&gt; can be thought as multiplying by the scale matrix: Mscale=[Œ≤x0000Œ≤y0000Œ≤z00001] M_{scale} = \\begin{bmatrix} \\beta_x &amp; 0 &amp; 0 &amp; 0\\\\ 0 &amp; \\beta_y &amp; 0 &amp; 0\\\\ 0 &amp; 0 &amp; \\beta_z &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mscale‚Äã=‚é£‚é¢‚é¢‚é°‚ÄãŒ≤x‚Äã000‚Äã0Œ≤y‚Äã00‚Äã00Œ≤z‚Äã0‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã Shear: good to know, but not very commonly use; sh=&lt;shx,shy,shz&gt;sh = &lt;sh_x, sh_y, sh_z&gt;sh=&lt;shx‚Äã,shy‚Äã,shz‚Äã&gt; represents shear along x, y and z axis; Mshx=[1000hyx100hzx0100001] M_{sh_x} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\\\ h_{yx} &amp; 1 &amp; 0 &amp; 0\\\\ h_{zx} &amp; 0 &amp; 1 &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ \\end{bmatrix} Mshx‚Äã‚Äã=‚é£‚é¢‚é¢‚é°‚Äã1hyx‚Äãhzx‚Äã0‚Äã0100‚Äã0010‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã Mshy=[1hxy0001000hzy100001] M_{sh_y} = \\begin{bmatrix} 1 &amp; h_{xy} &amp; 0 &amp; 0\\\\ 0 &amp; 1 &amp; 0 &amp; 0\\\\ 0 &amp; h_{zy} &amp; 1 &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mshy‚Äã‚Äã=‚é£‚é¢‚é¢‚é°‚Äã1000‚Äãhxy‚Äã1hzy‚Äã0‚Äã0010‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã Mshz=[10hxz001hyz000100001] M_{sh_z} = \\begin{bmatrix} 1 &amp; 0 &amp; h_{xz} &amp; 0\\\\ 0 &amp; 1 &amp; h_{yz} &amp; 0\\\\ 0 &amp; 0 &amp; 1 &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mshz‚Äã‚Äã=‚é£‚é¢‚é¢‚é°‚Äã1000‚Äã0100‚Äãhxz‚Äãhyz‚Äã10‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã A 2D shearing operation Rotation: a rotation can be thought as a combination of shearing and scaling, a visual demonstration can be found here. A rotation along x, y and z axis can then be represented as such: Mrx=[10000cosŒ∏‚àísinŒ∏00sinŒ∏cosŒ∏00001] M_{r_x} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\\\ 0 &amp; cos\\theta &amp; -sin\\theta &amp; 0\\\\ 0 &amp; sin\\theta &amp; cos\\theta &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mrx‚Äã‚Äã=‚é£‚é¢‚é¢‚é°‚Äã1000‚Äã0cosŒ∏sinŒ∏0‚Äã0‚àísinŒ∏cosŒ∏0‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã Mry=[cosŒ∏0sinŒ∏00100‚àísinŒ∏0cosŒ∏00001] M_{r_y} = \\begin{bmatrix} cos\\theta &amp; 0 &amp; sin\\theta &amp; 0\\\\ 0 &amp; 1 &amp; 0 &amp; 0\\\\ -sin\\theta &amp; 0 &amp; cos\\theta &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mry‚Äã‚Äã=‚é£‚é¢‚é¢‚é°‚ÄãcosŒ∏0‚àísinŒ∏0‚Äã0100‚ÄãsinŒ∏0cosŒ∏0‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã Mrz=[cosŒ∏‚àísinŒ∏00sinŒ∏cosŒ∏0000100001] M_{r_z} = \\begin{bmatrix} cos\\theta &amp; -sin\\theta &amp; 0 &amp; 0\\\\ sin\\theta &amp; cos\\theta &amp; 0 &amp; 0\\\\ 0 &amp; 0 &amp; 1 &amp; 0\\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} Mrz‚Äã‚Äã=‚é£‚é¢‚é¢‚é°‚ÄãcosŒ∏sinŒ∏00‚Äã‚àísinŒ∏cosŒ∏00‚Äã0010‚Äã0001‚Äã‚é¶‚é•‚é•‚é§‚Äã Real Examples I used numpy.ndarray to store matrix, and used a third-party library for computing the composition and de-composition of transformation matrix. Computation Now let‚Äôs put our code to the test: Here are the transformation values I have in maya: 123maya_t = [-1.307, 0.331, 0.188]maya_r = [-335, -12, 98]maya_s = [1, 1, 1] Maya to Unity From the previous post, I‚Äôve computed the change of basis matrix for Unreal 123456MAYA_TO_UNITY = np.array([ [-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], dtype=int) Now followed by our methods: 123maya_matrix = compose_matrix(maya_t, maya_r, maya_s, order=&#x27;sxyz&#x27;)unity_matrix = change_xform(maya_matrix, MAYA_TO_UNITY)unity_t, unity_r, unity_s = decompose_matrix(unity_matrix, order=&#x27;szxy&#x27;) Result: 1234# transform in Unitytranslation = [1.307, 0.331, 0.188] rotation = [7.3413883536944935, -26.641453221201548, -102.41010358310075] scale = [1.0, 1.0, 1.0] Important: for rotation since the returned values corresponds to the first, second and third rotation angle specified in the rotation order: which is in ‚Äòzxy‚Äô, we need to swap values to re-order it as ‚Äòxyz‚Äô. Maya to Unreal Same goes for Unreal, the change of basis matrix is: 123456MAYA_TO_UNREAL = np.array([ [1, 0, 0, 0], [0, 0, -1, 0], [0, 1, 0, 0], [0, 0, 0, 1]], dtype=int) Then comes our conversion method: 123maya_matrix = compose_matrix(maya_t, maya_r, maya_s, order=&#x27;sxyz&#x27;)unreal_matrix = change_xform(maya_matrix, MAYA_TO_UNREAL)unreal_t, unreal_r, unreal_s = decompose_matrix(unreal_matrix, order=&#x27;sxyz&#x27;) Result: 1234# transform in Unrealtranslation = [-1.307, 0.188, 0.331] rotation = [149.05728077227823, 75.61041143412538, 123.21509334477231] scale = [1.0, 1.0, 1.0] Caveat: I need to inverse the value of translation z, the reason I haven‚Äôt figured out yet, but translation is hardly our concern since we just need to flip axes between Maya values; The rotation value is the important one. Reference Transform3d API ThreeJS - Convert from one coordinate system to another? Tech Art Hub - A Practical Guide to Unreal Engine 4‚Äôs Coordinate System","categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"}],"tags":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/tags/unreal/"},{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/tags/unity/"},{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"math","slug":"math","permalink":"https://www.xingyulei.com/tags/math/"}]},{"title":"Change of Basis Matrix","slug":"math-change-of-basis","date":"2022-09-25T04:00:00.000Z","updated":"2022-09-24T03:21:59.765Z","comments":true,"path":"post/math-change-of-basis/","link":"","permalink":"https://www.xingyulei.com/post/math-change-of-basis/","excerpt":"","text":"Introduction Different DCCs uses coordinate systems with different axis directions. For example, Maya by default uses a Y-up right-handed system; Unity uses a Y-up left-handed system; and Unreal uses a Z-up left-handed system. (Image from: Techart Hub) Up Direction: is what consider to be the up direction of the world. Moving an object up translating in direction of positive Y in Maya and Unity, but for Unreal, it‚Äôs translating in the direction of positive Z. Handed System: not only affects the forward/front direction of the world, it also dictates the direction of rotation; for left-handed system, positive rotation about the axis is clockwise, and for right-handed system, it‚Äôs counter-clockwise (same way as how your hand would curl, hence the name). The nature of the coordinate system affects how an object‚Äôs transformation is calculated. The Change of Basis matrix transforms a vector lies in one coordinate system to another. Basis Vectors In the world of 2D, the basis vectors xxx and yyy of one coordinate system A, corresponds to vx=[10] v_x = \\begin{bmatrix} 1 \\\\ 0 \\\\ \\end{bmatrix} vx‚Äã=[10‚Äã] and vy=[01] v_y = \\begin{bmatrix} 0 \\\\ 1 \\\\ \\end{bmatrix} vy‚Äã=[01‚Äã] Now, if these two basis vectors were to transfer to a different coordinate system B, this exact set of basis vectors is written differently in that system. This represents A‚Äôs basis vectors in B‚Äôs system. vx=[21] v_x = \\begin{bmatrix} 2 \\\\ 1 \\\\ \\end{bmatrix} vx‚Äã=[21‚Äã] and vy=[‚àí11] v_y = \\begin{bmatrix} -1 \\\\ 1 \\\\ \\end{bmatrix} vy‚Äã=[‚àí11‚Äã] Correspondingly, any vector in system B could translate to system A, pre-multiply using this change of basis matrix: Mcob=[2‚àí111] M_{cob} = \\begin{bmatrix} 2 &amp; -1\\\\ 1 &amp; 1\\\\ \\end{bmatrix} Mcob‚Äã=[21‚Äã‚àí11‚Äã] where the first column is the basis vector xxx and second column is the basis vector yyy. And alternatively, to translate any vector in system A to system B, we pre-multiply by the inverse of this change of basis matrix: Mcob‚àí1{M_{cob}}^{-1}Mcob‚Äã‚àí1. Transformation Now we know how to convert vectors between coordinate systems, how do we do it for transformation? Here are some simple step to understand: Given any vector in system B, apply a change of basis operation, so it‚Äôs in system A: Mcob‚àóvBM_{cob} * v_BMcob‚Äã‚àóvB‚Äã. Now we can apply a transformation represented in the same system A: MtransformA‚àóMcob‚àóvBM_{transformA} * M_{cob} * v_BMtransformA‚Äã‚àóMcob‚Äã‚àóvB‚Äã. Finally, we can transfer the end result back to system B by pre-multiplying the inverse of the change of basis matrix: Mcob‚àí1‚àóMtransformA‚àóMcob‚àóvB{M_{cob}}^{-1} * M_{transformA} * M_{cob} * v_BMcob‚Äã‚àí1‚àóMtransformA‚Äã‚àóMcob‚Äã‚àóvB‚Äã. Conclusion The frontal part Mcob‚àí1‚àóMtransformA‚àóMcob{M_{cob}}^{-1} * M_{transformA} * M_{cob}Mcob‚Äã‚àí1‚àóMtransformA‚Äã‚àóMcob‚Äã represents the same transformation but in system B: MtransformBM_{transformB}MtransformB‚Äã. Alternatively, any transformation in system B: MtransformBM_{transformB}MtransformB‚Äã can be represented as Mcob‚àóMtransformB‚àóMcob‚àí1M_{cob} * M_{transformB} * {M_{cob}}^{-1}Mcob‚Äã‚àóMtransformB‚Äã‚àóMcob‚Äã‚àí1 in system A. Here‚Äôs the function I‚Äôve written Python: Example Maya to Unreal The first thing to identify is the change of basis from Maya to Unreal, as illustrated before, Maya is a Y-up left-hand system and Unreal is a Z-up right-hand system. Maya Axis Direction Forward Z Up Y Right -X Unreal Axis Direction Forward -Y Up Z Right -X The change of basis can be represented as such $ M_{cob} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; -1 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} $ 123456MAYA_TO_UNREAL = np.array([ [1, 0, 0, 0], [0, 0, -1, 0], [0, 1, 0, 0], [0, 0, 0, 1]], dtype=int) Maya to Unity Same thing for Maya to Unity conversion, a Y-up left-hand system to a Y-up right-hand system; the yyy and zzz are respectively inverted between the two systems, therefore: Maya Axis Direction Forward Z Up Y Right -X Unity Axis Direction Forward Z Up Y Right X The change of basis can be represented as such $ M_{cob} = \\begin{bmatrix} -1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 1 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} $ 123456MAYA_TO_UNITY = np.array([ [-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], dtype=int) Reference YouTube - Change of basis | Chapter 13, Essence of linear algebra Unreal Engine Forum - ‚ÄúForward‚Äù in unreal engine, Which is it? Dario Mazzanti - Change of Basis","categories":[{"name":"3d math","slug":"3d-math","permalink":"https://www.xingyulei.com/categories/3d-math/"}],"tags":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/tags/unreal/"},{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/tags/unity/"},{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"math","slug":"math","permalink":"https://www.xingyulei.com/tags/math/"}]},{"title":"Euler Angles and Gimbal Lock Problem","slug":"math-euler-gimbal","date":"2022-09-17T04:00:00.000Z","updated":"2022-09-21T02:04:43.335Z","comments":true,"path":"post/math-euler-gimbal/","link":"","permalink":"https://www.xingyulei.com/post/math-euler-gimbal/","excerpt":"","text":"Introduction When talking about rotation, most of us would picture gimbal movement: an object rotate about a set of three axes. This is the same principle of the Euler angles presentation of rotation. It being the most popular representation for rotation, is used across many DCCs, it is intuitive and easy for us to understand. While an Euler angles are usually written as a list of three values representing rotation degrees in x, y, z axis. Scientifically it is actually denoted as Œ±\\alphaŒ±, Œ≤\\betaŒ≤, Œ≥\\gammaŒ≥ with radian as rotation unit where Œ±\\alphaŒ± is rotation about the first axis Œ≤\\betaŒ≤ is rotation about the second axis Œ≥\\gammaŒ≥ is rotation about the third axis Rotation Order There are two major issue with Euler angles. Ambiguity The target orientation is rotation order dependent, meaning even with the same rotation Œ±\\alphaŒ±, Œ≤\\betaŒ≤, Œ≥\\gammaŒ≥ values, the results differs using different order of rotation. A zyx order refers to rotation about axis z, y, x in that order (think of it as x axis being a child of y axis being a child of z axis). Therefore, to represent a target rotation, aside from providing rotation values Œ±\\alphaŒ±, Œ≤\\betaŒ≤, Œ≥\\gammaŒ≥, we also need to provide the rotation order and Rotation Type. There are a total of 12 possible rotation orders per rotation type/group. Gimbal Problem In short, the Gimbal problem is due to euler angle decomposing a (linear) rotational movement as a product of more than one axis rotations. Although any target orientation can be achieved using Euler rotation, the rotational movements are sometimes undesired. This is due to a problem in Animation field known as Gimbal Lock. Gimbal lock happens when two of the three axes are rotated to a parallel configuration, 'locking' the system into a two-dimensional space. In order to ‚Äúbreak free‚Äù of this configuration, the system needs to input rotation along two or more axes simultaneously. In the context of keyframe Animation, interpolation along more than one axis means the rotational movement will not appear linear, but in an unpredictable trajectory, which is bad. (See video illustration here) Test in Maya You can test out the gimbal problem in Maya yourself. Going into rotation tools and select ‚ÄúAxis Orientation‚Äù to ‚ÄúGimbal‚Äù, you can now interact with the object using gimbal rotation. This rotation is what actually get recorded by Maya and presented in the channel box. If you go back to the ‚ÄúObject‚Äù mode rotation, even though your rotation gizmo is now unlocked, the gimbal problem don‚Äôt just go away. Maya is still recording the gimbal rotation in the background. The ‚ÄúObject‚Äù mode rotation is just an interaction tool. Gimbal Mode Object Mode Quaternion Rotation lies in non-Euclidean space. Luckily there is a more advanced representation for rotation: Quaternion, which game engines uses internally. This is due to it being data compact (only stores four numbers) and computational efficient (rotational movement using Euler angles usually need to be converted to rotation matrix, which involves a lot of sin and cos calculation). The bigger advantage comes from it producing linear and predictable results (the shortest path along source and target rotation). It is, however, very hard for users to comprehend. A quaternion consists of a scaler part and a vector part: q=[s,(x,y,z)]q = [s, (x, y, z)]q=[s,(x,y,z)] where s,x,y,z‚ààRs, x, y, z \\in Rs,x,y,z‚ààR or. q=s+ix+ij+kzq = s + ix + ij + kzq=s+ix+ij+kz where i2=j2=k2=ijk=‚àí1i^2 = j^2 = k^2 = ijk = -1i2=j2=k2=ijk=‚àí1 Rotation Type Intrinsic and Extrinsic Rotations Intrinsic rotations are elemental rotations that occur about the axes of a coordinate system XYZ attached to a moving body. (i.e. rotation about axis in the current coordinate, like object space) Extrinsic rotations are elemental rotations that occur about the axes of the fixed coordinate system xyz. (i.e. rotation about axis in the original coordinate, like world space) (Fig.1: Intrinsic rotations; Fig.2: Extrinsic rotations) Example Rotation calculation usually happens along with other transform type using matrix. Here I made a matrix composition and decomposition function in Python, utilizing a third party math library transforms3d. As you can see, since the rotation matrix varies depending on rotation order and type, this is reflected as one of the argument. The first character is ‚Äòr‚Äô (rotating == intrinsic), or ‚Äòs‚Äô (static == extrinsic). The next three characters give the axis (‚Äòx‚Äô, ‚Äòy‚Äô or ‚Äòz‚Äô) about which to perform the rotation, in the order in which the rotations will be performed. For example the string ‚Äòszyx‚Äô specifies that the angles should be interpreted relative to extrinsic (static) coordinate axes, and be performed in the order: rotation about z axis; rotation about y axis; rotation about x axis. Conversion Any extrinsic rotation can be represented in intrinsic rotation with the same angle values but inverted order or elemental rotation. So a Œ±\\alphaŒ±, Œ≤\\betaŒ≤, Œ≥\\gammaŒ≥ with extrinsic zyx order is equivalent to the same angle with intrinsic xyz order. Reference Stack Exchange - Confusion about order of rotations for Euler Angles Unreal Engine Forum - What is the rotation order for Components or Bones? Stack Exchange - Proof of the extrinsic to intrinsic rotation transform YouTube - Euler (Gimbal Lock) Explained TD Matt - Rotation Orders CSDN - Understanding Euler Angles","categories":[{"name":"3d math","slug":"3d-math","permalink":"https://www.xingyulei.com/categories/3d-math/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"math","slug":"math","permalink":"https://www.xingyulei.com/tags/math/"}]},{"title":"My Personal Technical Notes","slug":"general-tech-note","date":"2022-09-09T04:00:00.000Z","updated":"2022-10-08T02:33:33.898Z","comments":true,"path":"post/general-tech-note/","link":"","permalink":"https://www.xingyulei.com/post/general-tech-note/","excerpt":"","text":"Introduction Greetings! Here you can find smaller notes I collected over the years that are too short to make individual blogs. Each subpage represents a category, and within that category contains pieces of ‚Äúwisdom segment‚Äù. This blog is updated regularly, if the frame below is broken, then the page hasn‚Äôt been updated for over 30 days (which indicates that I‚Äôm pretty busy lately üë∑) Enjoy! You may need to wait a couple of seconds for the embedded page to respond iframe { width: 100%; height: 1000px; border: 2px solid #ccc; border-radius: 10px; padding: none; }","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/tags/general/"}]},{"title":"UE5 Cinematic FBX Workflow","slug":"ue-cinematic-fbx","date":"2022-08-13T04:00:00.000Z","updated":"2022-09-24T03:33:39.782Z","comments":true,"path":"post/ue-cinematic-fbx/","link":"","permalink":"https://www.xingyulei.com/post/ue-cinematic-fbx/","excerpt":"","text":"Introduction How do we transfer assets and animation to Unreal needed for cinematic? .fbx is the way to go (at least for now). For each component of a cinematic, we want to set it up nicely so the data can be correctly presented in Unreal. However, do note there are limitations in .fbx and differences between DCCs, certain things just can‚Äôt be transferred through .fbx and certain things can‚Äôt be represented in Unreal. Always test your workflow before going into full scale production. Please refer to Unreal‚Äôs FBX Content Pipeline General The important thing to keep in mind is that consistency is king, we want to have consistent world unit, identify coordinate system for each DCC, and maintain a hierarchy standard for assets across DCCs. Certain workflow involves animating or placing components within Unreal instead of importing outside the engine which is totally fine. Static Mesh Static Meshes represents anything that is not animated, like a background environment. There shouldn‚Äôt be any keys on any of the transforms or attribute. They are meant to be modeled outside Unreal, and imported as a static mesh asset, placed in the level as a static mesh actor. Export: In the outliner, select all the meshes and export as .fbx Import: Make sure ‚Äòcombine mesh‚Äô is checked, otherwise the asset will be imported as separate meshes (probably not what we want) We have three types of Unreal assets created: Static Mesh, Textures and Materials. Static Mesh Animation If a mesh is animated in any capacity, even if it‚Äôs just translating or rotating as a whole without any deformation, it needs to be skinned with joint(s). Consider this as a common standard. See the process of Skeletal Mesh in the immediate following. Note: the joint transform pivot needs to be align with the mesh transform pivot. Example: Take a look at our previous flag prop. If we want to animate the flag like moving it around in Unreal, it needs to have joint hierarchy where we can apply animation to, even if it‚Äôs simple as this. Applying animation directly to transform is not recommended. Also, no need to worry about the extra joint and weight data added, the file size increase is negligible (&lt;10%). Skeletal Mesh (SKM) Skeletal Mesh could be used to represent an animated foreground prop or environment, or something as complicated as a character/creature. Example: Export Rigging in Game vs Animation A complex animation rig can‚Äôt translate 1 to 1 to game engine, the rigging phase needs to be planned to accommodate the limitation of the engine. Once we have a suitable rig in Maya, we need to prepare it for the engine. We would clean the rig up to get a desired hierarchy which contains only joints and meshes. So remove components like controllers and constraints, also get rid of any redundant namespace. Import In addition to Textures and Materials, we have three major components imported: Skeleton, Skeletal Mesh and Physics Asset. Skeleton: refers the joint hierarchy, it uses the Skeletal Mesh as the preview mesh Skeletal Mesh: is the Skinned Mesh along with the Skeleton Physics Asset: defines physics and collision used by the Skeletal Mesh (sometimes even rendering), a rough physics collision body is defined during import. Skeletal Mesh Animation The exported animation should maintain the exact same hierarchy structure of the exported rig Generally, the root of the rig/skeleton, whether it‚Äôs a transform group or a root joint, should not have animation/keyed data on it, as it is generally used to offset world transform (and keyed transform can‚Äôt do that) Export Since keyframes are usually on controllers, so we have to bake the keys on all joints. Select the joint hierarchy and Bake Simulation, after that we can get rid of the controllers and constraints just like what we did during the rig clean up. This time, we only need to export the joint hierarchy (no meshes). Blendshape Unreal supports blendshapes, if you need your character has blendshape animation, additional steps needs to be done. find all meshes with blendshape node attached traverse in the node editor and locate the blendshape node bake simulation on the blendshape node include these meshes during your export (ones with blendshape) Import (as Animation Sequence) Now during import phase simply select the Skeleton Unreal asset that matches your animation, no need to create a new Skeletal Mesh. An Animation Sequence Unreal asset is now created, you can also see a preview mesh through the Editor window. It is now ready to be used in the Sequencer. Camera Animation Maya Camera cannot be imported as an Unreal asset. Unreal has its own native Camera object, which is not 1-to-1 match to Maya‚Äôs Camera. What we can do is export Maya camera‚Äôs animation and attribute and import on an Unreal Cinematic Camera Actor. See video guide here Export The camera node has to be on the scene root, with no transform node on top. Otherwise, the animation won‚Äôt be imported correctly as Unreal is searching for the top node. Import (as Keyframes) Cameras are linked to the game viewport, therefore animation import needs to be plotted on the Sequencer as individual keyframes instead of being an Unreal asset. Create a camera track and bind it to a newly created Unreal CineCameraActor and hit ‚ÄòImport‚Äô. Maya FBX Export Option Reference FBX Export options: Full Help General Options Smoothing Group: ‚úÖ Smooth Group: ‚úÖ Include Children: ‚úÖ Input Connections: ‚úÖ Static Mesh Skeletal Mesh SKM Animation Camera Animation &#9989 Embedded Media &#9989 Embedded Media &#9989 Animation &#9989 Animation &#9989 Camera Unreal FBX Import Option Reference FBX Import Options Reference: Full Help Static Mesh Skeletal Mesh SKM Animation Camera Animation Import Mesh &#9989 Create New Materials Import Textures &#9989 Skeleton: None Skeletal Mesh &#9989 Import Mesh &#9989 Create Physics Asset &#9989 Create New Materials Import Textures &#9989 Skeleton: Existing Import Animations &#9989 Matches by Name Only &#11036 Create Cameras &#11036 Replace Transform Track &#9989 Reduce Keys &#11036","categories":[{"name":"unreal cinematic","slug":"unreal-cinematic","permalink":"https://www.xingyulei.com/categories/unreal-cinematic/"}],"tags":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/tags/unreal/"},{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"}]},{"title":"UE5 Cinematic Sequencer Introduction","slug":"ue-cinematic-sequencer","date":"2022-07-16T04:00:00.000Z","updated":"2022-09-24T03:33:46.898Z","comments":true,"path":"post/ue-cinematic-sequencer/","link":"","permalink":"https://www.xingyulei.com/post/ue-cinematic-sequencer/","excerpt":"","text":"Introduction In this blog, I‚Äôm going to introduce the different components of a cinematic, how they are represented. This hopefully will give you an overview of how cinematic works in Unreal. Glossary Skeleton: a hierarchy that is used to define Bones (sometimes called joints), In Unreal, skeletons are used to store/driven by associated animation data. Static Mesh: a piece of geometry that consists of a set of polygons that can be cached in video memory and rendered out. Skeletal Mesh: in short is a collection of a skeleton hierarchy, and mesh(es) skinned to that skeleton. A set of polygons composed to make up the surface of the Skeletal Mesh, and a hierarchical set of interconnected bones which can be used to animate the vertices of the polygons Level: is all or part of your game‚Äôs ‚Äúworld‚Äù. Levels contain everything a player can see and interact with, like environments, usable objects, other characters, and so on. Actor: an Actor is any object that can be placed into a Level, such as a camera, Static Mesh, or player start location. Actors support 3D transformations such as translation, rotation, and scaling. They can be created and destroyed. Binding: a track in sequencer that binds a specific actor in the level, enables the level sequence to modify or animate its property when the level sequence is active. What makes a Sequencer Similar to other film and animation editing software, Sequencer requires you to add tracks in order to reference elements in your sequence. Any character, prop, camera, effect, or other viewport element can be referenced and manipulated in Sequencer Level Sequence A Level Sequence asset is a container for cinematic data, which includes tracks, animation and binding. Level Sequence Track If you used any video editing software, then tracks shouldn‚Äôt be new to you. Tracks are like layers, and the Level Sequence is the whole canvas; Tracks usually are used to reference different actors in the level, and then animated its properties. So in most time, tracks don‚Äôt overlay each other like layers in Photoshop do, they‚Äôre more like controlling different color channels that compose the final image. Level Sequence Section Asset Sections are the components that laid out in a Track, sections can be treated as individual animation clips of which make up the whole track. Some common section are Camera Cuts section, Shots section and Animation section. Basic Cinematic Component We‚Äôll break down a cinematic as the following components and tackle them one by one. Camera (Camera Actor) Background (Static Mesh Actor) Foreground &amp; Character (Skeletal Mesh Actor) Lighting (Light Actor) FX (Visual Effects Actor) Audio (Sound Wave Asset) Other Actor to Sequence (Object Binding) The level sequence operates within levels and operates on actors in the level. It can bind to an existing actor and animates its properties. It can also spawn an actor as needed. Spawnables vs. Possessables Static Mesh This is the simplest scenario, a static mesh actor is bound to the level sequence and the transform are keyed. Skeletal Mesh When it comes to skeletal mesh, another component is exposed: Animation. This sub-track takes Unreal Animation Sequence assets, which consists the skeleton animation, this effectively drives the skeleton within the skeletal mesh actor. Camera Binding and Camera Cut In order to set up camera view properly, in-addition to the camera binding, we also need a Camera Cuts Track. Whatever is on this track is what the viewport is capturing, it allows you to switch and blend between different cameras. (In short, the Camera Binding tracks drives the Camera Actor, the Camera Cut track decides what takes over the viewport) Audio Audio can be created using by possessing an audio/sound actor, or alternatively it can be created by adding Unreal Sound Wave asset. I would recommend the latter as it allows you to scrub in the timeline and still have the correct audio playback. Note: Set Sound Wave Asset‚Äôs ‚ÄòSound Asset Compression Type‚Äô to ‚ÄòPCM‚Äô so it plays correctly when scrubbing in timeline. More There are of course different actor types in the level that the level sequence can possess/bind to. Such as Light Actors, Gameplay Actors, Visual Effects Actors and more. Sub-sequence and Shot There are other two types of concept I‚Äôd like to touch upon: Subsequences and Shots. They are usually not directly bound to an actor, but they are containers for a level sequence that does. They can be very useful to organize and composite the cinematic level sequence structure. Subsequences represent an entire Level Sequence. Having subsequences allows multiple level sequence to be added into a ‚Äúparent‚Äù level sequence, These subsequences can be considered as the partition of the ‚Äúparent‚Äù and can be worked on as different sub-scenes by different artists. (Image from Unreal) Similar to Subsequence, each Shot Section represents a Level Sequence, it allows multiple level sequences be assembled and re-arranged freely on the Shots Track as Shot Section to form the full sequence/cinematic. It is very effectively in a master sequence workflow, which I‚Äôll talk about in a later chapter. References Unreal Engine Documentation - Cinematics and Sequencer","categories":[{"name":"unreal cinematic","slug":"unreal-cinematic","permalink":"https://www.xingyulei.com/categories/unreal-cinematic/"}],"tags":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/tags/unreal/"},{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"}]},{"title":"Qt Prevent GUI freezing with Multithreading","slug":"qt-threading","date":"2022-05-15T04:00:00.000Z","updated":"2022-09-10T13:48:55.773Z","comments":true,"path":"post/qt-threading/","link":"","permalink":"https://www.xingyulei.com/post/qt-threading/","excerpt":"","text":"Introduction It is inevitable that some of our tasks in the program will take long time to run, leaving the user staring at a frozen screen, whether it is reading/writing a large file, searching database or syncing assets. In a production environment, these seconds can really add up for the entire team; can you imagine how many working hours are wasted when every user need to wait for, let‚Äôs say, a library tool to query the entire asset database and finally displaying them every single time. We can surely improve the query, but that‚Äôs usually not where the bottleneck is. The speed of querying is usually sufficient for human brain to process. What we want is not to be slow down by un-interactive GUI. So, why not have assets to fill little by little in a continuous stream, or just query their name first, and use a separate thread to load in rest of the information like date created, author and thumbnail. Now, let‚Äôs get straight to the point. I‚Äôm going to show three basic examples of different methods to deal with frozen GUI, each has its own use cases. Example Issue 1234567891011121314151617181920212223242526272829import timeclass Window(QtWidgets.QMainWindow): def __init__(self, parent=None): QtWidgets.QMainWindow.__init__(self, parent) # ui setup: please ignore widget = QtWidgets.QWidget() layout = QtWidgets.QGridLayout() button = QtWidgets.QPushButton(&#x27;run task!&#x27;) button.clicked.connect(self.run_long_task) edit = QtWidgets.QLineEdit() layout.addWidget(edit, 0, 0) layout.addWidget(button, 1, 0) widget.setLayout(layout) self.setCentralWidget(widget) def run_long_task(self): time.sleep(2)if __name__ == &#x27;__main__&#x27;: app = QtWidgets.QApplication(sys.argv) win = Window() win.show() sys.exit(app.exec_()) Here I created a simple example to show how a long-running task can block controls in our Qt Gui. The run_long_task() is simply a time.sleep() that will halt for 2 seconds util returning control back to the main event loop. After evoking the run_long_task() method, we can no longer interact with the line edit from our UI, until the task has finished. (Clicking and typing has no effect while task is running) processEvent() Using QApplication.processEvent() can achieve a semi-interactive GUI during a long-running task. Here‚Äôs to show what I meant. Let‚Äôs add a progress bar to track our task status. 123456789101112131415161718192021class Window(QtWidgets.QMainWindow): def __init__(self, parent=None): QtWidgets.QMainWindow.__init__(self, parent) # ui setup: add progress bar self.ui_progress = QtWidgets.QProgressBar() self.statusBar().addPermanentWidget(self.ui_progress) ... def update_status(status_bar, msg): status_bar.showMessage(msg, 2000)def update_progress(progress_bar, value): progress_bar.setValue(value) if value &gt;= 100: progress_bar.setVisible(False) elif progress_bar.isHidden(): progress_bar.setVisible(True) And now, by evoking the static method processEvent() during the long-running task, we enforce Qt to handle normal events like updating GUI, and respond to our user input, before handing the control back to the task. 1234567def run_long_task(self): for i in range(1, 11): sleep(0.5) update_status(self.statusBar(), str(i)) update_progress(self.ui_progress, i*10) QtCore.QCoreApplication.processEvents() Now, as you can see, our main GUI can update the progress bar and messages, and even allow us to sort of interact with the line edit, but the interaction is by no means smooth. (Somewhat interactive, yet choppy) Before we create a real multi-threading solution, first, let‚Äôs establish a signal slot workflow that Qt provides: instead of updating the progress bar and status bar by calling its method directly, we emit a signal to handle that. 12345678910def __init__(self): ... self.progressed.connect(lambda value: update_progress(self.ui_progress, value)) self.messaged.connect(lambda msg: update_status(self.statusBar(), msg))def run_long_task(self): for i in range(1, 11): sleep(0.5) self.progressed.emit(int(i*10)) self.messaged.emit(str(i)) QThread Instead of directly subclassing QThread(), it is recommended by many to create a QObject() and attach it to a QThread(). The QObject() we created, known as the worker, will be running our long-running task, and emits the update signals. It is important to keep a note that, the QThread() that houses our worker needs to live in the main event loop (i.e. kept in the main application as self.__thread). If not, it will be collected by gc and the thread will exit pre-maturely. thread.worker = worker is also essential if the worker doesn‚Äôt live in the main event loop (i.e. self.__worker). Now as you can see, we can freely interact with the line edit while the long-running task is handled in the background. (Very smooth typing) QThreadPool and QRunnable A natural progression would be handling multiple long-running tasks, luckily, we have QThreadPool for that. In the following example, we have three long-running task in the background, while we still have free control of the main GUI. (Multiple threads and smooth typing) QThreadPool manages QRunnable, which doesn‚Äôt have built-in signals, thus we need to attach signals externally by creating a QObject to store them. QThreadPool also deletes the QRunnable instances automatically when it finishes by default. if max thread is exceeded, the process is queued until a thread is available. Reference PythonGUIs - Multithreading PyQt5 applications with QThreadPool Maya‚Äôs Programming &amp; Electronics Blog - How To Really, Truly Use QThreads; The Full Explanation Stack Overflow - Background thread with QThread in PyQt Qt doc - Process Events","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"threading","slug":"threading","permalink":"https://www.xingyulei.com/tags/threading/"},{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Making Pie Charts in Qt (Python)","slug":"qt-pie-chart","date":"2022-04-27T04:00:00.000Z","updated":"2022-09-10T13:38:50.345Z","comments":true,"path":"post/qt-pie-chart/","link":"","permalink":"https://www.xingyulei.com/post/qt-pie-chart/","excerpt":"","text":"Introduction It‚Äôs time to learn new stuff again. This time, I want to implement a data visualization component in my tool: pie charts. I had some experience with matplotlib before, but I‚Äôm excited to find out that Qt has an add-on module QtCharts that can integrate with Qt application. Here are my learning results: on the left side, I created a static and simplistic design and on the right side, a slightly more flashy, animated design. In this blog, I will break down how they are created. They are also available in my guiUtil with full code. Example #1 Example #2 Installing QtCharts QtCharts was first introduced as an add-on module in Qt in version 5.7, so the Qt.py for Python Qt binding doesn‚Äôt support QtCharts as it isn‚Äôt available in PyQt and PySide. check your PySide2 or PyQt5 version:QtCore.qVersion(). (I‚Äôm using PyQt5 version 5.15.2) install the corresponding version of PyQtChart using 1pip install PyQtChart finally, test import from PyQt5 import QtCharts The Basics Classes QChart: QChart refers to the main diagram, in our case the pie chart is a QChart object. QPieSeries: To draw a pie chart, we‚Äôll need one or more QPieSeries added to our QChart object, to form the circular shape. To build other types of chart, we‚Äôll want to use Series such as QBoxPlotSeries, QCandlestickSeries, QXYSeries, QAreaSeries or QAbstractBarSeries. QPieSlice: a QPieSlice object represents a slice inside a QPieSeries object. Components There are other components that the examples will cover. Value reflects the size/span of each slice, and is added one by one in run-time to the QPieSeries. We‚Äôre able to retrieve useful information such as percentage and span angle once all the data is added. Label is a crucial component within the scope of the QPieSlice. Label can be displayed in different ways (Inside the slice: LabelInsideHorizontal, LabelInsideTangential, LabelInsideNormal or outside the slice: LabelOutside with labelArm). Legend in default, is attached to QChart, connecting with the labels of all the QPieSlice. We can separate it by detaching it or setting each individual markers (items) of the legend. We also defined an immutable data structure to represent the data fed into the QChart, which we‚Äôll take a look shortly. Example 1 1234567891011121314151617181920212223242526class MySimpleChart(QtChart.QChart): def __init__(self, datas, parent=None): super(MySimpleChart, self).__init__(parent) self._datas = datas self.outer = QtChart.QPieSeries() self.set_outer_series() self.addSeries(self.outer) def set_outer_series(self): slices = list() for data in self._datas: slice_ = QtChart.QPieSlice(data.name, data.value) slice_.setLabelVisible() slice_.setColor(data.primary_color) slice_.setLabelBrush(data.primary_color) slices.append(slice_) self.outer.append(slice_) # label styling for slice_ in slices: label = &quot;&lt;p align=&#x27;center&#x27; style=&#x27;color:&#123;&#125;&#x27;&gt;&#123;&#125;%&lt;/p&gt;&quot;.format(round(slice_.percentage()*100, 2)) slice_.setLabel(label) We start off by subclassing QChart, we then would want to add a QPieSeries as a container for inserting our slices (generated from our data). A simplified process: 123456pie_chart = QChart()series = QPieSeries()slice_ = QPieSlice(label, value)series.append(slice_)pie_chart.addSeries(series) note: slice is a Python built-in name so I‚Äôm against using it as variable name Labels and Legend As you can see from the example above, we have some flexibility with label formatting (QLabel methods and HTML formatting), we can also do legend formatting to some extent. Such as alignment and marker shapes. 12self.legend().setAlignment(QtCore.Qt.AlignRight)self.legend().setMarkerShape(QtChart.QLegend.MarkerShapeCircle) we can even separate legend vs. slice label, so they could display different content (but it may be bad being practice to unlink the two) 12for index, marker in enumerate(self.legend().markers()): marker.setLabel(self._datas[index].name) Other Adding variation can be easily done by shifting angles of all the slices. 123offset = 40self.outer.setPieStartAngle(offset)self.outer.setPieEndAngle(offset+360) If the outside labels are cramped together, we can create additional spacing by extending the label arm: 1slice_.setLabelArmLengthFactor(0.4) Example 2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class MyChart(QtChart.QChart): def __init__(self, datas, parent=None): super(MyChart, self).__init__(parent) self._datas = datas self.legend().hide() self.setAnimationOptions(QtChart.QChart.SeriesAnimations) self.outer = QtChart.QPieSeries() self.inner = QtChart.QPieSeries() self.outer.setHoleSize(0.35) self.inner.setPieSize(0.35) self.inner.setHoleSize(0.3) self.set_outer_series() self.set_inner_series() self.addSeries(self.outer) self.addSeries(self.inner) def set_outer_series(self): slices = list() for data in self._datas: slice_ = QtChart.QPieSlice(data.name, data.value) slice_.setLabelVisible() slice_.setColor(data.primary_color) slice_.setLabelBrush(data.primary_color) slices.append(slice_) self.outer.append(slice_) # label styling for slice_ in slices: color = &#x27;black&#x27; if slice_.percentage() &gt; 0.1: slice_.setLabelPosition(QtChart.QPieSlice.LabelInsideHorizontal) color = &#x27;white&#x27; label = &quot;&lt;p align=&#x27;center&#x27; style=&#x27;color:&#123;&#125;&#x27;&gt;&#123;&#125;&lt;br&gt;&#123;&#125;%&lt;/p&gt;&quot;.format( color, slice_.label(), round(slice_.percentage()*100, 2) ) slice_.setLabel(label) def set_inner_series(self): for data in self._datas: slice_ = self.inner.append(data.name, data.value) slice_.setColor(data.secondary_color) slice_.setBorderColor(data.secondary_color) Inner and Outer Series To create a circular/loop shape pie chart, we need to create a hole with setHoleSize(). And the inner loop and outer loop are two separate series adjacent to each other. In the example, I used a light color for inner loop (50% blend with white) and used solely the outer loop to display labels and values. Also, in order for labels to be displayed properly, I added a condition so that label will be displayed outside when the angle span is less than a threshold. Exploding Animation QPieSlice has a built-in hovered signal for us to achieve the exploding effect when mouse hovering over. 12345678910111213141516def set_outer_series(self): ... slice_.hovered.connect(partial(self.explode, slice_))def explode(self, slice_, is_hovered): if is_hovered: start = slice_.startAngle() end = slice_.startAngle()+slice_.angleSpan() self.inner.setPieStartAngle(end) self.inner.setPieEndAngle(start+360) else: self.inner.setPieStartAngle(0) self.inner.setPieEndAngle(360) slice_.setExplodeDistanceFactor(0.1) slice_.setExploded(is_hovered) The outer loop explosion can be set using slice_.setExploded(); The inner loop shifting is done by offsetting the pie start and end angle. Also, make sure we have set QChart.SeriesAnimations on the QChart object. Bonus Custom Data Class 1234567from collections import namedtupleData = namedtuple(&#x27;Data&#x27;, [&#x27;name&#x27;, &#x27;value&#x27;, &#x27;primary_color&#x27;, &#x27;secondary_color&#x27;])node = Data(&#x27;Node&#x27;, 333, QtGui.QColor(&quot;#82d3e5&quot;), QtGui.QColor(&quot;#cfeef5&quot;))connection = Data(&#x27;Connection&#x27;, 105, QtGui.QColor(&quot;#fd635c&quot;), QtGui.QColor(&quot;#fdc4c1&quot;))other = Data(&#x27;Other&#x27;, 20, QtGui.QColor(&quot;#feb543&quot;), QtGui.QColor(&quot;#ffe3b8&quot;)) A helper data structure for adding items to our pie chart. Generally, only the label/name and the value are required. I also assigned specific color values to achieve certain palette, but they can be randomly generated in the QChart class as well. Putting it Together The last thing we need to do is add a main body and instantiate a pie chart with some random data. We do this using a QChartView container. All the code is available at guiUtil. 12345678910111213141516171819202122import sysclass ChartView(QtWidgets.QMainWindow): def __init__(self, parent=None): super(ChartView, self).__init__(parent) self.setFixedSize(QtCore.QSize(700, 400)) datas = [node, connection, other] chart = MySimpleChart(datas) chart_view = QtChart.QChartView(chart) chart_view.setRenderHint(QtGui.QPainter.Antialiasing) self.setCentralWidget(chart_view)if __name__ == &#x27;__main__&#x27;: global win app = QtWidgets.QApplication(sys.argv) win = ChartView() win.show() sys.exit(app.exec_()) Reference Qt Doc - Nested Donut Example Qt Doc - QLegend Qt Doc - QChart Qt Doc - QPieSeries Qt Doc - QPieSlice Stack Overflow - Attach colors of my choosing to each slice of QPieSeries","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Run Command Prompt and Powershell as Admin (Python)","slug":"py-admin","date":"2022-03-19T04:00:00.000Z","updated":"2022-11-02T03:35:06.376Z","comments":true,"path":"post/py-admin/","link":"","permalink":"https://www.xingyulei.com/post/py-admin/","excerpt":"","text":"Introduction We often find ourselves needing to automate tasks on Windows machine, Although there are many Python libraries out there that supports some common Windows operations and even cross-platforms. It is really hard to substitute Window‚Äôs Command Prompt and PowerShell, as they are extremely useful in cases where we need to access different Windows components, configure settings and troubleshooting. User Account Control (UAC) Standard user accounts are for day-to-day activities with less permission, while the administrator account has elevated access for all features. For my personal machine, I‚Äôm operating on admin account all time (as the sole user). But Windows, for security reasons, still treats most of my actions as standard account. It only elevates to admin privilege when my operations want to make internal changes to Windows settings and my machine. The UAC feature when enabled, prompts the user when such action occurred and request for admin access. Additionally, for standard user, it means they need to ask for administrator account login. When the sign in is an administrator type account When the sign in is a standard type account Now, in terms of task automation in Python, we‚Äôll also want to figure out how to run certain operations with Admin privilege. Using subprocess Like most of us, I have been using subprocess to evoke cmd.exe or powershell.exe as desired by passing arguments as list into the function. Command Prompt: command = ['cmd.exe', '/c', &lt;argument&gt;] PowerShell: command = ['powershell.exe', '-command', &lt;argument&gt;] 12345678910import subprocessdef runCmd(*args): p = subprocess.Popen( *args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT ) out, error = p.communicate() return out, error But this doesn‚Äôt grant the process with admin privilege, and won‚Äôt notify us with UAC. How to achieve this? here are some ways to do it. Using ShellExecute runas 12345678910import ctypescommands = u&#x27;/k echo hi&#x27;ctypes.windll.shell32.ShellExecuteW( None, u&quot;runas&quot;, u&quot;cmd.exe&quot;, commands, None, 1 ) runas from the Windows API launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application. What about a more pythonic approach? Using runas in Command Prompt runas application runs command as a different user; it is most commonly used but not limited to perform operation with administrator account for granting admin access. Note: the password is handled outside UAC, which may not be the desired behavior 1234command = [&#x27;cmd.exe&#x27;, &#x27;/c&#x27;, &#x27;runas&#x27;, &#x27;/user:administrator&#x27;, &#x27;regedit&#x27;]p = subprocess.Popen(command, stdin=subprocess.PIPE)p.stdin.write(&#x27;password&#x27;)p.communicate() Using PowerShell -Verb Runas This is my preferred method, since it is most flexible and also evokes UAC for admin access. Start-Process 1Start-Process &lt;executable&gt; -argumentlist &lt;arugments&gt; -Verb Runas Call operator (&amp;) with call operator, we are able to run commands not limited in the environment path, also not need to worry about spaces in our path. 1&amp; &#123;Start-Process &lt;executable&gt; -argumentlist &lt;arugments&gt; -Verb Runas&#125; -ExecutionPolicy Bypass Sometimes, a security setting will prevent PowerShell running a .ps1 file, and we‚Äôll need to bypass execution policy: 1Start-Process &lt;executable&gt; -ExecutionPolicy Bypass -File &lt;file&gt; It is very obvious from the above example, we can basically use PowerShell to wrap around anything, including Command Prompt. 1Start-Process cmd.exe -argumentlist &#x27;/k &quot;dir&quot;&#x27; -Verb Runas To bundle everything together, a working example would look like this in Python: 123ps_command = &quot;&amp; &#123;&#123;Start-Process cmd.exe -argumentlist &#x27;/k \\&quot;dir\\&quot;&#x27; -Verb Runas&#125;&#125;&quot;command = [&#x27;powershell.exe&#x27;, &#x27;-command&#x27;, ps_command]runCmd(command) essentially using subprocess to run PowerShell in admin using -Verb Runas to execute command /k dir in Command Prompt (which also has elevated access). Redirect Output By doing the above, we are running an executable within a process. the sacrifice is that it is difficult to pass the output, but here‚Äôs a few workarounds: Output results to a file 1Start-Process cmd.exe -argumentlist &#x27;/c &quot;dir&quot;&#x27; -redirectStandardOutput &quot;C:\\Users\\xlei\\Desktop\\temp.txt&quot; Output result to the console Just the exit code: 12$output = Start-Process cmd.exe -argumentlist &#x27;/c &quot;dir&quot;&#x27; -PassThru -Wait$output.ExitCode A neat function I found here 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051function Start-ProcessWithOutput&#123; param ([string]$Path,[string[]]$ArgumentList) $Output = New-Object -TypeName System.Text.StringBuilder $Error = New-Object -TypeName System.Text.StringBuilder $psi = New-object System.Diagnostics.ProcessStartInfo $psi.CreateNoWindow = $true $psi.UseShellExecute = $false $psi.RedirectStandardOutput = $true $psi.RedirectStandardError = $true $psi.FileName = $Path if ($ArgumentList.Count -gt 0) &#123; $psi.Arguments = $ArgumentList &#125; $process = New-Object System.Diagnostics.Process $process.StartInfo = $psi [void]$process.Start() do &#123; if (!$process.StandardOutput.EndOfStream) &#123; [void]$Output.AppendLine($process.StandardOutput.ReadLine()) &#125; if (!$process.StandardError.EndOfStream) &#123; [void]$Error.AppendLine($process.StandardError.ReadLine()) &#125; Start-Sleep -Milliseconds 10 &#125; while (!$process.HasExited) #read remainder while (!$process.StandardOutput.EndOfStream) &#123; #write-verbose &#x27;read remaining output&#x27; [void]$Output.AppendLine($process.StandardOutput.ReadLine()) &#125; while (!$process.StandardError.EndOfStream) &#123; #write-verbose &#x27;read remaining error&#x27; [void]$Error.AppendLine($process.StandardError.ReadLine()) &#125; return @&#123;ExitCode = $process.ExitCode; Output = $Output.ToString(); Error = $Error.ToString(); ExitTime=$process.ExitTime&#125;&#125;$p = Start-ProcessWithOutput cmd.exe -argumentlist &#x27;/c &quot;dir&quot;&#x27;$p.ExitCode$p.Output$p.Error Run Python as Admin Running the whole python script in Admin, meaning that the subsequent processes will have admin access, if this is the behaviour you prefer. References Stack Exchange - Run .exe file via Python as Administrator Stack Overflow - How do I capture the output into a variable from an external process in PowerShell? Stack Overflow - Redirection of standard and error output appending to the same log file Stack Overflow - Powershell: Capturing standard out and error with Process object Windows Commandline - Windows runas command syntax and examples","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/tags/windows/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"IK FK Matching in Maya","slug":"maya-ik-fk-match","date":"2022-02-27T05:00:00.000Z","updated":"2022-09-24T03:29:06.814Z","comments":true,"path":"post/maya-ik-fk-match/","link":"","permalink":"https://www.xingyulei.com/post/maya-ik-fk-match/","excerpt":"","text":"Introduction IK/FK matching refers to the ability to match any IK pose to FK pose and vice versa. But how does it work? I‚Äôm going to summarize the basic approaches I learned along the way. One of them is math-based, and the other being Maya operational-based, which utilizes Maya‚Äôs built-in constraint nodes, this is more straight-forward and easy as it does the calculation for you. Since we use controllers to drive joint movement in rigs, the general idea of a IK/FK matching is to reverse this process, and find the transformation of a controller based off the joint‚Äôs transformation. Note: There‚Äôs no one easy way to deal with all custom rig setups, this is due to operations like parenting, orienting joint and freezing transformation. Transformation offsets occurs between joint and controller, even in world space. I‚Äôll cover these more complex scenarios as references here. FK Matching FK is all about matching rotation, given that FK controller constraints the corresponding joint‚Äôs orientation. Thus, in reverse, given the result joint‚Äôs transform, we should be able to find the FK controller‚Äôs rotation. And knowing how one of them works can translate to all the other joints and FKs (respectively, shoulder, elbow and wrist in arm and clavicle, knee and ankle in leg). Script obtain the world space rotation of the joint while it is still in IK mode 12# in IK moderotation = cmds.xform(jnt, ro=1, ws=1, q=1) switch to FK mode and apply the world space rotation onto the FK controller 123# in FK modedef snap_fk_to_jnt(ctrl, target_rotation): cmds.xform(ctrl, ro=target_rotation, ws=1) Maya Operation We can utilize Maya‚Äôs constraint to match rotation. Such as, in a three-chain setup, we could let IK joints to rotation constraint the FK controllers without maintaining offset. But for a single-chain setup with both FK and IK controllers sharing the joint, doing so will cause cycle evaluation. To get around this, we use a temporary empty transform node that is relatively parented under the joint. This temporary node (the match node) will be used to constraint the FK controller, and once the matching completes, we can safely delete the constraint and the match node itself. IK Matching IK Matching matches IK controller to the joint‚Äôs transform in FK mode. For IK handle, we need to match both the top joint‚Äôs (wrist or ankle) translation and rotation value; For IK pole vector, we only need to match the mid-joint‚Äôs (elbow or knee) translation. We already figured out how to acquire and match rotation in FK matching, which can be directly used in matching IK handle, so we‚Äôll focus on how to match translation below. Script obtain the world space translation of the joint while it is still in FK mode 12# in FK modetranslation = cmds.xform(jnt, t=1, ws=1, q=1) switch to IK mode and apply the world space translation onto the IK Handle 123# in IK modedef snap_ik_to_jnt(ik, target_pos): cmds.xform(ik, t=target_pos, ws=1) Maya Operation Similar to FK matching, we create a match node that inherits the target joint‚Äôs transformation in FK mode; Then we use it to parent constraint the IK handles (position constraint the IK pole) without maintain offset. Once the IKs snaps to the target position, we then safely delete the constraint and the match node. Pole Vector: One Step Further In the example above, IK pole vector will directly snap on top of the elbow or knee joint. Doing so will achieve the IK matching effect, but we often want the pole vector to extend a little further outwards, this gives more room for animators and avoids joint flipping. To extend the pole vector outwards, we need to acquire the directional vector from mid-point of the root and top joint of the rig chain to the mid-joint. It is easier to achieve this through script: convert positional value to vector as Maya doesn‚Äôt support operation on position (represented as list[3]) 1234567root_vec = Vector3(root_pos)mid_vec = Vector3(mid_pos)top_vec = Vector3(top_pos)# alternatively, use maya&#x27;s built-in MVectorfrom maya.api import OpenMaya as omvec = om.MVector(pos[0], pos[1], pos[2]) find the mid-point between the root joint and the top joint 1mid_point = (root_vec + top_vec) * 0.5 find the directional vector from mid-point to the mid-joint 1pole_dir = mid_pos - mid_point the pole vector‚Äôs target position can be found by extending this directional vector beyond the mid-joint position with an arbitrary multiplier 1pole_pos = mid_pos + (pole_dir * multiplier) Further Reading The above matching logics aren‚Äôt bulletproof. What???!! Yeah, because not long after releasing my Snap tool, Squirrel Daph found the tool not behaving correctly and kindly sent me the rig for further testing. After some troubleshooting, I found that because I built the tool around my auto-generated rig, so there are many things I didn‚Äôt account for. The following sections aim to overcome some of my Snap tool‚Äôs previous limitations. Transformation Matrix Transformation matrix are commonly used in Computer Graphics, it can be used to represent an object‚Äôs transformation in 3D world; It is an extremely useful knowledge to have in terms of rigging. Maya has many built-in ways get the matrix representation of a node‚Äôs transformation. 1234def get_matrix(node, is_world=1): return om.MMatrix( cmds.xform(node, q=1, matrix=1, ws=is_world, os=not is_world) ) Converting the Maya matrix representation MMatrix to MTransformationMatrix, gives access to more built-in functions including decomposition. 1mxform_matrix = om.MTransformationMatrix(mmatrix) Or construct by using function set MFnTransform: 123456789def get_transform_matrix(dag_node): &quot;&quot;&quot; Get the local transformation matrix of a given dag node :param dag_node: om.MObject. input maya dag node :return: om.MTransformationMatrix. local transformation matrix &quot;&quot;&quot; fn_transform = om.MFnTransform(dag_node) return fn_transform.transformation() The differences between om.MMatrix and om.MTransformationMatrix: om.MMatrix constructed by cmds.xform has access to both local and world transformation matrix, but unable to track rotation greater than 360 degrees. om.MTransformationMatrix using MFnTransform only gets local transformation matrix, but it stores rotation information greater than 360 degrees. Translation Offset When there‚Äôs world space offset between IK controller and joint, we would want to account for the offset when calculating the IK result position. 12345jnt_pos = Vector(cmds.xform(jnt, ws=1, q=1, t=1))ik_pos = Vector(cmds.xform(ik, ws=1, q=1, t=1))offset = jnt_pos - ik_posik_target_pos = jnt_target_pos - offset Rotation Offset Rotational offset can be caused by axis in-alignment during constraints, we‚Äôll need to use matrix multiplication to find it instead of simple vector math. Example of rotation offset between joint and controller Pre-multiplying Matrix Important: the order of matrix multiplication matters to get a unit matrix, instead of dividing matrix, we multiply its inverse matrix Joint transformation is the result of controller constraints, in which the constraint matrix serves as a pre-multiplication matrix. Mjoint=Mconst‚àóMctrlM_{joint} = M_{const} * M_{ctrl} Mjoint‚Äã=Mconst‚Äã‚àóMctrl‚Äã We are then able to get the constraint matrix by post-multiplying the inverse of controller matrix. Mjoint‚àóMctrl‚àí1=Mconst‚àóMctrl‚àóMctrl‚àí1{M_{joint}} * M_{ctrl}^{-1} = M_{const} * M_{ctrl} * M_{ctrl}^{-1} Mjoint‚Äã‚àóMctrl‚àí1‚Äã=Mconst‚Äã‚àóMctrl‚Äã‚àóMctrl‚àí1‚Äã Mconst=Mjoint‚àóMctrl‚àí1M_{const} = {M_{joint}} * M_{ctrl}^{-1} Mconst‚Äã=Mjoint‚Äã‚àóMctrl‚àí1‚Äã In the function below, the result matrix argument would be the joint matrix, and source matrix argument would be the controller matrix. 123456789def get_pre_mult_matrix(result_mat, source_mat): &quot;&quot;&quot; Get pre-multiplying matrix :param result_mat: om.MMatrix. the result matrix after multiplication :param source_mat: om.MMatrix. the source matrix used in pre multiplying :return: om.MMatrix. matrix used in pre multiplication &quot;&quot;&quot; return result_mat * source_mat.inverse() Similar process, we are able to find the target controller‚Äôs transform based off the rotational offset and the target joint transform. Mctrl=Mconst‚àí1‚àóMjointM_{ctrl} = M_{const}^{-1} * {M_{joint}} Mctrl‚Äã=Mconst‚àí1‚Äã‚àóMjoint‚Äã Implementation Bringing this back to the context of our IK matching process: We know the current controller rotation and current joint rotation, this will give us the constraint matrix (rotational offset), We also know the target joint rotation in world space, Therefore, we can convert this target joint rotation to target controller rotation in world space. Now through script: 123456789# step 1: obtain the constraint matrixcurrent_jnt_rot = matrix.get_matrix(jnt)current_fk_rot = matrix.get_matrix(fk)cons_mat = matrix.get_pre_mult_matrix(current_jnt_rot, current_fk_rot)# step 2: get controller&#x27;s target matrix target_ctrl_mat = om.MTransformationMatrix( cons_mat.inverse() * target_jnt_mat) We can later extract the rotation data from the transformation matrix. Model Matrix Model matrix converts transformation matrix from world space to object space, this has no direct usage in the IK/FK matching, as cmds.xform() already does the work for us. But it‚Äôs good to cover as it is very relevant. Post-multiplying Matrix Model matrix is a post-multiplying matrix: Mworld=Mlocal‚àóMmodelM_{world} = M_{local} * M_{model} Mworld‚Äã=Mlocal‚Äã‚àóMmodel‚Äã We now pre-multiply the inverse of the local transform matrix: Mlocal‚àí1‚àóMworld=Mlocal‚àí1‚àóMlocal‚àóMmodelM_{local}^{-1} * M_{world} = M_{local}^{-1} * M_{local} * M_{model} Mlocal‚àí1‚Äã‚àóMworld‚Äã=Mlocal‚àí1‚Äã‚àóMlocal‚Äã‚àóMmodel‚Äã Mmodel=Mlocal‚àí1‚àóMworldM_{model} = M_{local}^{-1} *{M_{world}} Mmodel‚Äã=Mlocal‚àí1‚Äã‚àóMworld‚Äã So similarly we can create the following function, with the result matrix argument being the world transform matrix, and source matrix argument being the local transform matrix. 123456789def get_post_mult_matrix(result_mat, source_mat): &quot;&quot;&quot; Get post multiplying matrix :param result_mat: om.MMatrix. the result matrix after multiplication :param source_mat: om.MMatrix. the source matrix used in post multiplying :return: om.MMatrix. matrix used in post multiplication &quot;&quot;&quot; return source_mat.inverse() * result_mat Decomposing Matrix Decomposing a transformation matrix (om.MTransformationMatrix) refers to acquiring translation, rotation and scale values as individual list[3] type. These values can now be applied using cmds.xform() either in local space or in world space depending on the input transformation matrix. Translation 1translation = matrix.translation(om.MSpace.kWorld) Scale 1scale = matrix.scale(om.MSpace.kWorld) Rotation Extract rotation in axis angles in default xyz rotation order. 1234import mathrot_vec = matrix.rotation().asVector()rotation = [math.degrees(angle) for angle in (rot_vec.x, rot_vec.y, rot_vec.z)] References Tech Artists Org - Convert world space coordinates to object space coordinates in Maya? Stack Exchange - Given this transformation matrix, how do I decompose it into translation, rotation and scale matrices? AK Eric - Find Euler rotation values of Maya matrix Maya Help - MFnTransform Class Reference Maya Help - MMatrix Class Reference Maya Help - MTransformationMatrix Class Reference","categories":[{"name":"3d math","slug":"3d-math","permalink":"https://www.xingyulei.com/categories/3d-math/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Using namedtuple","slug":"py-named-tuple","date":"2022-01-23T05:00:00.000Z","updated":"2022-09-10T13:50:49.099Z","comments":true,"path":"post/py-named-tuple/","link":"","permalink":"https://www.xingyulei.com/post/py-named-tuple/","excerpt":"","text":"I recently got side-tracked into exploring the basics of namedtuple() as I got a glimpse of its usage in our engineering codebase. Here‚Äôs my summary: Mutable and Hashable To understand the behavior of namedtuple(), it is best to also visit the concept of Python object‚Äôs mutability and hashability. These two concepts are closely linked. Hashability: an object‚Äôs is hashable when its hash value never changed during its lifetime Most of Python‚Äôs immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not; immutable containers (such as tuples and frozensets) are only hashable if their elements are hashable. Objects which are instances of user-defined classes are hashable by default Mutability: an object with a fixed value and cannot be altered is immutable (For example: int, float, string, tuple). in contrast, an object can keep its value while keeping its id() is mutable. (For example: list, dict) hash() and id() identity: id(), the identity of the two same value variables are the same If two objects (that exist at the same time) have the same identity, they‚Äôre actually two references to the same object. The is operator compares items by identity, a is b is equivalent to id(a) == id(b). hash value: hash(), hash value is based off an object‚Äôs value, and hash value must remain the same for the lifetime of the object. If an object is mutable, then it doesn‚Äôt make sense for it to have hash. The hash value is an integer which is used to quickly compare dictionary keys or sets. Why Hash? Hash values are very useful, as they enable quick look-up of values in a large collection of values, it‚Äôs commonly used in set and dict. with if x in elements:: In a list, Python needs to go through the whole list and compare x's value with each value in the list elements. In a set, Python keeps track of each element‚Äôs hash, Python will get the hash-value for x, look that up in an internal structure and find elements that have the same hash as x. It also means you can have non-hashable objects in a list, but not in a set or as keys in a dict. Example: There is no way to change an int object‚Äôs value without re-assigning (copy) it to a different object. 1234x = 5# id(x) is equal to 3054677212104x = 6# id(x) is equal to 3054677212080 But for list, you can edit its value after assignment while keeping its id() the same. (note: use list built-in function rather than re-assignment, this is the same for x.sort vs. x=sorted(x)) 123456x = [5]# ORIGINAL: id(x) is equal to 3054706521672x.append(6)# CORRECT: id(x) is equal to 3054706521672x = [5, 6]# WRONG: id(x) is equal to 3054713375816 NamedTuple A data class are just regular classes that are geared towards storing state, rather than containing a lot of logic, namedtuple() is one kind of data classes. Every time you create a class that mostly consists of attributes, you make a data class. With namedtuple(), you can create immutable sequence types that allow you to access their values using descriptive field names and the dot notation instead of unclear integer indices. Initialization typename: str, class name of the namedtuple field names: names that are used to access values in the namedtuple, it can be declared using any of the following: iterable of strings: [‚Äúa‚Äù, ‚Äúb‚Äù, ‚Äúc‚Äù] a string with name seperated by white spaces: ‚Äúa b c‚Äù a string with name separated by commas: ‚Äúa, b, c‚Äù Example: 12345678from collections import namedtuplePoint = namedtuple(&quot;Point&quot;, [&quot;x&quot;, &quot;y&quot;])&gt;&gt; Point# &lt;class &#x27;__main__.Point&#x27;&gt;&gt;&gt; Point(2, 4)# Point(x=2, y=4) Access and Edit Value It is very straight-forward to access a tuple‚Äôs attribute value using dot notation this gives namedtuple a great edge against dict or tuple. 12345Person = namedtuple(&#x27;Person&#x27;, &#x27;name children&#x27;)jj = Person(&#x27;Johnny J&#x27;, [&#x27;Tobby&#x27;])&gt;&gt; jj.children# [&#x27;Tobby&#x27;] Since namedtuple is immutable, you can‚Äôt assign value to its attribute; what you can do is to use ._replace(); and also, its value can be mutable, like a list. 12345678&gt;&gt; jj.children = [&#x27;Tobby&#x27;, &#x27;Wang&#x27;]# AttributeError: can&#x27;t set attribute&gt;&gt; jj.children.append(&#x27;Wang&#x27;)# Correct&gt;&gt; jj = jj._replace(name=&#x27;John J&#x27;)# Correct Using ._asdict() The built-in function ._asdict() converts namedtuple into a dictionary. 12345Person = namedtuple(&quot;Person&quot;, &quot;name age height&quot;)jane = Person(&quot;Jane&quot;, 25, 1.75)&gt;&gt; jane._asdict()# &#123;&#x27;name&#x27;: &#x27;Jane&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 1.75&#125; and to generate a namedtuple object from dictionary 1234567d = &#123; &#x27;name&#x27;: &#x27;Jane&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 1.75&#125;jane = Person(**d) @dataclass @dataclass came out after Python 3.7, which is similar to namedtuple, but they are mutable. thus, we can set value to a @dataclass attribute. 12345678910111213from dataclasses import dataclass@dataclassclass Person: name: str age: int country: str = &quot;Canada&quot;jane = Person(&quot;Jane&quot;, 25)&gt;&gt; jane.name = &quot;Jane Doe&quot;&gt;&gt; jane.name&#x27;Jane Doe&#x27; frozen attribute if we want @dataclass to behave like namedtuple with an un-editable ‚Äúprotected‚Äù attribute, just use @dataclass(frozen=True). override __iter__() @dataclass are also not iterable by default, unlike namedtuple. We can achieve that by implementing the special method .__iter__(): 1234567from dataclasses import astuple, dataclass@dataclassclass Person: ... def __iter__(self): return iter(astuple(self)) Subclassing namedtuple Subclassing namedtuple gives us additional functionality. 123456789101112BasePerson = namedtuple(&quot;BasePerson&quot;, &quot;name birthdate country&quot;)class Person(BasePerson): &quot;&quot;&quot;A namedtuple subclass to hold a person&#x27;s data.&quot;&quot;&quot; __slots__ = () def __repr__(self): return &quot;Name: &#123;&#125;, age: &#123;&#125; years old&quot;.format(self.name, self.age) @property def age(self): return (date.today() - self.birthdate).days // 365 In the above example, subclassing from namedtuple provides us better documentation (i.e. Person.__doc__), better string representation (i.e. print jane) and an extra property to access based off a Person‚Äôs instance attribute value. __new__() constructor Zechong Hu‚Äôs Blog - Inheritance for Python Namedtuples To override the constructor for namedtuple class with default value: 123456BasePerson = namedtuple(&quot;BasePerson&quot;, [&quot;name&quot;, &quot;birthdate&quot; ,&quot;country&quot;])class Person(BasePerson): __slots__ = () def __new__(cls, name, birthdate=&quot;2000.01.01&quot;, country=None): return super(Person, cls).__new__(cls, name, birthdate, country) __slots__ The special attribute __slots__ explicitly state what attribute you want your class instances to have. By default, when an instance (object) is created, __dict__ is used to store an object‚Äôs (writable) attributes. A dynamic dictionary: requires more memory takes longer time to create. Because namedtuple makes immutable instances that are lightweight, we need to prevent the creation of __dict__ to get the benefit while subclassing by setting __slots__ as empty tuple. In a more general note, please consider using __slots__ when creating tons of objects, this saves memory and time when instancing. Comparison __dict__ vs. __slots__ 123456789class Person(object): def __init__(self, name, age): self.name = name self.age = agejohn = Person(&#x27;john&#x27;, 15)&gt;&gt; john.__dict__# &#123;&#x27;age&#x27;: 15, &#x27;name&#x27;: &#x27;john&#x27;&#125; 123456789101112class Person(object): __slots__ = [&#x27;name&#x27;, &#x27;age&#x27;] def __init__(self, name, age): self.name = name self.age = agejohn = Person(&#x27;john&#x27;, 15)&gt;&gt; john.__slots__# [&#x27;name&#x27;, &#x27;age&#x27;]&gt;&gt; john.__dict__# AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__dict__&#x27; Reference Python Docs - Glossary Medium megha mohan - Mutable vs Immutable Objects in Python Real Python - namedtuple Stack Overflow - What are data classes and how are they different from common classes? Geeks for Geesk - Use of __slots__ Stack Overflow - Usage of __slots__? Stack Overflow - Difference between hash() and id() Stack Overflow - Two variables in Python have same id, but not lists or tuples Stack Overflow - What does hash do in python?","categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"style","slug":"style","permalink":"https://www.xingyulei.com/tags/style/"}]},{"title":"Communicate with Maya (2. Streaming Output)","slug":"maya-streaming","date":"2022-01-09T05:00:00.000Z","updated":"2022-09-24T03:29:06.821Z","comments":true,"path":"post/maya-streaming/","link":"","permalink":"https://www.xingyulei.com/post/maya-streaming/","excerpt":"","text":"Maya Connector I‚Äôve combined the two parts together and created the end result: Maya Connector tool. The tool will utilize command port to send open streaming command, which establishes the connection and enables the callback. The output is being sent back to the tool and the output is updated in the GUI. Introduction Make sure to see Part 1 for more context in socket programming and maya command port Like mentioned in the previous blog, this chapter is independent for enabling output streaming, but would work even better with command port to send command and get active response from Maya. This kind of log streaming feature can be helpful not only for monitoring but for catching errors like when Maya crashes, or to connect with an IDE similar to PyCharm‚Äôs plugin MayaCharm and Sublime‚Äôs plugin MayaSublime Listening Server Separation I‚Äôve been looking at Maya‚Äôs command port to see if the return message would be sufficient for debugging log, as command port already is a server. But it turns out that this approach is not recommended by many, as there‚Äôs little control on the return message as the TCP communication returns one message per command, more explained in the previous blog. The correct way suggested, and widely used is to stream Maya script output back to the external application. As shown in the graph, two separate communications are established instead of utilizing just the command port. external application (client) send command to Maya‚Äôs command port (server) where Maya would process normally. This is achieved through TCP to ensure no loss in sending command. Maya‚Äôs MCommandMessage callback triggers (client) send the latest output result to external application‚Äôs listening port (server). This is achieved through UDP to keep the connection fast and easy, but may result in lost in feedbacks (which isn‚Äôt that important) Procedures to establish listening server, need to use a different port number than the command port number if we are also connecting to it. 12345678910111213141516import socketSERVER = &#x27;127.0.0.1&#x27;PORT = 5051ADDR = (SERVER, PORT)server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)server.bind(ADDR)while True: data = server.recvfrom(1024) message = data[0] address = data[1] print(message) On the maya client side, there are two parts: setup MCommendMessage callback stream the data to the listening server 123456789101112131415161718192021222324252627import socketimport maya.OpenMaya as omSERVER = &#x27;127.0.0.1&#x27;PORT = 5051if &#x27;STREAM_CALLBACK&#x27; in globals(): try: om.MMessage.removeCallback(STREAM_CALLBACK) except RuntimeError: passSTREAM_CALLBACK = Nonedef openStream(addr=(SERVER, PORT)): global STREAM_CALLBACK print(&quot;Enable Streaming ScriptEditor at (&#123;&#125;:&#123;&#125;)\\n&quot;.format(addr[0], addr[1])) STREAM_CALLBACK = om.MCommandMessage.addCommandOutputCallback(streamToConsole, addr)def closeStream(): global STREAM_CALLBACK print(&quot;Disable Streaming ScriptEditor\\n&quot;) om.MMessage.removeCallback(STREAM_CALLBACK) STREAM_CALLBACK = None borrowed some code from MayaSublime for stringIO 1234567891011121314151617181920212223242526272829303132def streamToConsole(msg, mtype, addr): buf = StringIO() buf.seek(0) buf.truncate() buf.write(msg) buf.seek(0) # start with trying to send 8kb packets bufsize = 8*1024 # loop until the buffer is empty while True: while bufsize &gt; 0: # save our position in case we error and need to roll back pos = buf.tell() part = buf.read(bufsize) if not part: # buffer is empty. Nothing else to send return try: client.sendto(part, addr) except Exception as e: if e.errno == errno.EMSGSIZE: # we have hit a message size limit. # scale down and try the packet again bufsize /= 2 buf.seek(pos) continue # some other error raise # message sent without error break Message Type Command message type support: 1234567891011121314if mtype == om.MCommandMessage.kWarning: buf.write(&#x27;# Warning: &#x27;) buf.write(msg) buf.write(&#x27; #\\n&#x27;)elif mtype == om.MCommandMessage.kError: buf.write(&#x27;// Error: &#x27;) buf.write(msg) buf.write(&#x27; //\\n&#x27;)elif mtype == om.MCommandMessage.kResult: buf.write(&#x27;# Result: &#x27;) buf.write(msg) buf.write(&#x27; #\\n&#x27;)else: buf.write(msg) Logging GUI Like a logger, instead of sending output string to standard output, I created a QPlainTextEdit and use insertPlainText(string) to display it. We opened a thread to receive data, so that we still have control over the main tool, and can send command to maya if wanted. Note: we shouldn‚Äôt update the GUI in the listening thread, instead we emit a custom signal and pass the return message as argument, we then create a custom slot to handle GUI update. so instead of doing: 1234while True: data = server.recvfrom(1024) message = data[0] self.ui_text_edit.insertPlainText(message) we should be doing: 1234while True: data = server.recvfrom(1024) message = data[0] self.message_received.emit(message) Clean up During application close, we need to do the following clean up: send command to Maya to remove the callback close the tool‚Äôs UDP listening server end the thread to the listening server References Maya Help - OpenMaya.MCommandMessage Class Reference Google Groups - Extracting data from Output Window Github - MayaCharm Github - MayaSublime","categories":[{"name":"maya communication","slug":"maya-communication","permalink":"https://www.xingyulei.com/categories/maya-communication/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"socket","slug":"socket","permalink":"https://www.xingyulei.com/tags/socket/"},{"name":"threading","slug":"threading","permalink":"https://www.xingyulei.com/tags/threading/"}]},{"title":"Communicate with Maya (1. Command Port)","slug":"maya-commandport","date":"2021-12-17T05:00:00.000Z","updated":"2022-09-10T13:53:07.062Z","comments":true,"path":"post/maya-commandport/","link":"","permalink":"https://www.xingyulei.com/post/maya-commandport/","excerpt":"","text":"Maya Connector The end result of this two-part blog is the Maya Connector tool. This external standalone tool is able to send command to maya and receive real-time feedback from maya‚Äôs script editor output. Introduction If you are already familiar with maya command port and socket programming, skip to Part 2 for Maya output streaming. Although there are a lot of tools that can run internally in Maya which facilitate the pipeline. The capability of communicating (monitor and control) with Maya externally is very handy. Why? we sometime don‚Äôt need to interact with Maya GUI directly or have way too many maya instances to manage. examples are: sending cross-application remote command to active maya sessions or syncing between different maya sessions batch processing on either maya standalone sessions or active maya sessions This requires two components which I will be covering: command port: sending commands to maya to execute output streaming: actively listening/receiving maya outputs (next blog) These two parts can work independently, but are powerful as a whole. Also, references in creating maya standalone sessions Using cmds.commandPort() cmds.commandPort(): The command port comprises a socket to which a client program may connect Traditional socket connection provides the basic communication between client and server. But Maya‚Äôs built-in command port provides us a very convenient way of sending command for maya to execute. Procedures Open command port The port needs to be opened on Maya‚Äôs (server) end first in order for client to send command; ideally this would be achieved by adding a cmds.commandPort() open during Maya startup. 1234import maya.cmds as cmdsport = 5050if not cmds.commandPort(&quot;:&#123;&#125;&quot;.format(port), query=True): cmds.commandPort(name=&quot;:&#123;&#125;&quot;.format(port)) Send command through an external application the command sent can be either MEL or Python command which must be specified during the opening the port determined by sourceType flag 123456789101112131415import socket# the local hostHOST = &#x27;127.0.0.1&#x27; PORT = 5050ADDR = (HOST, PORT)def sendCommand(): client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(ADDR) command = &#x27;polyCube()&#x27; client.send(command) client.close() TCP Return Message We are using TCP for our communication protocol to guarantee command being sent when the connection is established successfully. Important: At this point, we are not attempting to use client.recv(xxx) for data returning from Maya, unless it‚Äôs a super simple single statement. Trying to use client.recv(xxx) will result in either None data returned or single return as it is the behaviour of TCP. See here Also sending command line by line is not reliable as there are no context between lines for Maya server to understand. Unless it‚Äôs super simple series of commands In order to receive output, we need a custom listening server to do that which is explained in Part 2. SourceType We are opening a default command port which takes MEL input, we don‚Äôt need to specify Python as source type, as we can just use python(&quot;[insert command here]&quot;) to wrap it into MEL, this can be blocks of independent codes or importing and executing python files. Mixed Quotation symbol Note that when doing a source type conversion with a string type command , quotation symbol may cause conflicts. the solution is to replace it with backslash before quotation symbol. 1command = &#x27;python(&quot;&#x27; + command.replace(r&#x27;&quot;&#x27;, r&#x27;\\&quot;&#x27;) + &#x27;&quot;)&#x27; Socket Programming Introduction It is also very helpful to know the basics of socket programming in Python to better understand how server and client communicates, and the difference between TCP and UDP, which will be used in the next part. This tutorial is very handy, and the following are a basic template for setting up client and server using socket and thread Reference Google Group - Receiving data from commandPort Stack Overflow - c socket programming, only receiving one line at a time CG Talk - Telnet or Socket: no result back from Maya Youtube - Python Socket Programming Tutorial","categories":[{"name":"maya communication","slug":"maya-communication","permalink":"https://www.xingyulei.com/categories/maya-communication/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"socket","slug":"socket","permalink":"https://www.xingyulei.com/tags/socket/"},{"name":"command port","slug":"command-port","permalink":"https://www.xingyulei.com/tags/command-port/"}]},{"title":"QEnum vs. QFlags","slug":"qt-enum-flag","date":"2021-12-06T05:00:00.000Z","updated":"2022-09-10T13:50:25.515Z","comments":true,"path":"post/qt-enum-flag/","link":"","permalink":"https://www.xingyulei.com/post/qt-enum-flag/","excerpt":"","text":"Introduction I often take Qt namespace for granted, it became a natural habit of setting a Qt parameter using Qt namespace, for instance: setting alignment for a QStandardItem 123item = QtGui.QStandardItem(&#x27;test&#x27;)item.setTextAlignment(QtCore.Qt.AlignRight)type(QtCore.Qt.AlignRight) Here, the Qt.AlignRight is an AlignmentFlag Enum type object which has a value of 0x0002 or 2, which creates the behavior of aligning with the right edge. Now, let‚Äôs try parsing the alignment of the QStandardItem again, using: 12align = item.textAlignment()type(align) this returns a PyQt5.QtCore.Alignment object, which we don‚Äôt really know the value of. And also note that it is not a AlignmentFlag object like previously. So, What‚Äôs the difference between these two, and how should I retrieve the namespace value? QEnum and QFlags QFlags is used to store combinations of Enum, which provides type checking safety. thus, Alignment QFlags type is simply a typedef for AlignmentFlag QEnum. Qt.AlignmentFlag is QEnum type; AlignmentFlag being the enum name Qt.Alignment is QFlags type; Alignment being the type name there‚Äôs also non-flag enums, which have the same type and enum name Example Declaration of both object types 12345678# &lt;class &#x27;PyQt5.QtCore.AlignmentFlag&#x27;&gt;align_flag = QtCore.Qt.AlignRightalign_flag_value = 2# &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;align = QtCore.Qt.Alignment(align_flag)# or &lt;class &#x27;int&#x27;&gt;align = QtCore.Qt.Alignment(align_flag_value) As you can see, setAlignment() takes a Qt.Alignment parameter, which means that any combination of Qt.AlignmentFlag values, or int, is legal. 123456789item = QtGui.QStandardItem(&#x27;test&#x27;)# Alignment type is compatible with either int or AlignmentFlag(Enum)# &lt;class &#x27;PyQt5.QtCore.AlignmentFlag&#x27;&gt;item.setTextAlignment(QtCore.Qt.AlignRight)# or &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;item.setTextAlignment(align)# or &lt;class &#x27;int&#x27;&gt;item.setTextAlignment(2) The return value is QFlags type, but it can be cast to an integer type to reveal its Enum value 12345# &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;align = pathItem.textAlignment()# to get the Alignment value, convert the QFlags to intint(align) Parse Namespace and Value Mapping Still not sure what the Enum value means? you can either check the docs, or use this to print out a mapping of the namespace and its corresponding value 12345678910111213def enum_mapping(cls, enum): mapping = dict() for key in dir(cls): value = getattr(cls, key) if isinstance(value, enum): mapping[key] = value return mappingenum = enum_mapping(QtCore.Qt, QtCore.Qt.AlignmentFlag)# enum = enum_mapping(QtWidgets, QtWidgets.QStyle)for item in sorted(enum.items(), key=str): print(&#x27;%s: %s&#x27; % item) Reference GitHub - qutebrowser Qt Doc - QFlags Class Reference Qt Doc - QEnum/QFlag","categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"}]},{"title":"Find PID and End Process in Windows (Python)","slug":"py-end-process","date":"2021-10-25T04:00:00.000Z","updated":"2022-11-02T03:35:21.496Z","comments":true,"path":"post/py-end-process/","link":"","permalink":"https://www.xingyulei.com/post/py-end-process/","excerpt":"","text":"Introduction Interacting with Windows shell to end process is very common, there are many ways to do so, like through the traditional batch script but to gain more flexibility, using python is probably a better idea. os.system is not the most elegant way to use, and it is meant to be replaced by subprocess subprocess comes with Python standard library and allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes psutil (python system and process utilities) is a cross-platform library for retrieving information on running processes and system utilization. However, it is a third-party library Bare Minimum the bare minimum command to kill process utilizes window‚Äôs taskkill; which doesn‚Äôt matter if you use os.system or subprocess 1234567import osPROCESS = &#x27;notepad.exe&#x27;STATUS = &#x27;running&#x27; # running or not respondingCMD = r&#x27;taskkill /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; &#x27;.format(PROCESS, STATUS)os.system(CMD) Using os.system Now consider a more flexible case where you want to gather information about the processes like its PID, and then proceed on ending the process. One of the downside of window shell command is that the output can‚Äôt be passed on to other command, the output is just text. Therefore, we output the text to a csv file which we will later process. 12345678910111213141516171819202122232425import csvimport osimport signalimport subprocessPROCESS = &#x27;notepad.exe&#x27;STATUS = &#x27;running&#x27; # running or not respondingTMP = r&#x27;&#123;&#125;/Desktop/tmp.txt&#x27;.format(os.environ[&#x27;userprofile&#x27;])CMD = r&#x27;tasklist /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; /fo &quot;csv&quot; &gt; &quot;&#123;&#125;&quot;&#x27;.format(PROCESS, STATUS, TMP)# output as csv formatos.system(CMD)with open(TMP, &#x27;r&#x27;) as temp: reader = csv.reader(temp) header = next(reader) pids = [int(row[1]) for row in reader]# kill processfor pid in pids: os.kill(pid, signal.SIGTERM) # or signal.SIGKILL print(&#x27;killed process with pid: &#123;&#125;&#x27;.format(pid))if os.path.exists(TMP): os.remove(TMP) Using subprocess With subprocess, we no longer need to create a temp file to store the output. Using psutil 1234567891011121314151617import psutilPROGRAM = r&#x27;maya.exe&#x27;def findProcess(name): procs = list() #Iterate over the all the running process for proc in psutil.process_iter(): try: if proc.name() == name and proc.status() == psutil.STATUS_RUNNING: pid = proc.pid procs.append(pid) except: pass return procsprocesses = findProcess(PROGRAM) we can find process start time by using 12import timestartTime = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(proc.create_time())) to kill process, either kill() or terminate() will work respectfully, SIGKILL or SIGTERM 1234p = psutil.Process(PID)p.terminate()p.kill()p.wait Bonus: Find Open Port (for socket connection) 123456process = psutil.Process(pid=PID)connections = process.connections(kind=&#x27;tcp4&#x27;)for c in [x for x in connections if x.status == psutil.CONN_LISTEN]: # gets the port number print(&#x27;port opened: &#123;&#125;&#x27;.format(c.laddr[-1])) Bonus: Find Main Window Title ctypes is a foreign function library for python, resulting a not-pythonic function Reference Microsoft Doc - tasklist ThisPointer - Python : Check if a process is running by name and find it‚Äôs Process ID (PID) Johannes Sasongko - Win32 Python: Getting all window titles Stack Overflow - Obtain Active window using Python Microsoft Docs - winuser.h header","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/tags/windows/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"}]},{"title":"State Machine in Unity Scripting API","slug":"unity-api-statemachine","date":"2021-08-29T04:00:00.000Z","updated":"2022-09-10T13:48:33.993Z","comments":true,"path":"post/unity-api-statemachine/","link":"","permalink":"https://www.xingyulei.com/post/unity-api-statemachine/","excerpt":"","text":"Introduction This post is not about state machine basic, rather how we would setup/access state machine parameters. There is a higher level Animator class to access a part of the animator features, but we need to use Unity‚Äôs Animations package in order to dive deeper. 1using UnityEditor.Animations; There‚Äôs a lot of parts composing Unity‚Äôs Animator: Layer, Parameter, State machine (and everything inside it including states of different kind, transition between states), there are of course multiple parameters inside a single state. The examples in this post is only about accessing states and state machines, as the rest is translatable. We start from the root: Base layer, if you think about it, a layer is essentially a state machine. Inside this root state machine are sets of states (including blend tree/state/sub-state machine) 12// getting the base layer state machineAnimatorStateMachine rootStateMachine = controller.layers[0].stateMachine; (Base Layer) Next up, a very confusing part of the scripting process are the definition of AnimatorStateMachine vs. ChildAnimatorStateMachine and AnimatorState vs. ChildAnimatorState. I really wish Unity provides internal ways to cast these to each other. To summarize: ChildAnimatorStateMachine[] and ChildAnimatorState[] is used in conjunction with Arrays as AnimatorStateMachine.states and AnimatorStateMachine.stateMachines will return the previous mentioned type. Instead of casting, they have an internal property ChildAnimatorStateMachine.stateMachine and ChildAnimatorState.state which respectively returns AnimatorStateMachine and AnimatorState type object States All states (state or. state with blendtree inside) 1234567891011121314151617181920212223ChildAnimatorState[] childStates = rootStateMachine.states;foreach(var childState in childStates)&#123; AnimatorState state = childState.state; print(state.name); // state with blendtree try &#123; var blendTree = (BlendTree)state.motion; foreach (var child in blendTree.children) &#123; print(&quot;\\t&quot; + child.motion.name); &#125; &#125; // simple state catch &#123; print(&quot;\\t&quot; + state.motion.name); &#125;&#125; (Simple state only contains a single clip) (BlendTree nested in a state) Sub-state Machine 12345678910111213141516ChildAnimatorStateMachine[] childSubStateMachines = rootStateMachine.stateMachines;foreach(var childSubStateMachine in childSubStateMachines)&#123; // Convert `ChildAnimatorStateMachine` to `AnimatorStateMachine` AnimatorStateMachine subStateMachine = childSubStateMachine.stateMachine; print(subStateMachine.name); // all states in idle sub state machine ChildAnimatorState[] states = subStateMachine.states; foreach (var childState in states) &#123; print(&quot;\\t&quot; + childState.state.name); &#125;&#125; (Essentially, another sub layer of state machine) Reference Unity Manual - State Machine Basics Unity Scripting API - AnimatorStateMachine Unity Scripting API - Animator.Play","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/tags/unity/"},{"name":"c#","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]},{"title":"How to Resize QPixmap","slug":"qt-pixmap-scale","date":"2021-08-22T04:00:00.000Z","updated":"2022-09-10T13:50:16.144Z","comments":true,"path":"post/qt-pixmap-scale/","link":"","permalink":"https://www.xingyulei.com/post/qt-pixmap-scale/","excerpt":"","text":"Introduction During my attempts to create custom alignment push buttons, I encountered an issue with icon having jagged looking (even if with low resolution). I use a custom paintEvent() drawing QPixmap, and this happens when I use scaled() to resize my pixmap. I noticed the icon does not have the jagged look with the built-in setIcon() and setIconSize in QPushButton. So I know there‚Äôs some wrong with my approach. Example To really show out the difference, I first reduce the resolution of my image. 12345low_rez = QtCore.QSize(40, 40)high_rez = QtCore.QSize(400, 400)pixmap = QtGui.QPixmap(path)pixmap = pixmap.scaled(low_rez) I then increase the resolution back to normal. The default scale uses FastTransformation 1pixmap = pixmap.scaled(high_rez) This is the result: The Solution I‚Äôve searched many forums and people were all saying: enable the SmoothTransformation, I tried but didn‚Äôt work. Later on I found out that the Qt translation to Python has a mis-match keyword argument: so instead of transformMode=Qt.SmoothTransformation, it should actually be mode=Qt.SmoothTransformation So here‚Äôs the solution: 12345pixmap = pixmap.scaled( high_rez, aspectRatioMode=QtCore.Qt.KeepAspectRatio, mode=QtCore.Qt.SmoothTransformation) and result: Extra I also found post saying it might be some settings with the QPainter, but it is not the issue for me. 1234painter = QtGui.QPainter(self)painter.setRenderHint(QtGui.QPainter.Antialiasing, True)painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, True)painter.drawPixmap(self.pixmap) Reference Qt Documentation - QPixmap Class","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"}]},{"title":"Qt Left-align Icon, Center-align Text in Python","slug":"qt-button-alignment","date":"2021-08-21T04:00:00.000Z","updated":"2022-09-10T13:50:40.363Z","comments":true,"path":"post/qt-button-alignment/","link":"","permalink":"https://www.xingyulei.com/post/qt-button-alignment/","excerpt":"","text":"Introduction I recently needed to display a series of buttons for my shelf tool, the problem I‚Äôm having with this is that although every button has an icon and text label, they are displayed as different width. Using center-align made it look not uniform. Should I go with left-align? Well, there are buttons with relatively longer label and some with shorter ones, so it doesn‚Äôt look nice either with empty spaces on the right side. So the solution is obvious, separate the alignment of the icon and the label: the icon stays left-align to give a clear sign of broader, and the label would be center-align to make the width look uniform. (Left: default center align, Center: left align, Right: custom align) In the following section, I will demonstrate three methods of achieving this custom alignment effect: Overriding QPushButton paintEvent() This method subclass from QPushButton and override the paintEvent() and sizeHint() to extend how a button is drawn; The alignment of content of the button is default to center-aligned, but we make the pixmap to be drawn on the left-side (5px margin against the left border) With this method, we no longer use QIcon, we use QPixmap instead; that is why we created a custom setPixmap() method to our MyButton to give user access to the pixmap being drawn. Custom layout inside pushbutton Here is another interesting approach: this method defaults its style to left-aligned, but it only contains the icon. What about the push button label(text)? It is actually a QLabel placed in the QPushButton layout, and being vertically center-aligned; To modify the push button text, use setText() to the label inside the button layout, instead of the button. Use QProxyStyle I haven‚Äôt personally test it because my Qt python binding doesn‚Äôt have QProxyStyle included but it‚Äôs worth putting it here in case someone is able to try it. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class ProxyStyle(QtWidgets.QProxyStyle): def drawControl(self, element, option, painter, widget=None): if element == QtWidgets.QStyle.CE_PushButtonLabel: icon = QtGui.QIcon(option.icon) option.icon = QtGui.QIcon() super(ProxyStyle, self).drawControl(element, option, painter, widget) if element == QtWidgets.QStyle.CE_PushButtonLabel: if not icon.isNull(): iconSpacing = 4 mode = ( QtGui.QIcon.Normal if option.state &amp; QtWidgets.QStyle.State_Enabled else QtGui.QIcon.Disabled ) if ( mode == QtGui.QIcon.Normal and option.state &amp; QtWidgets.QStyle.State_HasFocus ): mode = QtGui.QIcon.Active state = QtGui.QIcon.Off if option.state &amp; QtWidgets.QStyle.State_On: state = QtGui.QIcon.On window = widget.window().windowHandle() if widget is not None else None pixmap = icon.pixmap(window, option.iconSize, mode, state) pixmapWidth = pixmap.width() / pixmap.devicePixelRatio() pixmapHeight = pixmap.height() / pixmap.devicePixelRatio() iconRect = QtCore.QRect( QtCore.QPoint(), QtCore.QSize(pixmapWidth, pixmapHeight) ) iconRect.moveCenter(option.rect.center()) iconRect.moveLeft(option.rect.left() + iconSpacing) iconRect = self.visualRect(option.direction, option.rect, iconRect) iconRect.translate( self.proxy().pixelMetric( QtWidgets.QStyle.PM_ButtonShiftHorizontal, option, widget ), self.proxy().pixelMetric( QtWidgets.QStyle.PM_ButtonShiftVertical, option, widget ), ) painter.drawPixmap(iconRect, pixmap)if __name__ == &quot;__main__&quot;: app = QtWidgets.QApplication(sys.argv) app.setStyle(&#x27;fusion&#x27;) proxy_style = ProxyStyle(app.style()) app.setStyle(proxy_style) w = QtWidgets.QWidget() lay = QtWidgets.QVBoxLayout(w) icons = [ app.style().standardIcon(standardIcon) for standardIcon in ( QtWidgets.QStyle.SP_MediaPlay, QtWidgets.QStyle.SP_MediaPause, QtWidgets.QStyle.SP_MediaSeekBackward, QtWidgets.QStyle.SP_MediaSeekForward, ) ] for text, icon in zip(&quot;Play Pause Backward Forward&quot;.split(), (icons)): button = QtWidgets.QPushButton(text) button.setIcon(icon) lay.addWidget(button) w.show() sys.exit(app.exec_()) Reference Stack Overflow - QPushButton icon aligned left with text centered Stack Overflow - qpushbutton icon left alignment text center alignment","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Qt Detect Double-Click and Hover Effect","slug":"qt-detect-click","date":"2021-08-08T04:00:00.000Z","updated":"2022-09-10T13:50:33.740Z","comments":true,"path":"post/qt-detect-click/","link":"","permalink":"https://www.xingyulei.com/post/qt-detect-click/","excerpt":"","text":"Introduction I want to showcase some examples that I used to create push button with custom behaviours. (Double click button) (Button hover effect) Double Click Problem with MouseButtonDblClick Hey, I thought this would be easy, since Qt offers a built-in event type: QEvent.MouseButtonDblClick. But the issue is it couldn‚Äôt distinguish a single click vs. a double click. Which means, the single click event will also be invoked when double-clicked. Solution using timeout Subclass QPushButton and override eventFilter() Using eventFilter() eventFilter() takes three argument, a QObject that the filter is installed on, a QObject that is being watched, and a reference to a QEvent type object to be filtered. Be sure to add self.installEventFilter(self) so to override event filtering. Now it‚Äôs only the matter of adding condition logic to filter out different event types such as QEvent.MouseButtonPress and QEvent.MouseButtonDblClick with event.type() We can also filter which button is being used using event.button(). timeout Using a built-in timer from Qt QTimer(), we are able to fire off timer events between our clicks. A timeout signal is fired after a certain interval we defined using setInterval(). the timeout() method is then used to determine what custom signal to emit. Custom Signal Note that I created three custom signals for three different clicking type I want to register. 123right_clicked = QtCore.Signal()left_clicked = QtCore.Signal()double_clicked = QtCore.Signal() This enhanced the usability of the click behaviour, meaning that this extended QPushbutton can tell whether the user did a single left or right click or a double click. In my example above, I wrapped all the click events in the class itself. But in the main application, we can also instantiate MyButton and connect click event to method of our choice. 123btn = MyButton(&#x27;Button1&#x27;)btn.doubled_clicked.connect(func1)btn.right_clicked.connect(func2) Hover Effect As a bonus, I want to include a ‚ÄúButton‚Äù with custom hover effect, but it is technically a QLabel object with extended functionality, which is being used in my SnapTool. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class HoverBtn(QtWidgets.QLabel): clicked = QtCore.Signal(QtCore.QObject) def __init__(self, parent): super(HoverBtn, self).__init__(parent) style = &quot;&quot;&quot; QFrame&#123; border-radius: 25px; border-width: 2px; border-style: solid; border-color: rgb(20, 20, 20); background-color: rgb(170, 170, 170); &#125; &quot;&quot;&quot; self.installEventFilter(self) self.setStyleSheet(style) def eventFilter(self, obj, event): if event.type() == QtCore.QEvent.Enter: self.set_outline(1) return True elif event.type() == QtCore.QEvent.Leave: self.set_outline(0) return True if event.type() == QtCore.QEvent.MouseButtonPress \\ and event.button() == QtCore.Qt.LeftButton: self.clicked.emit(self) return True return False def set_outline(self, status): &quot;&quot;&quot; Update widget stylesheet when highlight &quot;&quot;&quot; style = self.styleSheet() border_pattern = r&#x27;border-color\\: rgb\\(\\d+, \\d+, \\d+\\)&#x27; dark = &#x27;border-color: rgb(20, 20, 20)&#x27; light = &#x27;border-color: rgb(21, 255, 9)&#x27; if status == 1: style = re.sub(border_pattern, light, style) elif status == 0: style = re.sub(border_pattern, dark, style) self.setStyleSheet(style) The hover effect is achieved by swapping stylesheet properties, and the rest of the event filtering is very similar to the previous double click button. Reference Qt Centre - Double Click Capturing Stack Overflow - Pyqt Mouse MouseButtonDblClick event","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Qt Connect Signal in For Loop","slug":"qt-signal-in-for-loop","date":"2021-04-17T04:00:00.000Z","updated":"2022-09-10T13:39:51.964Z","comments":true,"path":"post/qt-signal-in-for-loop/","link":"","permalink":"https://www.xingyulei.com/post/qt-signal-in-for-loop/","excerpt":"","text":"Introduction We often need to create ui elements on the fly, sometimes we do it in something like a for loop. An example would be creating a series of QPushButton and connect them to a function through different argument values. An example is shown below: 1234567891011121314151617class Demo(QtWidgets.QWidget): def __init__(self, parent=None): super(Demo, self).__init__(parent) # initialization object layout = QtWidgets.QVBoxLayout() for index in range(6): pushbutton = QtWidgets.QPushButton(&#x27;button &#123;&#125;&#x27;.format(index)) pushbutton.clicked.connect(lambda: self.trigger(index)) layout.addWidget(pushbutton) self.setLayout(layout) @staticmethod def trigger(index): print(&#x27;button &#123;&#125; clicked&#x27;.format(index)) Here I created six QPushButton and when I click them it should output which button is being clicked. But if you run this script and try to click each button it will always output ‚Äúbutton 5 clicked‚Äù (aka, the last button). It is safely to assume that the argument passed during the for loop always result in the last index. Explanation Based on a kind response from stackoverflow: lambdas do not store the value of button when it is defined. The code describing the lambda function is parsed and compiled but not executed until you actually call the lambda. Therefore, when a button is clicked, the current value of that variable is used (the last index). What‚Äôs the solution? Lambda with solid variable Passing solid variable to the lambda 1pushbutton.clicked.connect(lambda _, i=index: self.trigger(index=i)) Note that we created another temporary variable before index as the first argument passed in the lambda will always return as False. Because Qt defines the signal QAbstractButton.clicked to take a single argument with a default value of False. Since your lambda is handling that signal, it gets called with False. Partial approach Use functools.partial also works 12from functools import partialpushbutton.clicked.connect(partial(self.trigger, index)) Note that in some cases where wrappers are being used in trigger function, it could be trickier to use this as oppose to lambda Reference Stack Overflow - First lambda capture of local variable always False Stack Overflow - Connecting multiples signal/slot in a for loop in pyqt","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"}]},{"title":"Qt Custom Widget, Dialog, MessageBox (no .ui file)","slug":"qt-template-no-ui","date":"2021-02-11T05:00:00.000Z","updated":"2022-09-10T13:49:04.441Z","comments":true,"path":"post/qt-template-no-ui/","link":"","permalink":"https://www.xingyulei.com/post/qt-template-no-ui/","excerpt":"","text":"UI Module without .ui file There is a different between inheriting from QWidget class vs QMainWindow Inheriting from QWidget: 12345678910111213141516class InheritQWidget(QtWidgets.QWidget): def __init__(self, parent=None): super(InheritQWidget, self).__init__(parent) # initialization object layout = QtWidgets.QGridLayout() listWidget = QtWidgets.QListWidget() #treeWidget = QtWidgets.QTreeWidget() # set # treeWidget.setParent(listWidget) layout.addWidget(listWidget) self.setLayout(layout) listWidget.addItem(&#x27;item A&#x27;) listWidget.addItem(&#x27;item B&#x27;) Inheriting from QMainWindow 123456789101112131415161718class InheritQMainWindow(QtWidgets.QMainWindow): # Window inherits from QMainWindow the layout is already defined # to accommodate any toolbars or any other QMainWindow component # use the setCentralWidget() to accommodate this def __init__(self, parent=None): super(InheritQMainWindow, self).__init__(parent) # initialization object widget = QtWidgets.QWidget() layout = QtWidgets.QGridLayout() # set self.setCentralWidget(widget) widget.setLayout(layout) label = QtWidgets.QLabel(&#x27;test&#x27;) layout.addWidget(label, 0, 0) Custom Dialog Sometimes you need a quick window to display some information, but the built-in qt message boxes aren‚Äôt suitable for the job. Custom Widget You can choose to create a widget class, but also for saving time, you can create a temporary custom widget example: Couple of things worth noting: correctly initialize the widget self.customWidget = QtWidgets.QWidget() will allow widget be child of the main window, thus allow widget to close when main window is closed so not customWidget = QtWidgets.QWidget() or self.customWidget = QtWidgets.QWidget(self) use getattr in combination with QStyle and name of the built-in icon use win.setAttribute(QtCore.Qt.WA_DeleteOnClose) to make sure the child widget is killed after main window is closed, because default close only hides window objects self.customWidget.show() is the core command to call it to display Custom QMessageBox add custom buttons to the QMessageBox layout 123456789101112131415dialog = QtWidgets.QMessageBox()dialog.setText(&quot;Overwrite?&quot;)dialog.setIcon(QtWidgets.QMessageBox.Critical)yes_btn = dialog.addButton(&quot;Yes!&quot;, QtWidgets.QMessageBox.YesRole)no_btn = dialog.addButton(&quot;No&quot;, QtWidgets.QMessageBox.NoRole)abort_btn = dialog.addButton(&quot;Abort&quot;, QtWidgets.QMessageBox.RejectRole)dialog.exec_()if dialog.clickedButton() == yes_btn: print(&quot;yes&quot;)elif dialog.clickedButton() == no_btn: print(&quot;no&quot;)elif dialog.clickedButton() == abort_btn: print(&quot;abort&quot;) Don‚Äôt use the return value of QMessageBox::exec, as it only makes sense for standard buttons. Also don‚Äôt rely on buttonRole as multiple buttons could be sharing the same role. Reference Programiz - Python getattr() GUIS - Q&amp;A: Are there any built-in QIcons?","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Qt Context Menu Template (Menu, Submenu and Action)","slug":"qt-template-context-menu","date":"2021-02-05T05:00:00.000Z","updated":"2022-09-10T13:49:19.105Z","comments":true,"path":"post/qt-template-context-menu/","link":"","permalink":"https://www.xingyulei.com/post/qt-template-context-menu/","excerpt":"","text":"Reference Stack Overflow - How to add submenu in Qt","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]},{"title":"Qt Custom Sorting","slug":"qt-sorting","date":"2021-01-23T05:00:00.000Z","updated":"2022-09-10T13:49:43.499Z","comments":true,"path":"post/qt-sorting/","link":"","permalink":"https://www.xingyulei.com/post/qt-sorting/","excerpt":"","text":"Sorting Overview Sorting happens a lot in qt viewports like list, table and tree. Using convenience class such as item-based widget provides limited sorting options. One common thing may occur when you are sorting items is the widget treats their value as string instead of int, which will result incorrect ordering 12345678910111213141516list = [&quot;3&quot;, &quot;1&quot;, &quot;2&quot;, &quot;20&quot;, &quot;92&quot;, &quot;89&quot;, &quot;40&quot;, &quot;10&quot;, &quot;11&quot;]if __name__ == &#x27;__main__&#x27;: app = QtWidgets.QApplication(sys.argv) mywidget = QtWidgets.QTableWidget() mywidget.insertColumn(0) for index in range(len(list)): mywidget.insertRow(index) value = list[index] item = QtWidgets.QTableWidgetItem(value) mywidget.setItem(index, 0, item) mywidget.sortItems(0, QtCore.Qt.AscendingOrder) mywidget.show() sys.exit(app.exec_()) This will sort the list of items based on their string, so the order will be: 1234- 1- 10- 11- 2 instead of 123- 1- 2- ... So naturally, you would need to specify the item value as integer type, but you cannot instantiate item with integer, but setData() will work 1234# intead of item = QtWidgets.QTableWidgetItem(int(value))# do thisitem.setData(QtCore.Qt.ItemDataRole, int(value)) Now everything will sort by numeric order Custom Sorting (Operator override) What if you need more than numeric value for your data, for example, when displaying frame number, you would like to include frame range too. Like frame 1, frame 2, frame 3-7, frame 8, frame 9-14. It looks like using string is the only option. This time you need to override value compare operator for these value, that is making your own item class like the following example the __lt__ is the less than operator (&lt;) Everything should behave correctly Custom Sorting (QSortFilterProxyModel Class) https://doc-snapshots.qt.io/qtforpython-5.15/PySide2/QtCore/QSortFilterProxyModel.html Reference Stack Overflow - Is it possible to sort numbers in a QTreeWidget column?","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"}]},{"title":"Verlet Integration in Unity","slug":"unity-verlet-integration","date":"2020-11-19T05:00:00.000Z","updated":"2022-09-24T03:34:11.987Z","comments":true,"path":"post/unity-verlet-integration/","link":"","permalink":"https://www.xingyulei.com/post/unity-verlet-integration/","excerpt":"","text":"Introduction When simulating a particle movement, we naturally think of Euler integration, where the position of the particle can be expressed as such: (free falling motion) x=0.5‚àóg‚àót2x = 0.5*g*t^2 x=0.5‚àóg‚àót2 This is an extremely easy use case. The position of the particle can be represented using a function of time. But in real life, a particle can be affected by multiple forces (and even unstabled force caused non-constant acceleration) and Euler integration also has inaccurate estimation when time step is very large. In my understanding, the use of Verlet is good for complex particle movement. What it essentially does is relate force with position rather than velocity. The process first calculate the current particle position and the position one step back: velocity=X current ‚àíX previous ;velocity = X~current~-X~previous~; velocity=X current ‚àíX previous ; X previous =X current ;X current =X current +velocityX~previous~ = X~current~; X~current~ = X~current~+velocity X previous =X current ;X current =X current +velocity This works magically, here‚Äôs some sample code to help understand it, and a Demo. 1234// without other influence, the following updates the particle positionvelocity = posNow - posOld;posOld = posNow;posNow += velocity; Calculate Force What if we want to add gravity to the particle like the free falling above? Just add the acceleration to the current position, and the change will add-up on the next integration. The following also applies to forces like friction. 1posNow += GRAVITY; // not sure if we should multipy Time.deltatime Constraint Constraint are usually in the form of constraining particles to a specific distance, like spring. When mulitple constraints acts on single particle, one constraint will affect the other. To solve this, loop the constraint multiple time for each time step. 123456789101112131415161718192021222324252627for (int count = 0; count &lt; ITERATION; count++)&#123; Constriants();&#125;// constraint on rope to make fixed distance between segmentsvoid Constriants()&#123; for(int index = 0; index &lt; segment-1; index++) &#123; float distance = (currentSeg.posNow - nextSeg.posNow).magnitude; float error = Mathf.Abs(distance - ropeDist); Vector2 changeDir = Vector2.zero; if (distance &gt; ropeDist) changeDir = (currentSeg.posNow - nextSeg.posNow).normalized; else if (distance &lt; ropeDist) changeDir = (nextSeg.posNow - currentSeg.posNow).normalized; Vector2 changeAmount = changeDir * error; if (index == 0) nextSeg.posNow += changeAmount; else&#123; currentSeg.posNow -= changeAmount * 0.5f; nextSeg.posNow += changeAmount * 0.5f; &#125; &#125;&#125; Collision Penalty based system or projection collision reaction 12345678910111213141516171819// example for bounding box collisionVector2 velocity = posNow - posOld;if (posNow.x &gt; screenWidth)&#123; posNow.x = screenWidth; posOld.x = posNow.x + velocity.x;&#125;else if (posNow.x &lt; 0)&#123; posNow.x = 0; posOld.x = posNow.x + velocity.x;&#125;if (posNow.y &gt; screenWidth)&#123; posNow.y = screenWidth; posOld.y = posNow.y + velocity.y;&#125;else if (posNow.y &lt; 0)&#123; posNow.y = 0; posOld.y = posNow.y + velocity.y;&#125; Resources Gamedev.net - A Verlet based approach for 2D game physics Youtube - Coding Math: Episode 36 - Verlet Integration Part I Youtube - 2D Rope Tutorial - Make Swinging Rope in Unity (Verlet Integration) Wikipedia - Velocity Verlet","categories":[{"name":"3d math","slug":"3d-math","permalink":"https://www.xingyulei.com/categories/3d-math/"}],"tags":[{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/tags/unity/"},{"name":"c#","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]},{"title":"Learning Graphics Basics","slug":"graphics-shading-basics","date":"2020-09-16T04:00:00.000Z","updated":"2022-09-24T03:31:00.910Z","comments":true,"path":"post/graphics-shading-basics/","link":"","permalink":"https://www.xingyulei.com/post/graphics-shading-basics/","excerpt":"","text":"Glossary Wikipedia - Computer Graphics Glossary Shader: programs running on gpu that describes general computation (vertex transformation: vertex shader; shading calculation: fragment shader) G-buffer: a screen space representation of geometry and material information (e.g. color, normal, position/depth) Fragment: is the corresponding pixel generated by geometric primitives, but a pixel on screen can be a product of more than one fragment due to Z-buffering, blending etc. Vertex lighting vs. Per-pixel lighting Vertex Lighting Lighting is computed per-vertex calculation happens in the vertex shader lighting/color information is then linearly interpolated across faces and rasterized it is cheaper, faster (since there are fewer vertices compared to pixels) but noticeable artifact with low-poly objects Per-Pixel Lighting Lighting is computed per-pixel/fragment (but what is this exactly? see the example below) Calculation happens in the fragment shader normal information (passed from vertex shader) is interpolated on the faces, lighting/color is calculated and rasterized. it is more expensive but less artifact Example of a per-pixel lighting shader Vertex Shader 123456789101112131415161718#version 330 corelayout (location &#x3D; 0) in vec3 aPos;layout (location &#x3D; 1) in vec3 aNormal;out vec3 FragPos;out vec3 Normal;uniform mat4 model;uniform mat4 view;uniform mat4 projection;void main()&#123; FragPos &#x3D; vec3(model * vec4(aPos, 1.0)); Normal &#x3D; mat3(transpose(inverse(model))) * aNormal; gl_Position &#x3D; projection * view * vec4(FragPos, 1.0);&#125; Fragment Shader 123456789101112131415161718192021222324252627282930313233#version 330 coreout vec4 FragColor;in vec3 Normal; in vec3 FragPos; uniform vec3 lightPos; uniform vec3 viewPos; uniform vec3 lightColor;uniform vec3 objectColor;void main()&#123; &#x2F;&#x2F; ambient float ambientStrength &#x3D; 0.1; vec3 ambient &#x3D; ambientStrength * lightColor; &#x2F;&#x2F; diffuse vec3 norm &#x3D; normalize(Normal); vec3 lightDir &#x3D; normalize(lightPos - FragPos); float diff &#x3D; max(dot(norm, lightDir), 0.0); vec3 diffuse &#x3D; diff * lightColor; &#x2F;&#x2F; specular float specularStrength &#x3D; 0.5; vec3 viewDir &#x3D; normalize(viewPos - FragPos); vec3 reflectDir &#x3D; reflect(-lightDir, norm); float spec &#x3D; pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular &#x3D; specularStrength * spec * lightColor; vec3 result &#x3D; (ambient + diffuse + specular) * objectColor; FragColor &#x3D; vec4(result, 1.0);&#125; As you can see, fragment position and normal information are passed into the fragment shader from vertex shader (where the pre-compute happens), the lighting calculation (Phong lighting) is calculated per-fragment. On a related note: gpu cost are related to how many vertices are passed in to the gpu from buffer and how complex the lighting calculation is in the fragment shader (this could be the algorithm/model complexity, and the number of passes); Forward vs. Deferred Rendering Forward Rendering The standard, out-of-the-box rendering technique Geometries are passed to gpu, going through vertex shader and fragment shader, with each geometry and each light computed separately one at a time to form the final render. Render complexity: O(num of geometry fragments * num of lights) Deferred Rendering Render is deferred until all geometry has been processed Geometries are passed to gpu, going through vertex shader and fragment shader (without lighting pass), final rendering is computed/combined with multiple render passes (one pass for getting all geometry information to G-buffer, second pass for compute lighting based on the G-buffer). Render complexity: O(screen resolution * num of lights) Discussion Everything all comes down to lighting, as gpu can easily handle vertex information, but the most expensive are lighting calculation which can easily slow down the rendering. Forward rendering iterates and compute each fragments of each geometry, no matter if it overlaps or is hidden by other fragments. So for each pixel, we could have already run multiple fragment shaders. This is where deferred rendering come in handy, the G-buffer stores information such as color, normal and depth. The lighting later on can know how to produce the final render by combining all the information (For example: depth test can also cull out all the fragments that are being obscured). So essentially, each pixel only runs a single fragment shader. Rasterization vs. Ray tracing The forward, deferred rendering techniques are all in the realm of rasterization, which is the most popular and traditional real-time rendering technique. With the advance of hardware, ray tracing, which is computationally demanding (usually used in films/animation) can now be used in real-time video games. Rasterization We gather objects information and projects each one by one on screen (per fragment), fragment shader computes the final color of every fragment to form pixels on screen. The fundamental of rasterizing is that for each object/geometry, we look at (rasterize it) it‚Äôs verts/triangles to cover pixels. So, as discussed in deferred rendering, every object is drawn but not all of them are displayed on screen. This overdraw can be accelerated by using deferred shading‚Äôs depth test. Ray tracing We cast rays from our eyes (camera) for each pixel and gather information of those rays as they travel through/intersects with objects and interacts with lights to form the final render on screen. The fundamental of ray tracing is that for each pixel, we look at (shoot a ray) each object/geometry to see how they contribute to the color of that pixel. As for ray tracing, we need to shoot many rays for each pixel, and more when there are reflection and refraction. One way to accelerate this is to use bounding volume. Discussion The most significant difference in visual is that ray tracing is physically more accurate than rasterization, thus more realistic. Which is more apparent in dynamic environment with objects that reflects and refract. Rasterization needs many estimation techniques to handle lighting and shadowing such as more render passes, baked light map, cubemap reflection, but ray tracing gets all the results out of the box. Reference Envato tuts+ - Forward Rendering vs. Deferred Rendering Learn OpenGL - Deferred Shading Wikipedia - Deferred Lighting Learn OpenGL - Basic Lighting Knowww - Per-vertex vs. per-fragment lighting Unity Forum - What‚Äôs the difference between per-pixel and per-vertex lit in Forward Rendering? Youtube - OpenGL Fragment Shaders | How Do Fragment Shaders Work? Nvidia - Ray Tracing Essentials Stack Exchange - Mirror Reflections: Ray Tracing or Rasterization? Quora - What is the difference between ray tracing and very high shader details?","categories":[{"name":"graphics programming","slug":"graphics-programming","permalink":"https://www.xingyulei.com/categories/graphics-programming/"}],"tags":[{"name":"rendering","slug":"rendering","permalink":"https://www.xingyulei.com/tags/rendering/"}]},{"title":"C++ Reference and Pointer Guide","slug":"cpp-reference-pointer","date":"2020-08-13T04:00:00.000Z","updated":"2022-09-10T13:56:31.235Z","comments":true,"path":"post/cpp-reference-pointer/","link":"","permalink":"https://www.xingyulei.com/post/cpp-reference-pointer/","excerpt":"","text":"Basics De-referencing add * before a pointer to expose the object‚Äôs value it‚Äôs pointing varN, varN‚Äôs value ptrN, varN‚Äôs address *ptrN, de-reference ptrN, varN‚Äôs value (&amp;ptrN, ptrN‚Äôs address, which has little meaning) Symbol to access a member of a class or class object (instance) a-&gt;b: b is the member of the object that pointer a refers to a.b: b is the member of the object, or the reference of an object a a::b: b is the member of the class, or namespace a Declaration Pointer Declaration Syntax: varType* varName Declaration 12//declare a c++ pointer to an integerint* ptrx; Initialization 1234// a pointer pointing to address of varN, varN type should be intint varN = 9;int* ptrN;ptrN = &amp;varN; short-hand: 1int* ptrN = &amp;varN; Reference Declaration Syntax: varType&amp; varName 123456789int main()&#123; int&amp; invalidRef; // error: references must be initialized int x = 5; int&amp; ref = x; // okay: reference to int is bound to int variable return 0;&#125; When a reference is initialized with an object (or function), we say it is bound to that object (or function). The process by which such a reference is bound is called reference binding references must be bound to a modifiable variable Function Pass Argument Both of these methods are prevented copying the variable, and capable of modifying the variable value that is passed in; if a variable is expensive to copy, e.g. struct, class By Reference Modify the variable, can‚Äôt pass in an un-modifiable variable like const Syntax varType&amp; varName 1234void printValue(int&amp; y)&#123; std::cout &lt;&lt; y &lt;&lt; &#x27;\\n&#x27;;&#125; Prevent modifying the variable, while having the benefit of not making a copy Syntax const varType&amp; varName 1234void printValue(const int&amp; y)&#123; std::cout &lt;&lt; y &lt;&lt; &#x27;\\n&#x27;;&#125; By Address (via pointer) Syntax varType* varName, to access the variable, de-reference using *varName 1234void printByAddress(const std::string* ptr) // The function parameter is a pointer that holds the address of str&#123; std::cout &lt;&lt; *ptr &lt;&lt; &#x27;\\n&#x27;; // print the value via the dereferenced pointer&#125; Function Return Argument Variable Pointer works almost identically to return by reference, except a pointer to an object is returned instead of a reference to an object The major advantage of return by address over return by reference is that we can have the function return nullptr if there is no valid object to return Variable Reference Never return a reference to a local variable or some such, because it won‚Äôt be there to be referenced. Syntax varType&amp; funName(args) References Stack Overflow - When do I use a dot, arrow, or double colon to refer to members of a class in C++? Runestone Academy - Pointers Learn C++ - Lvalue reference Learn C++ - Return by reference and return by address Learn C++ - Pass by lvalue reference Learn C++ - Pass by address","categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"}],"tags":[{"name":"c++","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]},{"title":"Maya API (3. Custom Deformer)","slug":"maya-api-deformer","date":"2019-11-11T05:00:00.000Z","updated":"2022-09-10T13:55:47.184Z","comments":true,"path":"post/maya-api-deformer/","link":"","permalink":"https://www.xingyulei.com/post/maya-api-deformer/","excerpt":"","text":"API 1.0 custom deformer Example Note: MPxDeformerNode is only available in API 2.0 Custom Attribute vs. Built-in Attribute In the last chapter, we know how to create custom numeric type attribute using MFnNumericAttribute. Sometimes in our node, we want to access existing built-in attribute. We do so by using OpenMayaMPx.cvar.MPxDeformerNode_(attributeName) before Maya 2016, we use OpenMayaMPx.cvar.MPxGeometryFilter_(attributeName) after 2016. Obtain Input Geometry In the sample code, we define our custom function getDeformerInputGeom(self, dataBlock, geomIndex) to obtain the input mesh to the deformer node. We will discuss this later. Accessory Node Accessory node acts like a secondary driver node connected to our deformer so they can influence the deformation. In the sample code, our accessory node is a locator which when we connects its world matrix, it will change our mesh‚Äôs deformation when translating. Custom Dependency Node vs. Custom Deformer Node Registration: In our previous chapter, we register our node using registerNode() with node type: omMPx.MPxNode.kDependNode, in deformer node, we use omMPx.MPxNode.kDeformerNode as our node type. Inheritance: We now inherit our class from omMPx.MPxDeformerNode instead of omMPxNode there‚Äôs still compute() in MPxDeformerNode class, but we want to write our deformation algorithm in deform(). Accessory Node: accessoryNodeSetup(self, dagModifier) and accessoryAttribute(self) is override to allow us to control accessory node along with our deformer. Procedure Step 1: Declare attributes (Same as last chapter) Step 2: Initialize Node Node Creator 12def nodeCreator(): return mpx.asMPxPtr(MyDeformer()) Only API 1.0 is available. Node Initializer 12345678910111213141516171819202122232425262728def nodeInitializer(): # 1: create reference to numericAttribute and matrixAttribute function sets numericAttrFn = om.MFnNumericAttribute() matrixAttrFn = om.MFnMatrixAttribute() # 2: create attribute using the function set MyDeformer.inNumAttr = numericAttrFn.create(&#x27;num&#x27;, &#x27;n&#x27;, om.MFnNumericData.kFloat, 0.0) numericAttrFn.setMin(-1.0) numericAttrFn.setMax(1.0) numericAttrFn.setReadable(False) MyDeformer.inMatAttr = numericAttrFn.create(&#x27;matrix&#x27;, &#x27;m&#x27;) matrixAttrFn.setStorable(False) matrixAttrFn.setConnectable(True) # 2.5: access built-in attribute using OpenMayaMpx.cvar.MPxGeometryFilter_outputGeom outputGeom = mpx.cvar.MPxGeometryFilter_outputGeom # 3: attach attribute MyDeformer.addAttribute(MyDeformer.inNumAttr) MyDeformer.addAttribute(MyDeformer.inMatAttr) # 4: add circuit (relationship in-&gt;out) MyDeformer.attributeAffects(MyDeformer.inNumAttr, ouputGeom) MyDeformer.attributeAffects(MyDeformer.inMatAttr, ouputGeom) # 5: make attribute paintable cmds.makePaintable(nodeName, &#x27;weights&#x27;, attrType=&#x27;multiFloat&#x27;, shapeMode=&#x27;deformer&#x27;) we access the output Geometry attribute so we can later add relationship to it. RegisterNode 1mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDeformNode) De-registerNode 1mplugin.deregisterNode(nodeID) Step 3: Initialize Node ÔºàDeform AlgorithmÔºâ 1234567891011121314151617181920212223242526272829303132333435363738394041424344class MyNode(om.MPxDeformNode): inNumAttr = om.MObject() inMatAttr = om.MObject() def __init__(self): om.MPxDeformNode.__init__(self) def deform(self, dataBlock, geomIterator, localToWorldMatrix, geomIndex): # step 1: access built-in attribute value using attribute name and attribute handle envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope envelopeHandle = dataBlock.inputValue(envelopeAttr) envelopeValue = envelopeHandle.asFloat() # step 1.5: access custom attribute value inNumHandle = dataBlock.inputValue(MyDeformer.inNumAttr) inNumValue = inNumHandle.asFloat() # step 1.55: access custom translate value connected to an accessory node inMatHandle = dataBlock.inputValue(MyDeformer.inMatAttr) inMatValue = inNumHandle.asMatrix() transMatrix = om.MTransformationMatrix(inMatValue) # matrix type translateValue = transMatrix.getTranslation(om.MSpace.kObject) # vector type # step 2: access input mesh inputMesh = self.getDeformerInputGeom(dataBlock, geomIndex) # step 2.5: access mesh normals meshFn = om.MFnMesh(inputMesh) normalVectorArray = om.MFloatVectorArray() # create float vector array to store normal vector meshFn.getVertexNormals(False, normalVectorArray, om.MSpace.kObject) # (average normal or not?, the array to store, normal space) # step 3: iterate the mesh vertices and deform it newVertexPosArray = om.MPointArray() # to store new vertices position while not geomIterator.isDone(): vertexPos = geomIterator.position() vertexIndex = geomIterator.index() normalVector = om.MVector(normalVectorArray[vertexIndex]) # built-in function weightValue(dataBlock, geomIndex, vertexIndex) weight = self.weightValue(dataBlock, geomIndex, vertexIndex) # vertexPos.x = vertexPos.x + [calculation of normalVector.x and translateValue[0]] * envelopeValue * weight newVertexPosArray.append(vertexPos) geomIterator.next() geomIterator.setAllPositions(newVertexPosArray) To access a value from an attribute, we use handle = dataBlock.input/outputValue(MyNode.attr) if we have a custom attribute inNumAttr: inNumHandle = dataBlock.inputValue(MyDeformer.inNumAttr) inNumValue = inNumHandle.asFloat() if we have a built-in attribte envelope: we first get our attribute name envelope envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope envelopeHandle = dataBlock.inputValue(envelopeAttr) envelopeValue = envelopeHandle.asFloat() To get normal for individual vertices on our input mesh, we first need to obtain our input mesh using our own function: getDeformerInputGeom(self, dataBlock, geomIndex). And using mesh function set MeshFn‚Äôs getVertexNormals() we store the normal vector in om.MFloatVectorArray() type array. To deform our mesh: we use the geometry iterator to perform iteration on each mesh vertex and re-calculate its position. We combine the use of geoIterator.position() and geomIterator.setPosition(point) or geomIterator.setAllPositions(pointArray). To access weight value on each vertex, we use built-in function weightValue(dataBlock, geomIndex, vertexIndex). In which, geomIndex is provided in deform() and vertexIndex is from geomIterator. Step 3.1: Get in-Mesh 1234567891011def getDeformerInputGeom(self, dataBlock, geomIndex): inputAttr = mpx.cvar.MPxGeometryFilter_input inputHandle = dataBlock.outputArrayValue(inputAttr) # use outputArray instead of inputArray to avoid re-computation inputHandle.jumpToElement(geomIndex) inputElementHandle = inputHandle.outputValue() inputGeomAttr = mpx.cvar.MPxGeometryFilter_inputGeom inputGeomHandle = inputElementHandle.child(inputGeomAttr) # this is different from how we usually get handler inputGeomMesh = inputGeomHandle.asMesh() return inputGeomMesh At this point, I can‚Äôt fully interpret the meaning of this segment. Step 4: Accessory Node 1234567891011121314151617181920def accessoryNodeSetup(self, dagModifier): # step1: create the accessory node using the supplied dagModifier locator = dagModifier.createNode(&#x27;locator&#x27;) # step2: access accessory node&#x27;s attribute(can&#x27;t use mplug type, has to be mobject type) # access dependency node function set dependNodeFn = om.MFnDependencyNode(locator) matrixPlug = dependNodeFn.findPlug(&#x27;worldMatrix&#x27;) # this returns mplug type attribute, we need mobject type attribute matrixAttr = matrixPlug.attribute() # step3: connect mobject type(required) together # param: accessory node(mobject), accessory attr(mobject), deformer node(mobject: using self.thisMObject()), deformer attr(mobject) mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.inMatAttr) # now the accessory node&#x27;s worldMatrix is driving to the custom in-matrix of the deformer node return mConnectStatusdef accessoryAttribute(self): # returns the deformer node attribute connected return MyDeformer.inMatAttr The dagModifer is supplied in the accessory node. We use dagModifier‚Äôs connect function to connect the accessory node‚Äôs attribute to our deformer node‚Äôs attribute. In this case, we have accessory‚Äôs attribute: worldMatrix (a built-in attribute obtained from MFnDependencyNode.findPlug()) and our custom defined MyDeformer.inMatAttr. One thing to note is that, the .connect() only takes MObject which we cannot supply MPlug type object matrixPlug = ...findPlug('attributeName'), we perform an additional step matrixAttr = matrixPlug.attribute() to get the MObject type attribute. Now we supply .connect() with parameters: an accessory node (MObject type), accessory node‚Äôs attribute (MObject type), deformer node (MObject type) and deformer node‚Äôs attribute (MObject type) as follows: mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.inMatAttr) Reference Chad Vernon - Maya API Programming","categories":[{"name":"maya python api","slug":"maya-python-api","permalink":"https://www.xingyulei.com/categories/maya-python-api/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Maya API (2. Custom Node)","slug":"maya-api-node","date":"2019-10-10T04:00:00.000Z","updated":"2022-09-10T13:54:12.489Z","comments":true,"path":"post/maya-api-node/","link":"","permalink":"https://www.xingyulei.com/post/maya-api-node/","excerpt":"","text":"API 2.0 custom node example Data block (MDataBlock) Data block refers the entire container of a node. This container stores all the values for each attribute of the node. The datablock of this node is provided in the compute() function. Plug (MPlug) Plug is the outer plug of the node which provides the connections to other node‚Äôs plug. The MPlug usually connects the plug from another node and the value of a certain attribute of this node. The plug is also provided in the compute() function Data handle (MDataHandle) Data handle usually stores an attribute‚Äôs value. We can set a value to an attribute using MDataHandle.setType(value), and get an attribute‚Äôs value using **value = MDataHandle.asType()**. Procedure Step 1: Declare attributes (MObject) in the class 123456789class MyNode(om.MPxNode): inAttr = om.MObject() outAttr = om.MObject() def __init__(self): om.MPxNode.__init__(self) def compute(self, plug, dataBlock): pass inAttr refers to the input attribute that we are creating, outAttr refers to the output attribute that we are creating. Both are declared as MObject() type. We will later access them using MyNode.inAttr and MyNode.outAttr. Step 2: Initialize Node Node Creator 12def nodeCreator(): return MyNode() Node Creator in API 2.0 directly returns an instance to the class, API 1.0 uses a pointer like in command plugin. Node Initializer 123456789101112131415161718def nodeInitializer(): &#x27;&#x27;&#x27;1: create reference to attribute function set such as numericAttribute&#x27;&#x27;&#x27; numericAttrFn = om.MFnNumericAttribute() &#x27;&#x27;&#x27; 2: create attribute using the function set&#x27;&#x27;&#x27; MyNode.inAttr = numericAttrFn.create(&#x27;in&#x27;, &#x27;i&#x27;, om.MFnNumericData.kFloat, 1.0) numericAttrFn.readable = True numericAttrFn.writable = True MyNode.outAttr = numericAttrFn.create(&#x27;out&#x27;, &#x27;o&#x27;, om.MFnNumericData.kFloat) numericAttrFn.readable = True numericAttrFn.writable = False &#x27;&#x27;&#x27; 3: attach attribute&#x27;&#x27;&#x27; MyNode.addAttribute(MyNode.inAttr) MyNode.addAttribute(MyNode.outAttr) &#x27;&#x27;&#x27; 4: add circuit (relationship in-&gt;out)&#x27;&#x27;&#x27; MyNode.attributeAffects(MyNode.inAttr, MyNode.outAttr) MFnNumericAttribute provides the function sets to create an attribute for numeric type attribute. There‚Äôs also MFnMatrixAttribute to create matrix type attribute and so on. Using the function set‚Äôs create() function, we add parameters for attribute‚Äôs long name, short name, data type, and default value (optional). This returns a MObject type attribute which is attached to the function set. We store it in the attribute declared earlier in the class. Set the attribute‚Äôs property using function set, such as readable, writable, hidden, storable, connectable (In API1.0, use like this numericAttrFn.setReadable(True)) Using the MyNode.addAttribute(MyNode.inAttr) to attach an attribute to the node Using the MyNode.attributeAffects(MyNode.inAttr, MyNode.outAttr) to design the affect relationship between attributes, in this case, change of inAttr will affect `outAttr. RegisterNode 1mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDependNode, nodeClassify) Parameters: name of the node, id of the node, node creator function, node initializer function, node type (DependNode or DeformNode‚Ä¶), node classification (utility, shading‚Ä¶) Example: nodeID = om.MTypeId(0x55555) nodeClassify = 'utility/general' De-registerNode 1mplugin.deregisterNode(nodeID) Step 3: Initialize Node 12345678910111213141516171819202122232425class MyNode(om.MPxNode): inAttr = om.MObject() outAttr = om.MObject() def __init__(self): om.MPxNode.__init__(self) def compute(self, plug, dataBlock): if plug == MyNode.outAttr: # 1: get datablock handle (inputValue returns MDataHandle type object) inHandle = dataBlock.inputValue(MyNode.inAttr) outHandle = dataBlock.outputValue(MyNode.outAttr) # 2: extract input value from the handle inValue = inHandle.asFloat() # 3: create logic and set output value outValue = inValue * 2 outHandle.setFloat(outValue) # 4: mark output plug as clean outHandle.setClean() else: return om.kUnknownParameter When MyNode.outAttr is dirty (meaning it needs to recompute), we use if plug == MyNode.outAttr: to identify this certain plug. (this if statement will work, even if plug is MPlug type and MyNode.outAttr is MObject type) We have already identified what input attribute is affecting this plug, in order to retrieve the value of this input, we need to attach a data handle on the data block specifying this certain input attribute we want to retrive. Therefore, we have handle = dataBlock.input/outputValue(MyNode.attr) Next, we use value = handle.asFloat() and handle.setFloat(value) to get and set the value from and to the attribute. (float type as example) Last, we mark the current plug as clean, by setClean() to the outHandle Reference Chad Vernon - Maya API Programming","categories":[{"name":"maya python api","slug":"maya-python-api","permalink":"https://www.xingyulei.com/categories/maya-python-api/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Maya API (1. Command Plugin with Flags)","slug":"maya-api-command","date":"2019-09-29T04:00:00.000Z","updated":"2022-09-10T13:56:14.126Z","comments":true,"path":"post/maya-api-command/","link":"","permalink":"https://www.xingyulei.com/post/maya-api-command/","excerpt":"","text":"‚ÄúFlags‚Äù vs ‚ÄúArgument‚Äù Take this as an example: cmds.group('circle1', 'sphere1', name='group1') circle1 and sphere1 are arguments name is the flag and group1 is the value Another example: cmds.polyCube(sx=10, axis=[0, 0, 1]) no argument is specified sx is the flag‚Äôs short name, subdivisionX is the flag‚Äôs long name [0, 0, 1] is axis flag‚Äôs value, each individual number is called parameters Procedure Step 1: Declare flag name outside the class 12345firstFlagShortName = &#x27;-f&#x27;firstFlagLongName = &#x27;-first&#x27;secondFlagShortName = &#x27;-s&#x27;secondFlagLongName = &#x27;-second&#x27;# more flags ... Step 2: Add flag and argument in syntax creator outside of class (this syntax creator will be further included in the plugin initialize function) 1234567891011121314151617def syntaxCreator(): &quot;&quot;&quot; create a OpenMaya.MSyntax object to store flags and argument &quot;&quot;&quot; syntax = om.MSyntax() # add flags with short name, long name, and value type syntax.addFlag(firstFlagShortName, firstFlagLongName, om.MSyntax.kDouble) syntax.addFlag(secondFlagShortName, secondFlagLongName, (om.MSyntax.kDouble, om.MSyntax.kDouble, om.MSyntax.kDouble)) # add more flags ... # add argument using MSyntax.addArg() function # add argument is not discussed, refer to document later return syntax Step 3: Parsing flags, called inside the class‚Äôs doIt function 123456789101112131415def parseArguments(self, args): &quot;&quot;&quot; instantiate MArgParser object, self.syntax() refers to the syntax created in step 2 &quot;&quot;&quot; argData = om.MArgParser(self.syntax(), args) # check if certain flags are set if argData.isFlagSet(firstFlagShortName): firstValue = argData.flagArgumentString(firstFlagShortName, 0) if argData.isFlagSet(secondFlagShortName): secondParam0 = argData.flagArgumentInt(secondFlagShortName, 0) secondParam1 = argData.flagArgumentInt(secondFlagShortName, 1) secondParam2 = argData.flagArgumentInt(secondFlagShortName, 2) # parse more flags ... Reference Chad Vernon - Maya API Programming","categories":[{"name":"maya python api","slug":"maya-python-api","permalink":"https://www.xingyulei.com/categories/maya-python-api/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Maya API (0. Introduction)","slug":"maya-api-intro","date":"2019-08-18T04:00:00.000Z","updated":"2022-09-10T13:54:31.675Z","comments":true,"path":"post/maya-api-intro/","link":"","permalink":"https://www.xingyulei.com/post/maya-api-intro/","excerpt":"","text":"Overview Different from Maya Command, Maya API offers more low level access to Maya‚Äôs feature. You can think of Maya in multiple layers: Bottom Layer: System OS Maya Core: The entire Maya program written in C++ Maya API: Designated API exposed to developers, which can access Maya Core Maya Command: Helper Functions calling multiple Maya API Maya GUI: User graphics interface While Maya Command (MEL/Python) is most commonly used to write scripts, because it has fast prototyping and easy to learn. The downside is that it is often slow and can‚Äôt offer low level access to Maya Core. Maya API on the other hand, is complicated, but offers faster speed and most flexibility. It comes with Python and C++. Python API has version 1.0 and 2.0. Difference Between Python API vs C++ API API1.0 vs 2.0 API 1.0 (Before 2012) has access to more features offered in C++ API 2.0 faster and more Pythonic, but some class such as OpenMayaFX, OpenMayaDeformerNode is not supported. General Format Difference import module 1.0 has a separate maya.OpenMayaMPx along with maya.OpenMaya 2.0 has maya.api.OpenMaya including the original MPx command maya_useNewAPI 2.0 use this function to declare using API 2.0 cmd creator 1.0 uses a MPx pointer object to point to instance of the class 2.0 director returns the instance of the class other syntax difference will be discussed later Reference Chad Vernon - Maya API Programming","categories":[{"name":"maya python api","slug":"maya-python-api","permalink":"https://www.xingyulei.com/categories/maya-python-api/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Run Maya in Batch Mode","slug":"maya-batch-mode","date":"2019-05-09T04:00:00.000Z","updated":"2022-09-24T03:31:44.912Z","comments":true,"path":"post/maya-batch-mode/","link":"","permalink":"https://www.xingyulei.com/post/maya-batch-mode/","excerpt":"","text":"Import Standalone Module 12import maya.standalonemaya.standalone.initialize(name=&#x27;python&#x27;) Sometimes, import error could occur 1ImportError: No module named maya.standalone Solution check your python interpreter, it should match the maya python2 version. I changed my project interpreter in my pycharm setting. setup system environment variable, like the following if error still occurs, please check your maya directory 1234567891011121314151617181920import sysimport osMAYA_LOCATION = &quot;C:/Program Files/Autodesk/Maya2018&quot;PYTHON_LOCATION = MAYA_LOCATION + &quot;/Python/Lib/site-packages&quot;os.environ[&quot;MAYA_LOCATION&quot;] = MAYA_LOCATIONos.environ[&quot;PYTHONPATH&quot;] = PYTHON_LOCATIONsys.path.append(MAYA_LOCATION)sys.path.append(PYTHON_LOCATION)sys.path.append(MAYA_LOCATION+&quot;/bin&quot;)sys.path.append(MAYA_LOCATION+&quot;/lib&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/DLLs&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib/plat-win&quot;)sys.path.append(MAYA_LOCATION+&quot;/Python/Lib/lib-tk&quot;)print(&#x27;\\n&#x27;.join(sys.path)) Add Functions Let‚Äôs add a test function to our standalone script. 1234567891011121314def test(): import maya.cmds as cmds # full path to your Maya file to OPEN maya_file_to_open = r&quot;C:\\Users\\Lei\\Desktop\\test.ma&quot; # Open your file cmds.file(maya_file_to_open, o=True) # full path to your Maya file to IMPORT maya_file_to_import = r&quot;C:\\Users\\Lei\\Desktop\\import.ma&quot; # Import the file. the variable &quot;nodes&quot; will hold the names of all nodes imported, just in case. cmds.file(maya_file_to_import, i=True, type=&quot;mayaAscii&quot;) render = r&quot;C:\\Users\\Lei\\Desktop\\te.ma&quot; cmds.file(rename=render) cmds.file(force=True, save=True, options=&#x27;v=1;p=17&#x27;, type=&#x27;mayaBinary&#x27;) print(&#x27;a&#x27;) This test function opens a maya file on my desktop and import a maya file and save out as another file. Execute from mayapy Execute from Command Line to do so, make sure to add mayapy to your system environment variable. in system variable: add C:\\Program Files\\Autodesk\\Maya2018\\bin to Path open command prompt, and enter mayapy [directory/firstStandalone.py] Execute using subprocess you can do it without going to command line, but by executing another .py using subprocess 1234567import subprocesscommand = &#x27;mayapy [directory/firstStandalone.py]&#x27;process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)process.wait()print(process.returncode) # this return the message from cmd Standalone Script with Arguments Sometimes, we would want to pass arguments to our standalone script get argument as variable using sys.argv 1234import sysfile_path = sys.argv[1]file_name = sys.argv[2] Example from Toadstorm Nerdblog: 1234567891011121314151617181920212223242526272829import subprocessmaya_path = &#x27;directory/mayapy.exe&#x27; # mayapy or full path to mayapy.exescript_path = &#x27;directory/firstStandalone.py&#x27;def add_layer(file_names,layer_name): for file_name in file_names: command = r&#x27;mayapy &#123;&#125; &#123;&#125; &#123;&#125;&#x27;.format( script_path, file_name, layer_name ) process = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) process.wait() print(process.returncode) # this return the message from cmd if __name__ == &#x27;__main__&#x27;: # define a list of filenames to iterate through files = [&#x27;file1&#x27;, &#x27;file2&#x27;, &#x27;file3&#x27;] render_layer = &#x27;a new render layer&#x27; # run procedure, assuming you&#x27;ve already defined it add_layer(files, render_layer) Reference Tech-Artist Org - Import maya.standalone problem Stack Overflow - use external python script to open maya and run another script inside maya Stack Overflow - How to use an external interpreter for Maya? Toadstorm Nerdblog - Python in Maya Standalone","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"}]},{"title":"Learning Python Imports","slug":"py-import","date":"2019-03-16T04:00:00.000Z","updated":"2022-09-24T03:44:26.359Z","comments":true,"path":"post/py-import/","link":"","permalink":"https://www.xingyulei.com/post/py-import/","excerpt":"","text":"Table of Contents from import vs. import What does __init__.py do? Example Dot Notation in Import Import Order Intra-package Import an import Import Same Module Multiple Times from ... import vs. import Always avoid wildcard imports like such: 1from my_module import * # don&#x27;t use this Instead, use regular import like: 1import my_module # use this Why? using wildcard import will pollute namespaces Using wildcard import will not import names with a leading underscore (unless the module defines an __all__ list) PEP8 recommend using regular import What does __init__.py do? __init__.py is used to specify a package, when import is trying to find the modules, But it is not required: meaning a package without __init__.py, The system can still find the modules after configuring appropriate PYTHONPATH using sys.path.append. __init__.py is executed after importing the package, I‚Äôve seen sub-directory being imported by appending as environment variable within __init__.py Example: so instead of using import project.foo.bar for the following structure: 123456project&#x2F; __init__.py foo&#x2F; __init__.py bar&#x2F; b.py inside the __init__.py, we could do a sys.path.append(PATH_TO_BAR) so with this file structure, you can just do import project they could even add the import statement for you in the __init__.py, although it is not transparent. 12345project&#x2F; __init__.py foo&#x2F; bar&#x2F; b.py Note: Whatever gets appended last overrides the previous env variable, so import to the same name module will find the latest append Dot Notation (.) in Import 12345678910parent&#x2F; __init__.py file.py one&#x2F; __init__.py anotherfile.py two&#x2F; __init__.py three&#x2F; __init__.py Each dot in your import will refer to something inside the package, could be another package or a module. But it can‚Äôt be a class. Import python modules could look like: import parent.file or import parent.one.anotherfile From ‚Ä¶ import classes or functions look like this: from parent.file import class which gives you direct access to the class namespace, but not the example above. Import Order Based on PEP8, imports should be grouped by the following order: Standard library import Related third-party import Local application/library specific import What is Standard Library Imports? Standard library are installed automatically by Python installer, full documentation link is here: https://docs.python.org/3/library/ What is the order after grouping? There is no specific rules, but based on common preferences, use alphabetical order, with import first and from ‚Ä¶ import after 12345import abcimport defimport xfrom g import ggfrom x import xx Intra-package In a structure like this, how would you do import from another directory? say from module-x.py import module-a 12345678910top-package&#x2F; __init__.py sub-package-a&#x2F; __init__.py module-x.py module-y.py sub-package-b&#x2F; __init__.py module-a.py module-b.py Here‚Äôs some examples doing relative imports in module-x 123456import module-yfrom . import module-yfrom .module-y import classAfrom .. import sub-package-bfrom ..subpackage-b import module-afrom ..subpackage-b.module-a import classB Import an import It is a common practice in C# to use import module or static class to stores all the global variables used for settings, or even all the modules. In Python it would be something like: constant.py 1234567891011121314import module_aimport module_bimport module_cGLOBAL_VAR_MAX = 50GLOBAL_VAR_MIN = 10GLOBAL_VAR_TIMEOUT = 2000GLOBAL_NAME = r&#x27;random name&#x27;# or evenclass Constant(object): gravity = 9.8 is_true = True With this setup, all the module in the same project would just import the constant module and have access to all the imports and variable. I thought this was a neat way to make code cleaner by getting rid of all the duplicated imports that might happen. there are also some voices against it: based on the style guide: Constants are usually defined on a module level also, suggestions have mentioned to refrain from using class as it could be instantiated which makes no sense. unless there‚Äôs a valid reason for all those modules to be collected under a common name. If not, then they should be kept separately. This is due to documentation, as other people open your file, they don‚Äôt get information on what is getting imported (what is needed) Same module import multiple times So if multiple files are importing the same module separately, does python optimize the import? Yes, python modules are considered as singletons, no matter how many times you import them they get initialized only once. unless reload is being called Reference Stack Overflow - constants in Python: at the root of the module or in a namespace inside the module? Stack Overflow - in python, do you need to import modules in each split file? Stack Overflow - Python: Importing an ‚Äúimport file‚Äù Stack Overflow - Does python optimize modules when they are imported multiple times? Stack Overflow - Why can I import successfully without init.py? Stack Overflow - relative path not working even with init.py","categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"style","slug":"style","permalink":"https://www.xingyulei.com/tags/style/"}]},{"title":"Qt General Template","slug":"qt-template","date":"2018-10-16T04:00:00.000Z","updated":"2022-11-13T20:21:02.530Z","comments":true,"path":"post/qt-template/","link":"","permalink":"https://www.xingyulei.com/post/qt-template/","excerpt":"","text":"General Template 12345678class Window(QtWidgets.QMainWindow): def __init__(self, parent=None): super(Window, self).__init__(parent) self.setAttribute(QtCore.Qt.WA_DeleteOnClose) self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint) _loadUi(UI_PATH, self) Import Qt Modules if you are using PyQt5 binding: 12from PyQt5 import QtCore, QtGui, QtWidgetsfrom PyQt5.uic import loadUi if you are using PySide2 binding, here‚Äôs a wrapper I made which can be found here. I‚Äôm using Qt.py a Python 2 &amp; 3 shim around all Qt bindings, it just saves a lot of work. 12from Qt import QtCore, QtGui, QtWidgetsfrom Qt import _loadUi Using QApplication Launch as standalone application using QApplication, or if a QApplication instance exist, there‚Äôs no need to instantiate it. use QtWidgets.QApplication.instance() to check 12345678910if __name__ == &#x27;__main__&#x27;: import sys if QtWidgets.QApplication.instance(): window = ToolWindow() window.show() else: app = QtWidgets.QApplication(sys.argv) window = ToolWindow() window.show() sys.exit(app.exec_()) Close Event Delete Widget when Closed by default, closing the widget is hiding it not destroying the object 1&#123;WindowObject&#125;.setAttribute(QtCore.Qt.WA_DeleteOnClose) Unique Instance Raise existing instance (for example: widgets that are hidden during closeEvent); if no instance is available, create a new one. 12345678def show(): global WINDOW exists = WINDOW is not None if not exists: WINDOW = ToolWindow() WINDOW.showNormal() Other Register Style Sheet 123456def show(): ... APP = QtWidgets.QApplication(sys.argv) with open(PATH_TO_STYLESHEET, &#x27;r&#x27;) as f: qss = f.read() APP.setStyleSheet(qss) Register QResources QtCore.QResource.registerResource(PATH_TO_RCC) Maya Parent to Maya‚Äôs Main Window by default Qt window is not parented to Maya application 12345678910111213from shiboken2 import wrapInstancedef get_maya_main_window(): import maya.OpenMayaUI main_window_ptr = maya.OpenMayaUI.MQtUtil.mainWindow() return wrapInstance(long(main_window_ptr), QtWidgets.QMainWindow)class ModuleUI(QtWidgets.QMainWindow): def __init__(self, parent=get_maya_main_window()): super(ModuleUI, self).__init__(parent) _loadUi(UI_PATH, self) Window Docking Dockable Window The widget/window can now be docked into Maya‚Äôs main window; Auto-docking The above example of auto-docking may not work for certain Maya builds A workaround is to use the following method, but it only applies to QWidget type not QMainWindow type. Instantiate Widget When the UI has no parent (Maya main window), it will get instantly destroyed by the garbage collector, unless you keep an instance: 12345678# in the show functiondef show(): window = ModuleUI() window.show() return window# in maya script editorwin = moduleName.show() or using global variable to store the instance 1234567def show(): global window window = ModuleUI() window.show()# in maya script editormoduleName.show() Close Application in Maya 1234567def show(): if cmds.window(&#x27;xxx&#x27;, q=1, exists=1): cmds.deleteUI(&#x27;xxx&#x27;) global window window = somethingWindow() window.setObjectName(&#x27;xxx&#x27;) window.show() Error in PyCharm When this error occurs, it is due to MayaDevKit environment MayaDevKit allows maya python command auto-completion, remove it from PyCharm 12app = QtWidgets.QApplication(sys.argv)TypeError: &#x27;NoneType&#x27; object is not callable Unreal Engine 1234567891011import unrealdef show(): global app global window QtWidgets.QApplication.instance() or QtWidgets.QApplication(sys.argv) window = TestWindow() window.show() # this needs to happen before parenting unreal.parent_external_window_to_slate(int(window.winId())) Raise Existing Instance in the show() we need to return the window instance and assign it to a global variable: 12345# main.pydef show(): ... window.show() return window in the parent python command call (this maybe an Unreal menu command) 123from test import mainglobal editoreditor = main.show() Override closeEvent() To exit the Unreal Editor when Qt Window is closed: 123def closeEvent(self, event): QtWidgets.QMainWindow.closeEvent(event) unreal.SystemLibrary.execute_console_command(None, &quot;QUIT_EDITOR&quot;) To override at an instance level: 123456789import typesif __name__ == &quot;__main__&quot;: def _close_event(self, event): QtWidgets.QMainWindow.closeEvent(event) unreal.SystemLibrary.execute_console_command(None, &quot;QUIT_EDITOR&quot;) win = Window() win.closeEvent = types.MethodType(_close_event, win) Bonus: PySide2 UI Loading 12345678910111213141516171819202122232425262728from PySide2 import QtCore, QtWidgetsfrom PySide2.QtUiTools import QUiLoaderclass WrapperWindow(QtWidgets.QMainWindow): ui = &#x27;&#x27; def __init__(self, parent=None): super(WrapperWindow, self).__init__(parent) loader = QUiLoader() _file = QtCore.QFile(self.ui) _file.open(QtCore.QFile.ReadOnly) self.widget = loader.load(_file, parent) _file.close() self.setCentralWidget(self.widget)class Window(WrapperWindow): ui = &#x27;PATH_TO_UI_FILE&#x27; def __init__(self, parent=None): super(Window, self).__init__(parent) self.setCentralWidget(self.widget) # now we can access ui element like so self.widget.uiBtn.clicked.connect(self.someFunc) Reference Reddit - PyQt5 - Why do I get an Empty Window? Stack Overflow - pycharm use pyside2 TypeError: ‚ÄòNoneType‚Äô object is not callable","categories":[{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"}],"tags":[{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"}]}],"categories":[{"name":"learning log","slug":"learning-log","permalink":"https://www.xingyulei.com/categories/learning-log/"},{"name":"3d math","slug":"3d-math","permalink":"https://www.xingyulei.com/categories/3d-math/"},{"name":"tech summary","slug":"tech-summary","permalink":"https://www.xingyulei.com/categories/tech-summary/"},{"name":"unreal cinematic","slug":"unreal-cinematic","permalink":"https://www.xingyulei.com/categories/unreal-cinematic/"},{"name":"maya communication","slug":"maya-communication","permalink":"https://www.xingyulei.com/categories/maya-communication/"},{"name":"graphics programming","slug":"graphics-programming","permalink":"https://www.xingyulei.com/categories/graphics-programming/"},{"name":"maya python api","slug":"maya-python-api","permalink":"https://www.xingyulei.com/categories/maya-python-api/"}],"tags":[{"name":"unreal","slug":"unreal","permalink":"https://www.xingyulei.com/tags/unreal/"},{"name":"python","slug":"python","permalink":"https://www.xingyulei.com/tags/python/"},{"name":"batch","slug":"batch","permalink":"https://www.xingyulei.com/tags/batch/"},{"name":"unity","slug":"unity","permalink":"https://www.xingyulei.com/tags/unity/"},{"name":"maya","slug":"maya","permalink":"https://www.xingyulei.com/tags/maya/"},{"name":"math","slug":"math","permalink":"https://www.xingyulei.com/tags/math/"},{"name":"general","slug":"general","permalink":"https://www.xingyulei.com/tags/general/"},{"name":"pipeline","slug":"pipeline","permalink":"https://www.xingyulei.com/tags/pipeline/"},{"name":"threading","slug":"threading","permalink":"https://www.xingyulei.com/tags/threading/"},{"name":"pyqt","slug":"pyqt","permalink":"https://www.xingyulei.com/tags/pyqt/"},{"name":"template","slug":"template","permalink":"https://www.xingyulei.com/tags/template/"},{"name":"windows","slug":"windows","permalink":"https://www.xingyulei.com/tags/windows/"},{"name":"style","slug":"style","permalink":"https://www.xingyulei.com/tags/style/"},{"name":"socket","slug":"socket","permalink":"https://www.xingyulei.com/tags/socket/"},{"name":"command port","slug":"command-port","permalink":"https://www.xingyulei.com/tags/command-port/"},{"name":"c#","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"},{"name":"rendering","slug":"rendering","permalink":"https://www.xingyulei.com/tags/rendering/"},{"name":"c++","slug":"c","permalink":"https://www.xingyulei.com/tags/c/"}]}