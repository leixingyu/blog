<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xingyu Lei</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-07T20:11:07.044Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xingyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PyQt Model View Learning (2. List Model)</title>
    <link href="http://example.com/2021/02/07/pyqt-mv-2/"/>
    <id>http://example.com/2021/02/07/pyqt-mv-2/</id>
    <published>2021-02-07T05:00:00.000Z</published>
    <updated>2021-02-07T20:11:07.044Z</updated>
    
    <content type="html"><![CDATA[<p>The following example demonstrates how to create custom list model for<br>displaying list-like data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui, QtCore, QtWidgets</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaletteListModel</span>(<span class="params">QtCore.QAbstractListModel</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, colors=[], parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        QtCore.QAbstractListModel.__init__(self, parent)</span><br><span class="line">        self.__colors = colors</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">headerData</span>(<span class="params">self, section, orientation, role</span>):</span></span><br><span class="line">        <span class="comment"># orientation: indicates horizontal or vertical header</span></span><br><span class="line">        <span class="comment"># section:     indicates which index on the header</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class="line">            <span class="keyword">if</span> orientation == QtCore.Qt.Horizontal:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Palette&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Color &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(section+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rowCount</span>(<span class="params">self, parent</span>):</span></span><br><span class="line">        <span class="comment"># parent: are for tree view with hierarchical structure</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__colors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span>(<span class="params">self, index, role</span>):</span></span><br><span class="line">        <span class="comment"># display data for each index, of each data role</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.EditRole:</span><br><span class="line">            <span class="keyword">return</span> self.__colors[index.row()].name()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.ToolTipRole:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hex code: &quot;</span>+self.__colors[index.row()].name()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DecorationRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            value = self.__colors[row]</span><br><span class="line"></span><br><span class="line">            pixmap = QtGui.QPixmap(<span class="number">26</span>, <span class="number">26</span>)</span><br><span class="line">            pixmap.fill(value)</span><br><span class="line">            icon = QtGui.QIcon(pixmap)</span><br><span class="line">            <span class="keyword">return</span> icon</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            value = self.__colors[row]</span><br><span class="line">            <span class="keyword">return</span> value.name()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flags</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="keyword">return</span> QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setData</span>(<span class="params">self, index, value, role=QtCore.Qt.EditRole</span>):</span></span><br><span class="line">        <span class="comment"># set data for each index of the value, data role is set to edit role default</span></span><br><span class="line">        <span class="keyword">if</span> role == QtCore.Qt.EditRole:</span><br><span class="line">            row = index.row()</span><br><span class="line">            color = QtGui.QColor(value)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> color.isValid():</span><br><span class="line">                self.__colors[row] = color</span><br><span class="line">                <span class="comment"># have to emit and dataChanged signal to sync with display</span></span><br><span class="line">                self.dataChanged.emit(index, index)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertRows</span>(<span class="params">self, position, rows, parent=QtCore.QModelIndex(<span class="params"></span>)</span>):</span></span><br><span class="line">        self.beginInsertRows(parent, position, position+rows-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            self.__colors.insert(position, QtGui.QColor(<span class="string">&quot;#000000&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.endInsertRows()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeRows</span>(<span class="params">self, position, rows, parent=QtCore.QModelIndex(<span class="params"></span>)</span>):</span></span><br><span class="line">        self.beginRemoveRows(parent, position, position+rows-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">            value = self.__colors[position]</span><br><span class="line">            self.__colors.remove(value)</span><br><span class="line"></span><br><span class="line">        self.endRemoveRows()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    red = QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    green = QtGui.QColor(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    blue = QtGui.QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    model = PaletteListModel([red, green, blue])</span><br><span class="line">    model.insertRows(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    listView = QtWidgets.QListView()</span><br><span class="line">    listView.show()</span><br><span class="line">    listView.setModel(model)</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li><p>Since <code>parent</code> is used  for hierarchical structure, it is not set or set to null index<br>in this example.</p></li><li><p><code>index</code> is a <code>QModelIndex</code> instance to locate data in model</p></li><li><p>In <code>setData()</code>, make sure to add <code>self.dataChanged.emit(index, index)</code> for syncing data change</p></li><li><p>For inserting and removing rows</p><ol><li>always starts with <code>insertRows/removeRows</code> and<br>close with <code>endInsertRows/endRemoveRows</code> so that view and model is in-sync</li><li>no parent in list view so pass a null index: <code>QModelIndex()</code></li><li>essentially, it is modifying the <code>self.__colors</code> which is displayed in <code>data()</code></li></ol></li></ol><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.youtube.com/watch?v=mCHVI8OXDxw&list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo">https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo</a><br><a href="https://doc.qt.io/qtforpython-5.12/PySide2/QtCore/QModelIndex.html#PySide2.QtCore.QModelIndex">https://doc.qt.io/qtforpython-5.12/PySide2/QtCore/QModelIndex.html#PySide2.QtCore.QModelIndex</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following example demonstrates how to create custom list model for&lt;br&gt;displaying list-like data&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="pyqt" scheme="http://example.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>PyQt Model View Learning (1. Intro)</title>
    <link href="http://example.com/2021/02/06/pyqt-mv-1/"/>
    <id>http://example.com/2021/02/06/pyqt-mv-1/</id>
    <published>2021-02-06T05:00:00.000Z</published>
    <updated>2021-02-07T20:03:08.733Z</updated>
    
    <content type="html"><![CDATA[<p>The following example demonstrated how same data is accessed through a Model<br>and shared across Views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtGui, QtCore, QtWidgets</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># no QString needed in Qt5, use python string instead</span></span><br><span class="line">    data = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    listView = QtWidgets.QListView()</span><br><span class="line">    listView.show()</span><br><span class="line"></span><br><span class="line">    model = QtCore.QStringListModel(data)</span><br><span class="line">    listView.setModel(model)</span><br><span class="line"></span><br><span class="line">    combobox = QtWidgets.QComboBox()</span><br><span class="line">    combobox.setModel(model)</span><br><span class="line">    combobox.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>In Qt5, the QtCore.QStringList() is replaced by python’s built-in string type</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qt 4</span></span><br><span class="line">data = QtCore.QStringList()</span><br><span class="line">data &lt;&lt; <span class="string">&quot;one&quot;</span> &lt;&lt; <span class="string">&quot;two&quot;</span> &lt;&lt; <span class="string">&quot;three&quot;</span> &lt;&lt; <span class="string">&quot;four&quot;</span> &lt;&lt; <span class="string">&quot;five&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># qt 5</span></span><br><span class="line">data = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.youtube.com/watch?v=mCHVI8OXDxw&list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo">https://www.youtube.com/watch?v=mCHVI8OXDxw&amp;list=PLG4y4w32mF3qmweFe59P_8INlVNOm_IHo</a><br><a href="https://stackoverflow.com/questions/27757678/importerror-cannot-import-name-qstringlist-in-pyqt5">https://stackoverflow.com/questions/27757678/importerror-cannot-import-name-qstringlist-in-pyqt5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The following example demonstrated how same data is accessed through a Model&lt;br&gt;and shared across Views&lt;/p&gt;
&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="pyqt" scheme="http://example.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Python Style (1. Breaking Lines)</title>
    <link href="http://example.com/2021/01/31/python-style/"/>
    <id>http://example.com/2021/01/31/python-style/</id>
    <published>2021-01-31T05:00:00.000Z</published>
    <updated>2021-02-07T19:38:28.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Functions-with-long-arguments"><a href="#Functions-with-long-arguments" class="headerlink" title="Functions with long arguments"></a>Functions with long arguments</h3><p>Here’s a snippet of my code from the previous version of autoRigger</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># don&#x27;t do this</span></span><br><span class="line">cmds.setDrivenKeyframe(<span class="string">&#x27;&#123;&#125;_parentConstraint1.&#123;&#125;W0&#x27;</span>.<span class="built_in">format</span>(jnt, ik_jnt), currentDriver=<span class="string">&#x27;&#123;&#125;.FK_IK&#x27;</span>.<span class="built_in">format</span>(switch_ctrl), driverValue=<span class="number">1</span>, value=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>This is quite a long line, how should I break it?</p><p>My initial idea was to move whatever arguments that is over the length limit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># don&#x27;t do this</span></span><br><span class="line">cmds.setDrivenKeyframe(<span class="string">&#x27;&#123;&#125;_parentConstraint1.&#123;&#125;W0&#x27;</span>.<span class="built_in">format</span>(jnt, ik_jnt),</span><br><span class="line">                       currentDriver=<span class="string">&#x27;&#123;&#125;.FK_IK&#x27;</span>.<span class="built_in">format</span>(switch_ctrl), </span><br><span class="line">                       driverValue=<span class="number">1</span>, value=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>But in PEP8, the only suggestion is that the first line should not include any argument,<br>The other lines’ indentation and the closing bracket can be whatever your preference is,<br>Grouping multiple arguments in a single line can be inconsistent and some of them might get ignored.<br>Having one tab or non indentation could also be difficult to distinguish.</p><p>So here’s what I have</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># do this</span></span><br><span class="line">cmds.setDrivenKeyframe(</span><br><span class="line">        <span class="string">&#x27;&#123;&#125;_parentConstraint1.&#123;&#125;W0&#x27;</span>.<span class="built_in">format</span>(jnt, ik_jnt),</span><br><span class="line">        currentDriver=<span class="string">&#x27;&#123;&#125;.FK_IK&#x27;</span>.<span class="built_in">format</span>(switch_ctrl), </span><br><span class="line">        driverValue=<span class="number">1</span>,</span><br><span class="line">        value=<span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The extra indentation and the closing bracket helps to organize function as a whole,<br>and no matter how long is the argument, keep one in each line.</p><h3 id="Multi-line-String"><a href="#Multi-line-String" class="headerlink" title="Multi-line String"></a>Multi-line String</h3><p>I don’t like using triple quotes because the formatting looks weird when having indentation,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;&quot;&quot; this is a very</span></span><br><span class="line"><span class="string">             long string if I had the</span></span><br><span class="line"><span class="string">             energy to type more and more ...&quot;&quot;&quot;</span>  </span><br><span class="line">        </span><br><span class="line"><span class="comment"># this will print out:</span></span><br><span class="line"><span class="comment">#---------------------</span></span><br><span class="line"><span class="comment">#this is a very</span></span><br><span class="line"><span class="comment">#            long string if I had the</span></span><br><span class="line"><span class="comment">#            energy to type more and more ...</span></span><br></pre></td></tr></table></figure><p>I am not a fan of <code>\ </code>, instead I prefer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = (</span><br><span class="line">    <span class="string">&quot;this is a very&quot;</span></span><br><span class="line">    <span class="string">&quot; long string too&quot;</span></span><br><span class="line">    <span class="string">&quot; for sure ...&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Be aware that you need to add spaces and return manually (put spaces in the front and line break at the end)</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://stackoverflow.com/questions/6609956/python-function-argument-list-formatting">https://stackoverflow.com/questions/6609956/python-function-argument-list-formatting</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Functions-with-long-arguments&quot;&gt;&lt;a href=&quot;#Functions-with-long-arguments&quot; class=&quot;headerlink&quot; title=&quot;Functions with long arguments&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python Learning (4. Error Handling)</title>
    <link href="http://example.com/2021/01/24/python-notes-4/"/>
    <id>http://example.com/2021/01/24/python-notes-4/</id>
    <published>2021-01-24T05:00:00.000Z</published>
    <updated>2021-02-07T19:37:36.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><p><code>finally</code> will guarantee execution in <code>try-exception-finally</code> block even after</p><ul><li><code>return</code></li><li><code>raise</code></li></ul><p>Raise error back to parent function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg. this line will give an ZeroDivision Error</span></span><br><span class="line"><span class="number">10</span> / <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># what if this belongs to a function and we want to raise the</span></span><br><span class="line"><span class="comment"># error code to let whatever calls it to handle instead of itself</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># so instead of</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occur_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># error handling</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we do this</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        occur_error()</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># error handling</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occur_error</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="keyword">raise</span> ZeroDivisionError</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://stackoverflow.com/questions/49262379/does-finally-always-execute-in-python">https://stackoverflow.com/questions/49262379/does-finally-always-execute-in-python</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Error-Handling&quot;&gt;&lt;a href=&quot;#Error-Handling&quot; class=&quot;headerlink&quot; title=&quot;Error Handling&quot;&gt;&lt;/a&gt;Error Handling&lt;/h3&gt;&lt;p&gt;&lt;code&gt;finally&lt;/code&gt; w</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt Learning (1. Sorting)</title>
    <link href="http://example.com/2021/01/23/pyqt-sorting/"/>
    <id>http://example.com/2021/01/23/pyqt-sorting/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-02-07T20:03:46.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sorting-Overview"><a href="#Sorting-Overview" class="headerlink" title="Sorting Overview"></a>Sorting Overview</h2><p>Sorting happens a lot in qt viewports like list, table and tree. Using<br>convenience class such as item-based widget provides limited sorting options.</p><p>One common thing may occur when you are sorting items is the widget treats their<br>value as <em>string</em> instead of <em>int</em>, which will result incorrect ordering</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;92&quot;</span>, <span class="string">&quot;89&quot;</span>, <span class="string">&quot;40&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = QtWidgets.QTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>This will sort the list of items based on their string, so the order will be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 10</span><br><span class="line">- 11</span><br><span class="line">- 2</span><br></pre></td></tr></table></figure><p>instead of </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><p>So naturally, you would need to specify the item value as integer type,<br>but you cannot instantiate item with integer, but <code>setData()</code> will work</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># intead of </span></span><br><span class="line">item = QtWidgets.QTableWidgetItem(<span class="built_in">int</span>(value))</span><br><span class="line"><span class="comment"># do this</span></span><br><span class="line">item.setData(QtCore.Qt.ItemDataRole, <span class="built_in">int</span>(value))</span><br></pre></td></tr></table></figure><p>Now everything will sort by numeric order</p><h2 id="Custom-Sorting-Operator-override"><a href="#Custom-Sorting-Operator-override" class="headerlink" title="Custom Sorting (Operator override)"></a>Custom Sorting (Operator override)</h2><p>What if you need more than numeric value for your data, for example, when displaying frame number, you would like to include frame range<br>too. Like frame 1, frame 2, frame 3-7, frame 8, frame 9-14. It looks like using string<br>is the only option.</p><p>This time you need to override value compare operator for these value, that is making<br>your own item class like the following example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTableWidgetItem</span>(<span class="params">QtWidgets.QTableWidgetItem</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        QtWidgets.QTableWidgetItem.__init__(self, parent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, otherItem</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(self.text().split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]) &lt; <span class="built_in">int</span>(otherItem.text().split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">return</span> self.text() &lt; otherItem.text()</span><br></pre></td></tr></table></figure><p>the <code>__lt__</code> is the less than <code>operator&lt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;14-15&quot;</span>, <span class="string">&quot;120&quot;</span>, <span class="string">&quot;100-115&quot;</span>, <span class="string">&quot;59-62&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = MyTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>Everything should behave correctly</p><h2 id="Custom-Sorting-QSortFilterProxyModel-Class"><a href="#Custom-Sorting-QSortFilterProxyModel-Class" class="headerlink" title="Custom Sorting (QSortFilterProxyModel Class)"></a>Custom Sorting (QSortFilterProxyModel Class)</h2><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://stackoverflow.com/questions/363200/is-it-possible-to-sort-numbers-in-a-qtreewidget-column">https://stackoverflow.com/questions/363200/is-it-possible-to-sort-numbers-in-a-qtreewidget-column</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Sorting-Overview&quot;&gt;&lt;a href=&quot;#Sorting-Overview&quot; class=&quot;headerlink&quot; title=&quot;Sorting Overview&quot;&gt;&lt;/a&gt;Sorting Overview&lt;/h2&gt;&lt;p&gt;Sorting happen</summary>
      
    
    
    
    <category term="tech summary" scheme="http://example.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://example.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Python Learning (3. Dunder)</title>
    <link href="http://example.com/2021/01/23/python-notes-3/"/>
    <id>http://example.com/2021/01/23/python-notes-3/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-02-07T19:37:58.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Underscore-Naming"><a href="#Underscore-Naming" class="headerlink" title="Underscore Naming"></a>Underscore Naming</h3><ul><li>Single Leading Underscore: <code>_var</code></li></ul><p>Indicating a name is <strong>protected</strong>, for internal use. Not enforced by python interpreter</p><ul><li>Double Leading Underscore: <code>__var</code></li></ul><p>Indicating a name is <strong>private</strong>. Enforced by interpreter, attempt to call it will trigger <code>AttributeError</code></p><ul><li>Double Leading Trailing Underscore: <code>__var__</code></li></ul><p>Special methods (magic methods) defined by python language, avoid naming your own attribute</p><ul><li>Single Trailing Underscore: <code>var_</code></li></ul><p>Avoid naming conflict with python keywords</p><ul><li>Single Underscore: <code>_</code></li></ul><p>Temporary variable name</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://dbader.org/blog/meaning-of-underscores-in-python#">https://dbader.org/blog/meaning-of-underscores-in-python#</a><br><a href="https://www.tutorialsteacher.com/python/public-private-protected-modifiers">https://www.tutorialsteacher.com/python/public-private-protected-modifiers</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Underscore-Naming&quot;&gt;&lt;a href=&quot;#Underscore-Naming&quot; class=&quot;headerlink&quot; title=&quot;Underscore Naming&quot;&gt;&lt;/a&gt;Underscore Naming&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sing</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python Learning (2. Override vs. Overload)</title>
    <link href="http://example.com/2021/01/17/python-notes-2/"/>
    <id>http://example.com/2021/01/17/python-notes-2/</id>
    <published>2021-01-17T05:00:00.000Z</published>
    <updated>2021-02-07T19:38:10.434Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overload"><a href="#Overload" class="headerlink" title="Overload"></a>Overload</h3><p>Overload sounds like a hearthstone term to me, I should really stop playing it.</p><p><strong>Overloading</strong> occurs when two or more methods in one class have the same<br>method name but different parameters.</p><p>Python supports the following:</p><ul><li>Built-in function overloading</li><li>User defined function overloading</li><li>Operator overloading</li></ul><h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><p><strong>Overriding</strong> means having two methods with the same method name and parameters<br>(i.e., method signature). One of the methods is in the parent class and the<br>other is in the child class. Overriding allows a child class to provide a specific<br>implementation of a method that is already provided its parent class.</p><p><em>Overwrite</em> can be confusing, but it means destroying (replacing) the thing it is<br>overwriting.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.programcreek.com/2009/02/overriding-and-overloading-in-java-with-examples/">https://www.programcreek.com/2009/02/overriding-and-overloading-in-java-with-examples/</a></p><p><a href="https://stackabuse.com/overloading-functions-and-operators-in-python/">https://stackabuse.com/overloading-functions-and-operators-in-python/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Overload&quot;&gt;&lt;a href=&quot;#Overload&quot; class=&quot;headerlink&quot; title=&quot;Overload&quot;&gt;&lt;/a&gt;Overload&lt;/h3&gt;&lt;p&gt;Overload sounds like a hearthstone term to me,</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt Learning (0. Template)</title>
    <link href="http://example.com/2021/01/16/pyqt-template/"/>
    <id>http://example.com/2021/01/16/pyqt-template/</id>
    <published>2021-01-16T05:00:00.000Z</published>
    <updated>2021-02-07T20:03:46.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PyQt-import"><a href="#PyQt-import" class="headerlink" title="PyQt import"></a>PyQt import</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> Qt <span class="keyword">import</span> _loadUi</span><br></pre></td></tr></table></figure><h3 id="Maya-in-application"><a href="#Maya-in-application" class="headerlink" title="Maya (in-application)"></a>Maya (in-application)</h3><p>Qt window parented to Maya main window</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># moduleName.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_maya_main_window</span>():</span></span><br><span class="line">    <span class="keyword">import</span> maya.OpenMayaUI</span><br><span class="line">    main_window_ptr = maya.OpenMayaUI.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QMainWindow)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModuleUI</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=get_maya_main_window(<span class="params"></span>)</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ModuleUI, self).__init__(parent)</span><br><span class="line">        _loadUi(UI_PATH, self)</span><br><span class="line">        self.setWindowFlags(QtCore.Qt.Window)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    window = ModuleUI()</span><br><span class="line">    window.show()</span><br><span class="line">    <span class="keyword">return</span> window</span><br><span class="line"></span><br><span class="line"><span class="comment"># in maya script editor</span></span><br><span class="line">moduleName.show()</span><br></pre></td></tr></table></figure><p>Qt window <strong>not</strong> parented to Maya main window</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># moduleName.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModuleUI</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ModuleUI, self).__init__()</span><br><span class="line">        _loadUi(UI_PATH, self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    window = ModuleUI()</span><br><span class="line">    window.show()</span><br><span class="line">    <span class="keyword">return</span> window</span><br><span class="line"></span><br><span class="line"><span class="comment"># in maya script editor</span></span><br><span class="line">moduleName.show()</span><br></pre></td></tr></table></figure><h3 id="System-application"><a href="#System-application" class="headerlink" title="System application"></a>System application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># appName.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppUI</span>(<span class="params">QtWidgets.QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(AppUI, self).__init__()</span><br><span class="line">        _loadUi(UI_PATH, self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    window = AppUI()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="Without-using-ui-file"><a href="#Without-using-ui-file" class="headerlink" title="Without using .ui file"></a>Without using <code>.ui</code> file</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Error-in-PyCharm"><a href="#Error-in-PyCharm" class="headerlink" title="Error in PyCharm"></a>Error in PyCharm</h3><p>When this error occurs, it is due to MayaDevKit environment<br>MayaDevKit allows maya python command auto-completion, remove it from PyCharm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app &#x3D; QtWidgets.QApplication(sys.argv)</span><br><span class="line">TypeError: &#39;NoneType&#39; object is not callable</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/58925453/pycharm-use-pyside2-typeerror-nonetype-object-is-not-callable">https://stackoverflow.com/questions/58925453/pycharm-use-pyside2-typeerror-nonetype-object-is-not-callable</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;PyQt-import&quot;&gt;&lt;a href=&quot;#PyQt-import&quot; class=&quot;headerlink&quot; title=&quot;PyQt import&quot;&gt;&lt;/a&gt;PyQt import&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="tech summary" scheme="http://example.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="http://example.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Python Learning (1. Import)</title>
    <link href="http://example.com/2021/01/16/python-notes-1/"/>
    <id>http://example.com/2021/01/16/python-notes-1/</id>
    <published>2021-01-16T05:00:00.000Z</published>
    <updated>2021-02-07T19:37:14.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="from-…-import-…-or-import-…"><a href="#from-…-import-…-or-import-…" class="headerlink" title="from … import … or import …"></a>from … import … or import …</h3><p>Always avoid wildcard imports like such:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>Instead use regular import like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module</span><br></pre></td></tr></table></figure><p>Using wildcard import will <strong>not</strong> import names with a leading underscore (unless the module defines an <code>__all__</code> list)</p><p>It is also suggested by <em>PEP8</em></p><h3 id="init-py-when-importing"><a href="#init-py-when-importing" class="headerlink" title="__init__.py when importing"></a>__init__.py when importing</h3><p><code>__init__.py</code> is used to specify a package, when import is trying to find the modules,<br>But it is not required: meaning a package without <code>__init__.py</code>,<br>The system can still find the modules after configuring appropriate PYTHONPATH using<br><code>sys.path.append</code>.</p><p><code>__init__.py</code> is executed after importing the package, I’ve seen<br>sub-directory being imported by appending as environment variable within <code>__init__.py</code></p><p>so instead of this file structure with import like <code>import project.foo.bar</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        foo&#x2F;</span><br><span class="line">                __init__.py</span><br><span class="line">                bar&#x2F;</span><br><span class="line">                        b.py</span><br></pre></td></tr></table></figure><p>inside the <code>__init__.py</code>, it could do a sys.path.append(PATH_TO_BAR)</p><p>so with this file structure, you can just do <code>import project</code></p><p>they could even add the import statement for you in the <code>__init__.py</code>, although it is not transparent.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        foo&#x2F;</span><br><span class="line">                bar&#x2F;</span><br><span class="line">                        b.py</span><br></pre></td></tr></table></figure><p>Also, it seems like whats ever getting appended last overrides the previous<br>env variable, so import to the same name module will find the latest append</p><h3 id="Import-Order"><a href="#Import-Order" class="headerlink" title="Import Order"></a>Import Order</h3><h3 id="Intra-Package"><a href="#Intra-Package" class="headerlink" title="Intra-Package"></a>Intra-Package</h3><p>In a structure like this, how would you do import from another directory?<br>say from <code>module-x.py</code> import <code>module-a</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top-package&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        sub-package-a&#x2F;</span><br><span class="line">                __init__.py</span><br><span class="line">                module-x.py</span><br><span class="line">                module-y.py</span><br><span class="line">        sub-package-b&#x2F;</span><br><span class="line">                __init__.py</span><br><span class="line">                module-a.py</span><br><span class="line">                module-b.py</span><br></pre></td></tr></table></figure><p>Here’s some examples doing relative imports in <code>module-x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module-y</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module-y</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .module-y <span class="keyword">import</span> <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">from</span> .. <span class="title">import</span> <span class="title">sub</span>-<span class="title">package</span>-<span class="title">b</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">from</span> ..<span class="title">subpackage</span>-<span class="title">b</span> <span class="title">import</span> <span class="title">module</span>-<span class="title">a</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">from</span> ..<span class="title">subpackage</span>-<span class="title">b</span>.<span class="title">module</span>-<span class="title">a</span> <span class="title">import</span> <span class="title">class</span></span></span><br></pre></td></tr></table></figure><p>##Reference<br><a href="https://docs.python.org/3/tutorial/modules.html">https://docs.python.org/3/tutorial/modules.html</a><br><a href="https://stackoverflow.com/questions/37974843/why-can-i-import-successfully-without-init-py">https://stackoverflow.com/questions/37974843/why-can-i-import-successfully-without-init-py</a><br><a href="https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py">https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;from-…-import-…-or-import-…&quot;&gt;&lt;a href=&quot;#from-…-import-…-or-import-…&quot; class=&quot;headerlink&quot; title=&quot;from … import … or import …&quot;&gt;&lt;/a&gt;from </summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Conditional Expression &amp; List Comprehension</title>
    <link href="http://example.com/2021/01/06/python-shortcut-1/"/>
    <id>http://example.com/2021/01/06/python-shortcut-1/</id>
    <published>2021-01-06T05:00:00.000Z</published>
    <updated>2021-01-11T02:18:35.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Conditional-Expression"><a href="#Conditional-Expression" class="headerlink" title="Conditional Expression"></a>Conditional Expression</h2><p>Conditional Expression (also known as Ternary Operators)</p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    value = value_if_true</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = value_if_false</span><br></pre></td></tr></table></figure><p>this can be re-written as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = value_if_true <span class="keyword">if</span> condition <span class="keyword">else</span> value_if_false</span><br></pre></td></tr></table></figure><h2 id="List-Comprehension"><a href="#List-Comprehension" class="headerlink" title="List Comprehension"></a>List Comprehension</h2><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">list</span>.append(item)</span><br></pre></td></tr></table></figure><p>this can be re-written as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [item <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br></pre></td></tr></table></figure><p>it can also be combined with statements and operations</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [operate_func(item) <span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><p>However, list comprehension is meant for creating list, not executing multiple operations</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[operation() <span class="keyword">for</span> _ <span class="keyword">in</span> steps]  <span class="comment"># Wrong</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> steps:               <span class="comment"># Do this instead</span></span><br><span class="line">    operation()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Conditional-Expression&quot;&gt;&lt;a href=&quot;#Conditional-Expression&quot; class=&quot;headerlink&quot; title=&quot;Conditional Expression&quot;&gt;&lt;/a&gt;Conditional Expressi</summary>
      
    
    
    
    <category term="tech summary" scheme="http://example.com/categories/tech-summary/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="style" scheme="http://example.com/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>Learning Git</title>
    <link href="http://example.com/2020/12/22/git-learning/"/>
    <id>http://example.com/2020/12/22/git-learning/</id>
    <published>2020-12-22T05:00:00.000Z</published>
    <updated>2021-01-11T02:17:10.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DVCS-vs-CVCS"><a href="#DVCS-vs-CVCS" class="headerlink" title="DVCS vs. CVCS"></a>DVCS vs. CVCS</h2><p>DVCS (distributed version control system), for example: Git. Each developer are getting a complete copy of the entire history of that project. This allows developer works offline without connecting to the master repo. Git has an additional staging phase which allows you to break down changes into seperate commits with its own comments. </p><p>CVCS (centralized version control system), for example: SVN. One central repository, gives manager more top down approach to control, security permission. No staging phase means one less step.</p><p>Note: today, more teams are using a <strong>Centralized Git Model</strong>, where changes intended to be a part of a project are submitted as pull or merge request to the master branch.</p><h2 id="GitHub-vs-GitLab"><a href="#GitHub-vs-GitLab" class="headerlink" title="GitHub vs. GitLab"></a>GitHub vs. GitLab</h2><p>They are completely different web-based Git repositories. On the surface, it looks like GitHub is really community friendly, hosting the largest version control platform, while GitLab offers great deal for enterprise professional use (equally, or better features like tracking, project import, with cheaper prices)</p><h3 id="Git-SSH-protocol"><a href="#Git-SSH-protocol" class="headerlink" title="Git SSH protocol"></a>Git SSH protocol</h3><h3 id="Git-Tricky-Commands"><a href="#Git-Tricky-Commands" class="headerlink" title="Git Tricky Commands"></a>Git Tricky Commands</h3><ul><li><p><code>git init</code> vs. <code>git clone</code></p><p> <code>git init</code> is a setup process where you initialize a bare local repo<br> <code>git clone</code> obtain a local development clone repo from an already setup central repository, which can be treated as combining <code>git init</code> and <code>git remote add</code></p></li><li><p><code>git pull</code> (or <code>git push</code>) vs. <code>pull request</code> (or <code>push request</code>)</p><p> <code>git pull</code> pull the changes from the remote repo to your local repo, which is effectively a <code>git fetch</code> followed by a <code>git merge</code></p><p> <code>pull request</code> is you requesting another repo to pull your change (more or less asking them to <code>git pull</code> from your repo). A <code>push request</code> is the other way around, where the target repo ask you to <code>git push</code> your changes</p></li><li><p><code>git config</code></p><p> this command allows you to configure your Git configuration on a global or local project level, some common usage includes setting up name and email, configure text color or editor choice. There are three configuration level: <code>--local</code>, <code>--global</code>, <code>--system</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line">git --global user.name <span class="string">&quot;John Doh&quot;</span></span><br><span class="line">git --system core.editor vim</span><br></pre></td></tr></table></figure><p> Note: most config only need to be set once, email is an exception where you will want to use personal email for personal project and professional email for work-related project</p></li></ul><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><ul><li><p><a href="https://blog.hackbrightacademy.com/blog/svn-vs-git/#:~:text=The%20difference%20between%20Git%20and%20SVN%20version%20control%20systems%20is,well%20as%20some%20local%20repositories.">https://blog.hackbrightacademy.com/blog/svn-vs-git/#:~:text=The%20difference%20between%20Git%20and%20SVN%20version%20control%20systems%20is,well%20as%20some%20local%20repositories.</a></p></li><li><p><a href="https://www.atlassian.com/git/tutorials/what-is-git">https://www.atlassian.com/git/tutorials/what-is-git</a></p></li><li><p><a href="https://www.perforce.com/blog/vcs/git-vs-perforce-how-choose-and-when-use-both">https://www.perforce.com/blog/vcs/git-vs-perforce-how-choose-and-when-use-both</a></p></li><li><p><a href="https://usersnap.com/blog/gitlab-github/">https://usersnap.com/blog/gitlab-github/</a></p></li><li><p><a href="https://stackoverflow.com/questions/22585407/git-pull-vs-pull-request">https://stackoverflow.com/questions/22585407/git-pull-vs-pull-request</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DVCS-vs-CVCS&quot;&gt;&lt;a href=&quot;#DVCS-vs-CVCS&quot; class=&quot;headerlink&quot; title=&quot;DVCS vs. CVCS&quot;&gt;&lt;/a&gt;DVCS vs. CVCS&lt;/h2&gt;&lt;p&gt;DVCS (distributed version co</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
    <category term="version control" scheme="http://example.com/tags/version-control/"/>
    
  </entry>
  
  <entry>
    <title>Field vs. Property</title>
    <link href="http://example.com/2020/12/20/field-property/"/>
    <id>http://example.com/2020/12/20/field-property/</id>
    <published>2020-12-20T05:00:00.000Z</published>
    <updated>2021-01-11T02:19:33.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Field-vs-Property"><a href="#Field-vs-Property" class="headerlink" title="Field vs. Property"></a>Field vs. Property</h3><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">string</span> _name;<span class="comment">// this is a field</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> Name<span class="comment">// this is a property</span></span><br><span class="line">   &#123;</span><br><span class="line">      get&#123;</span><br><span class="line">         <span class="keyword">return</span> _name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">set</span>&#123;</span><br><span class="line">         _name = value;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> Age&#123; get;<span class="built_in">set</span>; &#125; <span class="comment">// AutoProperty generates private field for us</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Field</strong> which stores the internal data should almost always be private.<br><strong>Property</strong> gives access to field (or expose field)<br>Above provides an example of field and property as well as a short-hand for get &amp; set, and AutoProperty.</p><p><a href="https://www.w3schools.com/cs/cs_properties.asp">https://www.w3schools.com/cs/cs_properties.asp</a><br><a href="https://medium.com/omarelgabrys-blog/properties-vs-fields-in-c-6cec86c59dc9">https://medium.com/omarelgabrys-blog/properties-vs-fields-in-c-6cec86c59dc9</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Field-vs-Property&quot;&gt;&lt;a href=&quot;#Field-vs-Property&quot; class=&quot;headerlink&quot; title=&quot;Field vs. Property&quot;&gt;&lt;/a&gt;Field vs. Property&lt;/h3&gt;&lt;figure cla</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="c#" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Structure vs. Class</title>
    <link href="http://example.com/2020/12/20/structure-class/"/>
    <id>http://example.com/2020/12/20/structure-class/</id>
    <published>2020-12-20T05:00:00.000Z</published>
    <updated>2021-01-11T02:24:41.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Struct-vs-Class"><a href="#Struct-vs-Class" class="headerlink" title="Struct vs. Class"></a>Struct vs. Class</h3><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># this is a struct</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Coord</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Coord</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span>&#123;</span><br><span class="line">X = x;</span><br><span class="line">Y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> X &#123; get; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Y &#123; get; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># this is a class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">Name = name;</span><br><span class="line">Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Age &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Structure</strong> types have value semantics. That is, a variable of a structure type contains an instance of the type. By default, variable values are copied on assignment, passing an argument to a method, and returning a method result. In the case of a structure-type variable, an instance of the type is copied Because structure type have value semantics, it is recommended using “readonly” to declare structure type as immutable.</p><p><strong>Class</strong> types have reference semantics. That is, a variable of a class type contains a reference to an instance of the type, not the instance itself. Therefore, the following example shows the different use cases.</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person Jack = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">28</span>);</span><br><span class="line">Jack.Name = <span class="string">&quot;Jackson&quot;</span>;</span><br><span class="line">Console.WriteLine(Jack.Name);</span><br><span class="line"></span><br><span class="line">Coord origin = <span class="keyword">new</span> Coord(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Console.WriteLine(origin.X);</span><br><span class="line">origin.X = <span class="number">5</span>;   <span class="comment">// error! the return value X is not a variable</span></span><br><span class="line"><span class="comment">// it is actrually the copy of the instance</span></span><br><span class="line">origin = <span class="keyword">new</span> Coord(<span class="number">5</span>, <span class="number">0</span>);<span class="comment">// clear! can only set new X this way</span></span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/1747654/error-cannot-modify-the-return-value-c-sharp">https://stackoverflow.com/questions/1747654/error-cannot-modify-the-return-value-c-sharp</a><br><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Struct-vs-Class&quot;&gt;&lt;a href=&quot;#Struct-vs-Class&quot; class=&quot;headerlink&quot; title=&quot;Struct vs. Class&quot;&gt;&lt;/a&gt;Struct vs. Class&lt;/h3&gt;&lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="c#" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Verlet Integration</title>
    <link href="http://example.com/2020/11/19/verlet-integration/"/>
    <id>http://example.com/2020/11/19/verlet-integration/</id>
    <published>2020-11-19T05:00:00.000Z</published>
    <updated>2021-01-11T02:23:26.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Verlet-integration"><a href="#Verlet-integration" class="headerlink" title="Verlet integration:"></a>Verlet integration:</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>When simulating a particle movement, I naturally think of Euler integration, where the position of the particle can be expressed as such: (free falling motion)</p><p>$$<br>x = 0.5<em>g</em>t^2<br>$$<br>This is an extremly easy use case. The position of the particle can be represented using a function of time. But in real life, a particle can be affected by multiple forces (and even unstabled force caused non-constant acceleration) and Euler integration also has inaccurate estimation when time step is very large.</p><p>In my understanding, the use of Verlet is good for complex particle movement. What it essentially does is relate force with position rather than velocity. The process first calculate the current particle position and the position one step back:</p><p>$$<br>velocity = Xcurrent-Xprevious;<br>$$</p><p>$$<br>Xprevious = Xcurrent;<br>Xcurrent = Xcurrent+velocity<br>$$</p><p>This works magically, here’s some sample code to help understand it.</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// without other influence, the following updates the particle position</span></span><br><span class="line">velocity = posNow - posOld;</span><br><span class="line">posOld  = posNow;</span><br><span class="line">posNow  += velocity;</span><br></pre></td></tr></table></figure><h3 id="Calculate-Force"><a href="#Calculate-Force" class="headerlink" title="Calculate Force"></a>Calculate Force</h3><p>What if we want to add gravity to the particle like the free falling above? Just add the acceleration to the current position, and the change will add-up on the next integration. The following also applies to forces like friction.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posNow  += GRAVITY; <span class="comment">// not sure if we should multipy Time.deltatime</span></span><br></pre></td></tr></table></figure><h3 id="Constraint"><a href="#Constraint" class="headerlink" title="Constraint"></a>Constraint</h3><p>Constraint are usually in the form of constraining particles to a specific distance, like spring. When mulitple constraints acts on single particle, one constraint will affect the other. To solve this, loop the constraint multiple time for each time step.</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; ITERATION; count++)&#123;</span><br><span class="line">Constriants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constraint on rope to make fixed distance between segments</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Constriants</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; segment<span class="number">-1</span>; index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> distance = (currentSeg.posNow - nextSeg.posNow).magnitude;</span><br><span class="line"><span class="keyword">float</span> error = Mathf.Abs(distance - ropeDist);</span><br><span class="line">Vector2 changeDir = Vector2.zero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &gt; ropeDist)</span><br><span class="line">changeDir = (currentSeg.posNow - nextSeg.posNow).normalized;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; ropeDist)</span><br><span class="line">changeDir = (nextSeg.posNow - currentSeg.posNow).normalized;</span><br><span class="line"></span><br><span class="line">Vector2 changeAmount = changeDir * error;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">nextSeg.posNow += changeAmount;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">currentSeg.posNow -= changeAmount * <span class="number">0.5f</span>;</span><br><span class="line">nextSeg.posNow += changeAmount * <span class="number">0.5f</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Collision"><a href="#Collision" class="headerlink" title="Collision"></a>Collision</h3><p>Penalty based system or projection collision reaction</p><figure class="highlight c"><figcaption><span>sharp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example for bounding box collision</span></span><br><span class="line">Vector2 velocity = posNow - posOld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (posNow.x &gt; screenWidth)&#123;</span><br><span class="line">posNow.x = screenWidth;</span><br><span class="line">posOld.x = posNow.x + velocity.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (posNow.x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">posNow.x = <span class="number">0</span>;</span><br><span class="line">posOld.x = posNow.x + velocity.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (posNow.y &gt; screenWidth)&#123;</span><br><span class="line">posNow.y = screenWidth;</span><br><span class="line">posOld.y = posNow.y + velocity.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (posNow.y &lt; <span class="number">0</span>)&#123;</span><br><span class="line">posNow.y = <span class="number">0</span>;</span><br><span class="line">posOld.y = posNow.y + velocity.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://sheldonlei.itch.io/rope-simulation">https://sheldonlei.itch.io/rope-simulation</a></p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p><a href="https://youtu.be/3HjO_RGIjCU">https://youtu.be/3HjO_RGIjCU</a><br><a href="https://www.youtube.com/watch?v=FcnvwtyxLds">https://www.youtube.com/watch?v=FcnvwtyxLds</a><br><a href="https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet">https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Verlet-integration&quot;&gt;&lt;a href=&quot;#Verlet-integration&quot; class=&quot;headerlink&quot; title=&quot;Verlet integration:&quot;&gt;&lt;/a&gt;Verlet integration:&lt;/h2&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="tech summary" scheme="http://example.com/categories/tech-summary/"/>
    
    
    <category term="Unity" scheme="http://example.com/tags/Unity/"/>
    
    <category term="integration" scheme="http://example.com/tags/integration/"/>
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Maya Python API (3. Custom Deformer)</title>
    <link href="http://example.com/2019/11/11/maya-api-3/"/>
    <id>http://example.com/2019/11/11/maya-api-3/</id>
    <published>2019-11-11T05:00:00.000Z</published>
    <updated>2021-01-11T02:45:12.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="General-Format"><a href="#General-Format" class="headerlink" title="General Format"></a>General Format</h1><h3 id="Custom-deformer-Sample"><a href="#Custom-deformer-Sample" class="headerlink" title="Custom deformer Sample"></a>Custom deformer Sample</h3><p>API 1.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> mpx</span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&#x27;myFirstDeformer&#x27;</span></span><br><span class="line">nodeID = om.MTypeId(<span class="number">0x55555</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDeformer</span>(<span class="params">mpx.MPxDeformerNode</span>):</span></span><br><span class="line">    amplitudeAttr = om.MObject()</span><br><span class="line">    displacementAttr = om.MObject()</span><br><span class="line">    matrixAttr = om.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        mpx.MPxDeformerNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deform</span>(<span class="params">self, dataBlock, geomIterator, localToWorldMatrix, geomIndex</span>):</span></span><br><span class="line">        <span class="comment"># step 1: access built-in attribute value using attribute name and attribute handle</span></span><br><span class="line">        envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        envelopeHandle = dataBlock.inputValue(envelopeAttr)</span><br><span class="line">        envelopeValue = envelopeHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 1.5: access custom attribute value</span></span><br><span class="line">        amplitudeHandle = dataBlock.inputValue(MyDeformer.amplitudeAttr)</span><br><span class="line">        amplitudeValue = amplitudeHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        displacementHandle = dataBlock.inputValue(MyDeformer.displacementAttr)</span><br><span class="line">        displacementValue = displacementHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 1.55: access custom attribute value connected to an accessory node</span></span><br><span class="line">        matrixHandle = dataBlock.inputValue(MyDeformer.matrixAttr)</span><br><span class="line">        matrixValue = matrixHandle.asMatrix()</span><br><span class="line">        transMatrix = om.MTransformationMatrix(matrixValue)  <span class="comment"># matrix type</span></span><br><span class="line">        translateValue = transMatrix.getTranslation(om.MSpace.kObject)  <span class="comment"># vector type</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 2: access input mesh</span></span><br><span class="line">        inputMesh = self.getDeformerInputGeom(dataBlock, geomIndex)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 2.5: access mesh normals</span></span><br><span class="line">        meshFn = om.MFnMesh(inputMesh)</span><br><span class="line">        normalVectorArray = om.MFloatVectorArray()  <span class="comment"># create float vector array to store normal vector</span></span><br><span class="line">        meshFn.getVertexNormals(<span class="literal">False</span>, normalVectorArray, om.MSpace.kObject)  <span class="comment"># (average normal or not?, the array to store, normal space)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 3: iterate the mesh vertices and deform it</span></span><br><span class="line">        newVertexPosArray = om.MPointArray()  <span class="comment"># to store new vertices position</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geomIterator.isDone():</span><br><span class="line">            vertexPos = geomIterator.position()</span><br><span class="line">            vertexIndex = geomIterator.index()</span><br><span class="line">            normalVector = om.MVector(normalVectorArray[vertexIndex])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># get weight from weightPainting and multiply it to the deform, this is done inside</span></span><br><span class="line">            <span class="comment"># built-in function weightValue(dataBlock, geomIndex, vertexIndex)</span></span><br><span class="line">            weight = self.weightValue(dataBlock, geomIndex, vertexIndex)</span><br><span class="line"></span><br><span class="line">            vertexPos.x = vertexPos.x + math.sin(vertexIndex + displacementValue + translateValue[<span class="number">0</span>]) * normalVector.x * amplitudeValue * envelopeValue * weight</span><br><span class="line">            vertexPos.y = vertexPos.y + math.sin(vertexIndex + displacementValue + translateValue[<span class="number">0</span>]) * normalVector.y * amplitudeValue * envelopeValue * weight</span><br><span class="line">            vertexPos.z = vertexPos.z + math.sin(vertexIndex + displacementValue + translateValue[<span class="number">0</span>]) * normalVector.z * amplitudeValue * envelopeValue * weight</span><br><span class="line">            newVertexPosArray.append(vertexPos)</span><br><span class="line">            geomIterator.<span class="built_in">next</span>()</span><br><span class="line">        geomIterator.setAllPositions(newVertexPosArray)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override built-in function that allows to create accessory node along with deformer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accessoryNodeSetup</span>(<span class="params">self, dagModifier</span>):</span></span><br><span class="line">        <span class="comment"># step1: create the accessory node using the supplied dagModifier</span></span><br><span class="line">        locator = dagModifier.createNode(<span class="string">&#x27;locator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step2: access accessory node&#x27;s attribute(can&#x27;t use mplug type, has to be mobject type)</span></span><br><span class="line">        <span class="comment"># access dependency node function set</span></span><br><span class="line">        dependNodeFn = om.MFnDependencyNode(locator)</span><br><span class="line">        matrixPlug = dependNodeFn.findPlug(<span class="string">&#x27;worldMatrix&#x27;</span>)  <span class="comment"># this returns mplug type attribute, we need mobject type attribute</span></span><br><span class="line">        matrixAttr = matrixPlug.attribute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step3: connect mobject type(required) together</span></span><br><span class="line">        <span class="comment"># param: accessory node(mobject), accessory attr(mobject), deformer node(mobject: using self.thisMObject()), deformer attr(mobject)</span></span><br><span class="line">        mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.matrixAttr)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;now the accessory node&#x27;s worldMatrix is driving to the in-matrix of the deformer node&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> mConnectStatus</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accessoryAttribute</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># returns the deformer node attribute connected</span></span><br><span class="line">        <span class="keyword">return</span> MyDeformer.matrixAttr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDeformerInputGeom</span>(<span class="params">self, dataBlock, geomIndex</span>):</span></span><br><span class="line">        inputAttr = mpx.cvar.MPxGeometryFilter_input</span><br><span class="line">        inputHandle = dataBlock.outputArrayValue(inputAttr)  <span class="comment"># use outputArray instead of inputArray to avoid re-computation</span></span><br><span class="line">        inputHandle.jumpToElement(geomIndex)</span><br><span class="line">        inputElementHandle = inputHandle.outputValue()</span><br><span class="line"></span><br><span class="line">        inputGeomAttr = mpx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        inputGeomHandle = inputElementHandle.child(inputGeomAttr)  <span class="comment"># this is different from how we usually get handler</span></span><br><span class="line">        inputGeomMesh = inputGeomHandle.asMesh()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inputGeomMesh</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeCreator</span>():</span></span><br><span class="line">    <span class="comment"># return pointer to instance of our deformer node class</span></span><br><span class="line">    <span class="keyword">return</span> mpx.asMPxPtr(MyDeformer())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeInitializer</span>():</span></span><br><span class="line">    <span class="comment"># step1: define attribute function set (numericAttr &amp; matrixAttr)</span></span><br><span class="line">    numericAttrFn = om.MFnNumericAttribute()</span><br><span class="line">    matrixAttrFn = om.MFnMatrixAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: create custom attribute and set its property</span></span><br><span class="line">    MyDeformer.amplitudeAttr = numericAttrFn.create(<span class="string">&#x27;ampplitude&#x27;</span>, <span class="string">&#x27;amp&#x27;</span>, om.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    numericAttrFn.setMin(-<span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.setMax(<span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.setReadable(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    MyDeformer.displacementAttr = numericAttrFn.create(<span class="string">&#x27;displacement&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, om.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    numericAttrFn.setMin(-<span class="number">5.0</span>)</span><br><span class="line">    numericAttrFn.setMax(<span class="number">5.0</span>)</span><br><span class="line">    numericAttrFn.setReadable(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    MyDeformer.matrixAttr = matrixAttrFn.create(<span class="string">&#x27;matrix&#x27;</span>, <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    matrixAttrFn.setStorable(<span class="literal">False</span>)</span><br><span class="line">    matrixAttrFn.setConnectable(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2.5: access built-in attribute using OpenMayaMpx.cvar.MPxGeometryFilter_outputGeom</span></span><br><span class="line">    outputGeom = mpx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step3: attach attribute</span></span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.amplitudeAttr)</span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.displacementAttr)</span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.matrixAttr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step4: add circuit (relationship)</span></span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.amplitudeAttr, outputGeom)</span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.displacementAttr, outputGeom)</span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.matrixAttr, outputGeom)</span><br><span class="line"></span><br><span class="line">    cmds.makePaintable(nodeName, <span class="string">&#x27;weights&#x27;</span>, attrType=<span class="string">&#x27;multiFloat&#x27;</span>, shapeMode=<span class="string">&#x27;deformer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = mpx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Parameter: node_name, node_id, node_creatorFunc, node_initFuc, nodeType(common type include-kDeformerNode, kDependNode)</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, mpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr(<span class="string">&#x27;fail to register node: &#x27;</span> + nodeName)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uninitializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = mpx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr(<span class="string">&#x27;fail to de-register node: &#x27;</span> + nodeName)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><br/></br></p><h2 id="Node-MPxDeformerNode-is-only-available-in-API-2-0"><a href="#Node-MPxDeformerNode-is-only-available-in-API-2-0" class="headerlink" title="Node: MPxDeformerNode is only available in API 2.0"></a>Node: MPxDeformerNode is only available in API 2.0</h2><p><br/></br></p><h2 id="Custom-Attribute-vs-Built-in-Attribute"><a href="#Custom-Attribute-vs-Built-in-Attribute" class="headerlink" title="Custom Attribute vs. Built-in Attribute"></a>Custom Attribute vs. Built-in Attribute</h2><p>In the last chapter, we know how to create custom numeric type attribute using <strong>MFnNumericAttribute</strong>. Sometimes in our node, we want to access existing built-in attribute. We do so by using <strong>OpenMayaMPx.cvar.MPxDeformerNode_(attributeName)</strong> before Maya 2016, we use <strong>OpenMayaMPx.cvar.MPxGeometryFilter_(attributeName)</strong> after 2016.</p><h2 id="Obtain-Input-Geometry"><a href="#Obtain-Input-Geometry" class="headerlink" title="Obtain Input Geometry"></a>Obtain Input Geometry</h2><p>In the sample code, we define our custom function <strong>getDeformerInputGeom(self, dataBlock, geomIndex)</strong> to obtain the input mesh to the deformer node. We will discuss this later.</p><h2 id="Accessory-Node"><a href="#Accessory-Node" class="headerlink" title="Accessory Node"></a>Accessory Node</h2><p>Accessory node acts like a secondary driver node connected to our deformer so they can influence the deformation. In the sample code, our accessory node is a locator which when we connects its world matrix, it will change our mesh’s deformation when translating.</p><h2 id="Custom-Dependency-Node-vs-Custom-Deformer-Node"><a href="#Custom-Dependency-Node-vs-Custom-Deformer-Node" class="headerlink" title="Custom Dependency Node vs. Custom Deformer Node"></a>Custom Dependency Node vs. Custom Deformer Node</h2><p><strong>Registration:</strong> In our previous chapter, we register our node using <strong>registerNode()</strong> with node type: <strong>omMPx.MPxNode.kDependNode</strong>, in deformer node, we use <strong>omMPx.MPxNode.kDeformerNode</strong> as our node type.</p><p><strong>Inheritence:</strong> We now inherit our class from <strong>omMPx.MPxDeformerNode</strong> instead of <strong>omMPxNode</strong><br>there’s still <strong>compute()</strong> in MPxDeformerNode class, but we want to write our deformation algorithm in <strong>deform()</strong>.</p><p><strong>Accessory Node:</strong> <strong>accessoryNodeSetup(self, dagModifier)</strong> and <strong>accessoryAttribute(self)</strong> is overrided to allow us to control accessory node along with our deformer.</p><p><br/></br></p><h1 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h1><h3 id="step-1-Declare-attribute-Same-as-last-chapter"><a href="#step-1-Declare-attribute-Same-as-last-chapter" class="headerlink" title="step 1: Declare attribute (Same as last chapter)"></a>step 1: Declare attribute (Same as last chapter)</h3><h3 id="step-2-Initialize-Node"><a href="#step-2-Initialize-Node" class="headerlink" title="step 2: Initialize Node"></a>step 2: Initialize Node</h3><p><strong>Node Creator</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> mpx.asMPxPtr(MyDeformer())</span><br></pre></td></tr></table></figure><p>Only API 1.0 is available.</p><p><strong>Node Initializer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeInitializer</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;1: create reference to numericAttribute and matrixAttribute function sets&#x27;&#x27;&#x27;</span></span><br><span class="line">    numericAttrFn = om.MFnNumericAttribute()</span><br><span class="line">    matrixAttrFn = om.MFnMatrixAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 2: create attribute using the function set&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyDeformer.inNumAttr = numericAttrFn.create(<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, om.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    numericAttrFn.setMin(-<span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.setMax(<span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.setReadable(<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    MyDeformer.inMatAttr = numericAttrFn.create(<span class="string">&#x27;matrix&#x27;</span>, <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    matrixAttrFn.setStorable(<span class="literal">False</span>)</span><br><span class="line">    matrixAttrFn.setConnectable(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 2.5: access built-in attribute using OpenMayaMpx.cvar.MPxGeometryFilter_outputGeom&#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = mpx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 3: attach attribute&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.inNumAttr)</span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.inMatAttr)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 4: add circuit (relationship in-&gt;out)&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.inNumAttr, ouputGeom)</span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.inMatAttr, ouputGeom)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 5: make attribute paintable&#x27;&#x27;&#x27;</span></span><br><span class="line">cmds.makePaintable(nodeName, <span class="string">&#x27;weights&#x27;</span>, attrType=<span class="string">&#x27;multiFloat&#x27;</span>, shapeMode=<span class="string">&#x27;deformer&#x27;</span>)</span><br></pre></td></tr></table></figure><p>we access the output Geometry attribute so we can later add relationship to it.</p><p><strong>RegisterNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDeformNode)</span><br></pre></td></tr></table></figure><p><strong>De-registerNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.deregisterNode(nodeID)</span><br></pre></td></tr></table></figure><h3 id="step-3-Initialize-Node-（Actual-Deform-Algorithm）"><a href="#step-3-Initialize-Node-（Actual-Deform-Algorithm）" class="headerlink" title="step 3: Initialize Node （Actual Deform Algorithm）"></a>step 3: Initialize Node （Actual Deform Algorithm）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxDeformNode</span>):</span></span><br><span class="line">    inNumAttr = om.MObject()</span><br><span class="line">    inMatAttr = om.MObject()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">om.MPxDeformNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deform</span>(<span class="params">self, dataBlock, geomIterator, localToWorldMatrix, geomIndex</span>):</span></span><br><span class="line">        <span class="comment"># step 1: access built-in attribute value using attribute name and attribute handle</span></span><br><span class="line">        envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        envelopeHandle = dataBlock.inputValue(envelopeAttr)</span><br><span class="line">        envelopeValue = envelopeHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 1.5: access custom attribute value</span></span><br><span class="line">        inNumHandle = dataBlock.inputValue(MyDeformer.inNumAttr)</span><br><span class="line">        inNumValue = inNumHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 1.55: access custom translate value connected to an accessory node</span></span><br><span class="line">        inMatHandle = dataBlock.inputValue(MyDeformer.inMatAttr)</span><br><span class="line">        inMatValue = inNumHandle.asMatrix()</span><br><span class="line">        transMatrix = om.MTransformationMatrix(inMatValue)  <span class="comment"># matrix type</span></span><br><span class="line">        translateValue = transMatrix.getTranslation(om.MSpace.kObject)  <span class="comment"># vector type</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 2: access input mesh</span></span><br><span class="line">        inputMesh = self.getDeformerInputGeom(dataBlock, geomIndex)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 2.5: access mesh normals</span></span><br><span class="line">        meshFn = om.MFnMesh(inputMesh)</span><br><span class="line">        normalVectorArray = om.MFloatVectorArray()  <span class="comment"># create float vector array to store normal vector</span></span><br><span class="line">        meshFn.getVertexNormals(<span class="literal">False</span>, normalVectorArray, om.MSpace.kObject)  <span class="comment"># (average normal or not?, the array to store, normal space)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 3: iterate the mesh vertices and deform it</span></span><br><span class="line">        newVertexPosArray = om.MPointArray()  <span class="comment"># to store new vertices position</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geomIterator.isDone():</span><br><span class="line">            vertexPos = geomIterator.position()</span><br><span class="line">            vertexIndex = geomIterator.index()</span><br><span class="line">            normalVector = om.MVector(normalVectorArray[vertexIndex])</span><br><span class="line">            <span class="comment"># built-in function weightValue(dataBlock, geomIndex, vertexIndex)</span></span><br><span class="line">            weight = self.weightValue(dataBlock, geomIndex, vertexIndex)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># vertexPos.x = vertexPos.x + [calculation of normalVector.x and translateValue[0]] * envelopeValue * weight</span></span><br><span class="line">            newVertexPosArray.append(vertexPos)</span><br><span class="line">            geomIterator.<span class="built_in">next</span>()</span><br><span class="line">        geomIterator.setAllPositions(newVertexPosArray)</span><br></pre></td></tr></table></figure><p>–To access a value from an attribute, we use <strong>handle = dataBlock.input/outputValue(MyNode.attr)</strong></p><p>if we have a custom attribute <strong>‘inNumAttr’:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;inNumHandle = dataBlock.inputValue(MyDeformer.inNumAttr)<br>&nbsp;&nbsp;&nbsp;&nbsp;inNumValue = inNumHandle.asFloat()<br>if we have a built-in attribte <strong>‘envelope’</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;# we first get our attribute name ‘envelope’<br>&nbsp;&nbsp;&nbsp;&nbsp;envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope<br>&nbsp;&nbsp;&nbsp;&nbsp;envelopeHandle = dataBlock.inputValue(envelopeAttr)<br>&nbsp;&nbsp;&nbsp;&nbsp;envelopeValue = envelopeHandle.asFloat()</p><p>–To get normal for individual vertices on our input mesh, we first need to obtain our input mesh using our own function: <strong>getDeformerInputGeom(self, dataBlock, geomIndex)</strong>. And using mesh function set MeshFn’s <strong>getVertexNormals()</strong> we store the normal vector in <strong>om.MFloatVectorArray()</strong> type array.</p><p>–To deform our mesh: we use the geometry iterator to perform iteration on each mesh vertex and re-calculate its position. We combine the use of <strong>geoIterator.position()</strong> and <strong>geomIterator.setPosition(point)</strong> or <strong>geomIterator.setAllPositions(pointArray)</strong>.</p><p>–  To access weight value on each vertex, we use built-in function <strong>weightValue(dataBlock, geomIndex, vertexIndex)</strong>. In which, <strong>geomIndex</strong> is provided in <strong>deform()</strong> and <strong>vertexIndex</strong> is from <strong>geomIterator</strong>.</p><h3 id="Step-3-1-Get-in-Mesh"><a href="#Step-3-1-Get-in-Mesh" class="headerlink" title="Step 3.1: Get in-Mesh"></a>Step 3.1: Get in-Mesh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDeformerInputGeom</span>(<span class="params">self, dataBlock, geomIndex</span>):</span></span><br><span class="line">    inputAttr = mpx.cvar.MPxGeometryFilter_input</span><br><span class="line">    inputHandle = dataBlock.outputArrayValue(inputAttr)  <span class="comment"># use outputArray instead of inputArray to avoid re-computation</span></span><br><span class="line">    inputHandle.jumpToElement(geomIndex)</span><br><span class="line">    inputElementHandle = inputHandle.outputValue()</span><br><span class="line"></span><br><span class="line">    inputGeomAttr = mpx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">    inputGeomHandle = inputElementHandle.child(inputGeomAttr)  <span class="comment"># this is different from how we usually get handler</span></span><br><span class="line">    inputGeomMesh = inputGeomHandle.asMesh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inputGeomMesh</span><br></pre></td></tr></table></figure><p>At this point, I can’t fully interpret the meaning of this segment.</p><h3 id="Step-4-Accessory-Node"><a href="#Step-4-Accessory-Node" class="headerlink" title="Step 4: Accessory Node"></a>Step 4: Accessory Node</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accessoryNodeSetup</span>(<span class="params">self, dagModifier</span>):</span></span><br><span class="line">    <span class="comment"># step1: create the accessory node using the supplied dagModifier</span></span><br><span class="line">    locator = dagModifier.createNode(<span class="string">&#x27;locator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: access accessory node&#x27;s attribute(can&#x27;t use mplug type, has to be mobject type)</span></span><br><span class="line">    <span class="comment"># access dependency node function set</span></span><br><span class="line">    dependNodeFn = om.MFnDependencyNode(locator)</span><br><span class="line">    matrixPlug = dependNodeFn.findPlug(<span class="string">&#x27;worldMatrix&#x27;</span>)  <span class="comment"># this returns mplug type attribute, we need mobject type attribute</span></span><br><span class="line">    matrixAttr = matrixPlug.attribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step3: connect mobject type(required) together</span></span><br><span class="line">    <span class="comment"># param: accessory node(mobject), accessory attr(mobject), deformer node(mobject: using self.thisMObject()), deformer attr(mobject)</span></span><br><span class="line">    mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.inMatAttr)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;now the accessory node&#x27;s worldMatrix is driving to the custom in-matrix of the deformer node&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> mConnectStatus</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accessoryAttribute</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># returns the deformer node attribute connected</span></span><br><span class="line">    <span class="keyword">return</span> MyDeformer.inMatAttr</span><br></pre></td></tr></table></figure><p>The dagModifer is supplied in the accessory node. We use dagModifier’s connect function to connect the accessory node’s attribute to our deformer node’s attribute. In this case, we have accessory’s attribute: worldMatrix (a built-in attribute obtained from <strong>MFnDependencyNode.findPlug())</strong> and our custom defined <strong>MyDeformer.inMatAttr.</strong></p><p>One thing to note is that, the <strong>.connect()</strong> only takes MObject which we cannot supply MPlug type object <strong>matrixPlug = …findPlug(‘attributeName’)</strong>, we perform additional step <strong>matrixAttr = matrixPlug.attribute()</strong> to get the MObject type attribute.</p><p>Now we supply <strong>.connect()</strong> with parameters: accessory node (MObject type), accessory node’s attribute (MObject type), deformer node (MObject type) and deformer node’s attribute (MObject type) as follow:<strong>mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.inMatAttr)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;General-Format&quot;&gt;&lt;a href=&quot;#General-Format&quot; class=&quot;headerlink&quot; title=&quot;General Format&quot;&gt;&lt;/a&gt;General Format&lt;/h1&gt;&lt;h3 id=&quot;Custom-deformer-S</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="maya" scheme="http://example.com/tags/maya/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Maya Python API (2. Custom Node)</title>
    <link href="http://example.com/2019/11/10/maya-api-2/"/>
    <id>http://example.com/2019/11/10/maya-api-2/</id>
    <published>2019-11-10T05:00:00.000Z</published>
    <updated>2021-01-11T02:21:03.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="General-Format"><a href="#General-Format" class="headerlink" title="General Format"></a>General Format</h1><h3 id="Custom-node-Sample"><a href="#Custom-node-Sample" class="headerlink" title="Custom node Sample"></a>Custom node Sample</h3><p>API 2.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maya_useNewAPI</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&#x27;myFirstNode&#x27;</span></span><br><span class="line">nodeID = om.MTypeId(<span class="number">0x55555</span>)</span><br><span class="line">nodeClassify = <span class="string">&#x27;utility/general&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxNode</span>):</span></span><br><span class="line">    inRadiusAttr = om.MObject()</span><br><span class="line">    inTranslateAttr = om.MObject()</span><br><span class="line">    outRotateAttr = om.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        om.MPxNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plug is MPlug type object, dataBlock is MDataBlock type object, refers to the entire datablock of the node</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">self, plug, dataBlock</span>):</span></span><br><span class="line">        <span class="keyword">if</span> plug == MyNode.outRotateAttr:</span><br><span class="line">            <span class="comment"># step one: get datablock handle (inputValue returns MDataHandle type object)</span></span><br><span class="line">            inRadiusHandle = dataBlock.inputValue(MyNode.inRadiusAttr)</span><br><span class="line">            inTranslateHandle = dataBlock.inputValue(MyNode.inTranslateAttr)</span><br><span class="line">            outRotateHandle = dataBlock.outputValue(MyNode.outRotateAttr)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># step two: extract input value from the handle</span></span><br><span class="line">            inRadius = inRadiusHandle.asFloat()</span><br><span class="line">            inTranslate = inTranslateHandle.asFloat()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># step three: create logic and set output value</span></span><br><span class="line">            outRotate = inTranslate/(<span class="number">6.18</span>*inRadius) * -<span class="number">360</span></span><br><span class="line">            outRotateHandle.setFloat(outRotate)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># step four: mark output plug as clean</span></span><br><span class="line">            outRotateHandle.setClean()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unknown plug, unknown error</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> om.kUnknownParameter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> MyNode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeInitializer</span>():</span></span><br><span class="line">    defaultRadius = <span class="number">2.0</span></span><br><span class="line">    defaultTranslate = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step one: create reference to attribute function set such as numericAttribute</span></span><br><span class="line">    numericAttrFn = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step two: create attribute using the function set</span></span><br><span class="line">    MyNode.inRadiusAttr = numericAttrFn.create(<span class="string">&#x27;radius&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, om.MFnNumericData.kFloat, defaultRadius)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span>  <span class="comment"># API1.0: numericAttrFn.setReadable(True)</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.storable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.hidden = <span class="literal">False</span></span><br><span class="line">    numericAttrFn.keyable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    MyNode.inTranslateAttr = numericAttrFn.create(<span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, om.MFnNumericData.kFloat, defaultTranslate)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.storable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.hidden = <span class="literal">False</span></span><br><span class="line">    numericAttrFn.keyable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    MyNode.outRotateAttr = numericAttrFn.create(<span class="string">&#x27;rotation&#x27;</span>, <span class="string">&#x27;rot&#x27;</span>, om.MFnNumericData.kFloat)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">False</span></span><br><span class="line">    numericAttrFn.storable = <span class="literal">False</span></span><br><span class="line">    numericAttrFn.hidden = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step three: attach attribute</span></span><br><span class="line">    MyNode.addAttribute(MyNode.inRadiusAttr)</span><br><span class="line">    MyNode.addAttribute(MyNode.inTranslateAttr)</span><br><span class="line">    MyNode.addAttribute(MyNode.outRotateAttr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step four: add circuit (relationship in-&gt;out)</span></span><br><span class="line">    MyNode.attributeAffects(MyNode.inRadiusAttr, MyNode.outRotateAttr)</span><br><span class="line">    MyNode.attributeAffects(MyNode.inTranslateAttr, MyNode.outRotateAttr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = om.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDependNode, nodeClassify)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&#x27;fail to register node: &#x27;</span> + nodeName)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uninitializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = om.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&#x27;fail to de-register node: &#x27;</span> + nodeName)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br/></br></p><h2 id="Data-block-MDataBlock"><a href="#Data-block-MDataBlock" class="headerlink" title="Data block (MDataBlock)"></a>Data block (MDataBlock)</h2><p>Data block refers the entire container of a node. This container stores all the values for each attribute of the node.</p><p>The datablock of this node is provided in the compute() function.</p><h2 id="Plug-MPlug"><a href="#Plug-MPlug" class="headerlink" title="Plug (MPlug)"></a>Plug (MPlug)</h2><p>Plug is the outer plug of the node which provides the connections to other node’s plug. The MPlug usually connects the plug from another node and the value of a certain attribute of this node.</p><p>The plug is also provided in the compute() function</p><h2 id="Data-handle-MDataHandle"><a href="#Data-handle-MDataHandle" class="headerlink" title="Data handle (MDataHandle)"></a>Data handle (MDataHandle)</h2><p>Data handle usually stores an attribute’s value. </p><p>We can set a value to an attribute using <strong>MDataHandle.setType(value)</strong>, and get an attribute’s value using <strong>value = MDataHandle.asType()</strong>.</p><p><br/></br></p><h1 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h1><h3 id="step-1-Declare-attribute-MObject-in-the-class"><a href="#step-1-Declare-attribute-MObject-in-the-class" class="headerlink" title="step 1: Declare attribute (MObject) in the class"></a>step 1: Declare attribute (MObject) in the class</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxNode</span>):</span></span><br><span class="line">    inAttr = om.MObject()</span><br><span class="line">    outAttr = om.MObject()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">om.MPxNode.__init__(self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">self, plug, dataBlock</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>inAttr</strong> refers to the input attribute that we are creating, <strong>outAttr</strong> refers to the output attribute that we are creating. Both are declared as MObject() type. We will later access them using <strong>MyNode.inAttr</strong> and <strong>MyNode.outAttr</strong>.</p><h3 id="step-2-Initialize-Node"><a href="#step-2-Initialize-Node" class="headerlink" title="step 2: Initialize Node"></a>step 2: Initialize Node</h3><p><strong>Node Creator</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> MyNode()</span><br></pre></td></tr></table></figure><p>Node Creator in API 2.0 directly returns an instance to the class, API 1.0 uses a pointer like in command plugin.</p><p><strong>Node Initializer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeInitializer</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;1: create reference to attribute function set such as numericAttribute&#x27;&#x27;&#x27;</span></span><br><span class="line">    numericAttrFn = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 2: create attribute using the function set&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyNode.inAttr = numericAttrFn.create(<span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, om.MFnNumericData.kFloat, <span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">True</span></span><br><span class="line">    MyNode.outAttr = numericAttrFn.create(<span class="string">&#x27;out&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, om.MFnNumericData.kFloat)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 3: attach attribute&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyNode.addAttribute(MyNode.inAttr)</span><br><span class="line">    MyNode.addAttribute(MyNode.outAttr)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 4: add circuit (relationship in-&gt;out)&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyNode.attributeAffects(MyNode.inAttr, MyNode.outAttr)</span><br></pre></td></tr></table></figure><ol><li><strong>MFnNumericAttribute</strong> provides the function sets to create attribute for numeric type attribute. There’s also <strong>MFnMatrixAttribute</strong> to create matrix type attribute and so on.</li><li>–Using the function set’s <strong>create()</strong> function, we add parameters for attribute’s <strong>long name, short name, data type, and default value (optional)</strong>.</li></ol><p>–This returns a <strong>MObject</strong> type attribute which is attached to the function set. We store it in the attribute declared earlier in the class.<br>–Set the attribute’s property using function set, such as <strong>readable, writable, hidden, storable, connectable</strong> (In API1.0, use like this <strong>numericAttrFn.setReadable(True)</strong>)<br>3. Using the <strong>MyNode.addAttribute(MyNode.inAttr)</strong> to attach attribute to the node<br>4. Using the <strong>MyNode.attributeAffects(MyNode.inAttr, MyNode.outAttr)</strong> to design the affect relationship between attributes, in this case, change of <strong>inAttr</strong> will affect <strong>outAttr</strong>.</p><p><strong>RegisterNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDependNode, nodeClassify)</span><br></pre></td></tr></table></figure><p><strong>Parameters:</strong> name of the node, id of the node, node creator function, node initializer function, node type (DependNode or DeformNode…), node classification (utility, shading…)</p><p><strong>Example:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;nodeID = om.MTypeId(0x55555)<br>&nbsp;&nbsp;&nbsp;&nbsp;nodeClassify = ‘utility/general’</p><p><strong>De-registerNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.deregisterNode(nodeID)</span><br></pre></td></tr></table></figure><h3 id="step-3-Initialize-Node"><a href="#step-3-Initialize-Node" class="headerlink" title="step 3: Initialize Node"></a>step 3: Initialize Node</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxNode</span>):</span></span><br><span class="line">    inAttr = om.MObject()</span><br><span class="line">    outAttr = om.MObject()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">om.MPxNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">self, plug, dataBlock</span>):</span></span><br><span class="line">        <span class="keyword">if</span> plug == MyNode.outAttr:</span><br><span class="line">            <span class="comment"># 1: get datablock handle (inputValue returns MDataHandle type object)</span></span><br><span class="line">            inHandle = dataBlock.inputValue(MyNode.inAttr)</span><br><span class="line">            outHandle = dataBlock.outputValue(MyNode.outAttr)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2: extract input value from the handle</span></span><br><span class="line">            inValue = inHandle.asFloat()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3: create logic and set output value</span></span><br><span class="line">            outValue = inValue * <span class="number">2</span></span><br><span class="line">            outHandle.setFloat(outValue)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4: mark output plug as clean</span></span><br><span class="line">            outHandle.setClean()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> om.kUnknownParameter</span><br></pre></td></tr></table></figure><p>When <strong>MyNode.outAttr</strong> is dirty (meaning it needs to recompute), we use <strong>if plug == MyNode.outAttr:</strong> to identify this certain plug. (this if statement will work, even if <strong>plug</strong> is MPlug type and <strong>MyNode.outAttr</strong> is MOjbect type)</p><p>We have already identify what input attribute is affecting this plug, in order to retrieve the value of this input, we need to attach a data handle on the data block specifying this certain input attribute we want to retrive.<br>Therefore we have <strong>handle = dataBlock.input/outputValue(MyNode.attr)</strong></p><p>Next, we use <strong>value = handle.asFloat()</strong> and <strong>handle.setFloat(value)</strong> to get and set the value from and to the attribute. (float type as example) </p><p>Last, we mark the current plug as clean, by <strong>setClean()</strong> to the outHandle</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;General-Format&quot;&gt;&lt;a href=&quot;#General-Format&quot; class=&quot;headerlink&quot; title=&quot;General Format&quot;&gt;&lt;/a&gt;General Format&lt;/h1&gt;&lt;h3 id=&quot;Custom-node-Sampl</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="maya" scheme="http://example.com/tags/maya/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Maya Python API (1. Command Plugin with Flags)</title>
    <link href="http://example.com/2019/11/09/maya-api-1/"/>
    <id>http://example.com/2019/11/09/maya-api-1/</id>
    <published>2019-11-09T05:00:00.000Z</published>
    <updated>2021-01-11T02:20:50.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maya-API-Intro"><a href="#Maya-API-Intro" class="headerlink" title="Maya API Intro"></a>Maya API Intro</h1><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Different from Maya Command, Maya API offers more low level access to Maya’s feature.<br>You can think of Maya in multiple layers:</p><ol><li>Bottom Layer: System OS</li><li>Maya Core: The entire Maya program written in C++</li><li>Maya API: Designated API exposed to developers, which can access Maya Core</li><li>Maya Command: Helper Functions calling multiple Maya API</li><li>Maya GUI: User graphics interface</li></ol><p>While Maya Command (MEL/Python) is most commonly used to write scripts, because it has fast prototyping and easy to learn. The downside is that it is often slow and can’t offer low level access to Maya Core. </p><p>Maya API on the other hand, is complicated, but offers faster speed and most flexibility. It comes with Python and C++. Python API has version 1.0 and 2.0.</p><p><a href="http://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__files_Maya_Python_API_Differences_between_the_C_Maya_API_and_Maya_Python_API_htm">difference between Python API vs C++ API</a></p><h3 id="API1-0-vs-2-0"><a href="#API1-0-vs-2-0" class="headerlink" title="API1.0 vs 2.0"></a>API1.0 vs 2.0</h3><p>API 1.0 (Before 2012) has acess to more features offered in C++<br>API 2.0 faster and more pythonic, but some class such as OpenMayaFX, OpenMayaDeformerNode is not supported.</p><h1 id="General-Format"><a href="#General-Format" class="headerlink" title="General Format"></a>General Format</h1><h3 id="Plug-in-Sample"><a href="#Plug-in-Sample" class="headerlink" title="Plug-in Sample"></a>Plug-in Sample</h3><p>API 1.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> mpx</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"></span><br><span class="line">pluginName = <span class="string">&#x27;pyTemplate&#x27;</span></span><br><span class="line">sampleShortFlagName = <span class="string">&#x27;-s&#x27;</span></span><br><span class="line">sampleLongFlagName = <span class="string">&#x27;-sample&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyTemplate</span>(<span class="params">mpx.MPxCommand</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        mpx.MPxCommand.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doIt</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;doIt&#x27;</span></span><br><span class="line">        self.parseArgument(args)</span><br><span class="line">        self.redoIt()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redoIt</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># this is optional</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;redoIt&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">undoIt</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># this is also optional</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;undoIt&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseArgument</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        argData = om.MArgParser(self.syntax(), args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> argData.isFlagSet(sampleShortFlag):</span><br><span class="line">            self.sample = argData.flagArgumentDouble(sampleShortFlag, <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span> self.sample</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUndoable</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># this is required when undo and redo is available</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmdCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> mpx.asMPxPtr(PyParticle())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syntaxCreator</span>():</span></span><br><span class="line"><span class="comment"># use this only when custom argument is defined</span></span><br><span class="line">    syntax = om.MSyntax()</span><br><span class="line">    syntax.addFlag(sampleShortName, sampleLongName, om.MSyntax.kDouble)</span><br><span class="line">    <span class="keyword">return</span> syntax</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = mpx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(pluginName, cmdCreator, syntaxCreator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&#x27;fail to register: &#x27;</span> + pluginName)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uninitializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = mpx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(pluginName)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&#x27;fail to de-register: &#x27;</span> + pluginName)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>API 2.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"></span><br><span class="line">pluginName = <span class="string">&#x27;pyTemplate&#x27;</span></span><br><span class="line">sampleShortFlagName = <span class="string">&#x27;-s&#x27;</span></span><br><span class="line">sampleLongFlagName = <span class="string">&#x27;-sample&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maya_useNewAPI</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyTemplate</span>(<span class="params">mpx.MPxCommand</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        mpx.MPxCommand.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doIt</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;doIt&#x27;</span></span><br><span class="line">        self.parseArgument(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseArgument</span>(<span class="params">self, args</span>):</span></span><br><span class="line">        argData = om.MArgParser(self.syntax(), args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> argData.isFlagSet(sampleShortFlag):</span><br><span class="line">            self.sample = argData.flagArgumentDouble(sampleShortFlag, <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span> self.sample</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmdCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> PyTemplate()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syntaxCreator</span>():</span></span><br><span class="line">    syntax = om.MSyntax()</span><br><span class="line">    syntax.addFlag(sampleShortName, sampleLongName, om.MSyntax.kDouble)</span><br><span class="line">    <span class="keyword">return</span> syntax</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = mpx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(pluginName, cmdCreator, syntaxCreator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&#x27;fail to register: &#x27;</span> + pluginName)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uninitializePlugin</span>(<span class="params">mobject</span>):</span></span><br><span class="line">    mplugin = mpx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(pluginName)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&#x27;fail to de-register: &#x27;</span> + pluginName)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><ol><li><strong>import module</strong> </li><li>0 has a seperate <strong>maya.OpenMayaMPx</strong> along with <strong>maya.OpenMaya</strong></li><li>0 has <strong>maya.api.OpenMaya</strong> including the original MPx command</li><li><strong>maya_useNewAPI</strong></li><li>0 use this function to declare using API 2.0</li><li><strong>cmd creator</strong></li><li>0 uses a MPx pointer object to point to instance of the class</li><li>0 director returns the instance of the class</li><li><strong>other syntax difference will be discussed later</strong></li></ol><p><br/></br></p><h1 id="Creating-Command-with-Argument-and-Flags"><a href="#Creating-Command-with-Argument-and-Flags" class="headerlink" title="Creating Command with Argument and Flags"></a>Creating Command with Argument and Flags</h1><p><br/></br></p><h2 id="Defination-”Flags”-vs-“Argument”"><a href="#Defination-”Flags”-vs-“Argument”" class="headerlink" title="Defination:”Flags” vs “Argument”"></a>Defination:”Flags” vs “Argument”</h2><p>Take this as an example: <strong>cmds.group(‘circle1’, ‘sphere1’, name=’group1’)</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>‘circle1’</strong> and <strong>‘sphere1’</strong> are arguments<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>name</strong> is the flag and <strong>‘group1’</strong> is the value</p><p>Another example: <strong>cmds.polyCube(sx=10, axis=[0, 0, 1])</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>no argument</strong> is specified<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>sx</strong> is the flag’s short name,  <strong>subdivisionX</strong> is the flag’s long name<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>[0, 0, 1]</strong> is axis flag’s value, each individual number is called parameters</p><p><br/></br></p><h2 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h2><h3 id="step-1-Declare-flag-name-outside-the-class"><a href="#step-1-Declare-flag-name-outside-the-class" class="headerlink" title="step 1: Declare flag name outside the class"></a>step 1: Declare flag name outside the class</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firstFlagShortName = <span class="string">&#x27;-f&#x27;</span></span><br><span class="line">firstFlagLongName = <span class="string">&#x27;-first&#x27;</span></span><br><span class="line">secondFlagShortName = <span class="string">&#x27;-s&#x27;</span></span><br><span class="line">secondFlagLongName = <span class="string">&#x27;-second&#x27;</span></span><br><span class="line"><span class="comment"># more flags ...</span></span><br></pre></td></tr></table></figure><h3 id="step-2-Add-flag-and-argument-in-syntax-creator-outside-of-class"><a href="#step-2-Add-flag-and-argument-in-syntax-creator-outside-of-class" class="headerlink" title="step 2:  Add flag and argument in syntax creator outside of class"></a>step 2:  Add flag and argument in syntax creator outside of class</h3><p>(this syntax creator will be further included in the plugin initialize function)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syntaxCreator</span>():</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;create a OpenMaya.MSyntax object to store flags and argument&#x27;&#x27;&#x27;</span></span><br><span class="line">    syntax = om.MSyntax()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;add flags with short name, long name, and value type&#x27;&#x27;&#x27;</span></span><br><span class="line">    syntax.addFlag(firstFlagShortName, firstFlagLongName, om.MSyntax.kDouble)</span><br><span class="line">    syntax.addFlag(secondFlagShortName, secondFlagLongName, (om.MSyntax.kDouble, om.MSyntax.kDouble, om.MSyntax.kDouble))</span><br><span class="line"><span class="comment"># add more flags ...</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;add argument using MSyntax.addArg() function&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;add argument is not discussed, refer to document later&#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> syntax</span><br></pre></td></tr></table></figure><h3 id="step-3-Parsing-Flags-called-inside-the-class’s-doIt-function"><a href="#step-3-Parsing-Flags-called-inside-the-class’s-doIt-function" class="headerlink" title="step 3:  Parsing Flags, called inside the class’s doIt function"></a>step 3:  Parsing Flags, called inside the class’s doIt function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parseArguments</span>(<span class="params">self, args</span>):</span></span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;instanitiate MArgParser ojbect, self.syntax() refers to the syntax created in step 2&#x27;&#x27;&#x27;</span></span><br><span class="line">      argData = om.MArgParser(self.syntax(), args)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;check if certain flags are set&#x27;&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> argData.isFlagSet(firstFlagShortName):</span><br><span class="line">          firstValue = argData.flagArgumentString(firstFlagShortName, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span> argData.isFlagSet(secondFlagShortName):</span><br><span class="line">          secondParam0 = argData.flagArgumentInt(secondFlagShortName, <span class="number">0</span>)</span><br><span class="line">          secondParam1 = argData.flagArgumentInt(secondFlagShortName, <span class="number">1</span>)</span><br><span class="line">          secondParam2 = argData.flagArgumentInt(secondFlagShortName, <span class="number">2</span>)</span><br><span class="line">      <span class="comment"># parse more flags ...</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maya-API-Intro&quot;&gt;&lt;a href=&quot;#Maya-API-Intro&quot; class=&quot;headerlink&quot; title=&quot;Maya API Intro&quot;&gt;&lt;/a&gt;Maya API Intro&lt;/h1&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="learning log" scheme="http://example.com/categories/learning-log/"/>
    
    
    <category term="maya" scheme="http://example.com/tags/maya/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Running Maya in Batch mode</title>
    <link href="http://example.com/2019/10/09/batch-mode/"/>
    <id>http://example.com/2019/10/09/batch-mode/</id>
    <published>2019-10-09T04:00:00.000Z</published>
    <updated>2021-01-11T02:25:53.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Import-Maya-Standalone-Module"><a href="#Import-Maya-Standalone-Module" class="headerlink" title="Import Maya Standalone Module"></a>Import Maya Standalone Module</h1><p>create a .py file called firstStandalone.py and enter:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.standalone</span><br><span class="line">maya.standalone.initialize(name=<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>sometimes, error will occur: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: No module named maya.standalone</span><br></pre></td></tr></table></figure><h3 id="TO-FIX-THIS"><a href="#TO-FIX-THIS" class="headerlink" title="TO FIX THIS:"></a>TO FIX THIS:</h3><p><strong>first step</strong>: check your python intepreter, it should match the maya python2 version.<br>I changed my project intepreter in my pycharm setting.</p><p><strong>second step</strong>: setup system path and environment</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#====================================================================#</span></span><br><span class="line"></span><br><span class="line">MAYA_LOCATION = <span class="string">&quot;C:/Program Files/Autodesk/Maya2018&quot;</span></span><br><span class="line">PYTHON_LOCATION = MAYA_LOCATION + <span class="string">&quot;/Python/Lib/site-packages&quot;</span></span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;MAYA_LOCATION&quot;</span>] = MAYA_LOCATION</span><br><span class="line">os.environ[<span class="string">&quot;PYTHONPATH&quot;</span>] = PYTHON_LOCATION</span><br><span class="line"></span><br><span class="line">sys.path.append(MAYA_LOCATION)</span><br><span class="line">sys.path.append(PYTHON_LOCATION)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/bin&quot;</span>)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/lib&quot;</span>)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/Python&quot;</span>)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/Python/DLLs&quot;</span>)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/Python/Lib&quot;</span>)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/Python/Lib/plat-win&quot;</span>)</span><br><span class="line">sys.path.append(MAYA_LOCATION+<span class="string">&quot;/Python/Lib/lib-tk&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>.join(sys.path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.standalone <span class="keyword">as</span> standalone</span><br><span class="line">standalone.initialize(name=<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>if error still occurs, please check your maya directory</p><h2 id="Add-functions"><a href="#Add-functions" class="headerlink" title="Add functions"></a>Add functions</h2><p>In my firstStandalone.py file, I added a test function following standalone.initialize</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">    <span class="comment"># full path to your Maya file to OPEN</span></span><br><span class="line">    maya_file_to_open = <span class="string">r&quot;C:\Users\Lei\Desktop\test.ma&quot;</span></span><br><span class="line">    <span class="comment"># Open your file</span></span><br><span class="line">    cmds.file(maya_file_to_open, o=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># full path to your Maya file to IMPORT</span></span><br><span class="line">    maya_file_to_import = <span class="string">r&quot;C:\Users\Lei\Desktop\import.ma&quot;</span></span><br><span class="line">    <span class="comment"># Import the file. the variable &quot;nodes&quot; will hold the names of all nodes imported, just in case.</span></span><br><span class="line">    cmds.file(maya_file_to_import, i=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="string">&quot;mayaAscii&quot;</span>)</span><br><span class="line">    render = <span class="string">r&quot;C:\Users\Lei\Desktop\te.ma&quot;</span></span><br><span class="line">    cmds.file(rename=render)</span><br><span class="line">    cmds.file(force=<span class="literal">True</span>, save=<span class="literal">True</span>, options=<span class="string">&#x27;v=1;p=17&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;mayaBinary&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>This test function opens a maya file on my desktop and import a maya file and save out as another file.</p><h2 id="Execute-our-fisrtStandalone-py"><a href="#Execute-our-fisrtStandalone-py" class="headerlink" title="Execute our fisrtStandalone.py"></a>Execute our fisrtStandalone.py</h2><h3 id="method-1-execute-from-our-command-line"><a href="#method-1-execute-from-our-command-line" class="headerlink" title="method 1: execute from our command line"></a>method 1: execute from our command line</h3><p>to do so, make sure to add mayapy to your system environment variable.</p><p>in system variable: add C:\Program Files\Autodesk\Maya2018\bin to Path</p><p>run cmds, and enter mayapy [drag your firstStandalone.py here, our enter the full path]</p><p>it should be running correctly.</p><h3 id="method-2-execute-using-python-subprocess"><a href="#method-2-execute-using-python-subprocess" class="headerlink" title="method 2: execute using python subprocess"></a>method 2: execute using python subprocess</h3><p>to execute your .py, you can do it without going to command line, but by executing from another .py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">command = <span class="string">&#x27;mayapy your/directory/firstStandalone.py&#x27;</span></span><br><span class="line">process = subprocess.Popen(command, shell=<span class="literal">True</span>, stdout=subprocess.PIPE)</span><br><span class="line">process.wait()</span><br><span class="line">print(process.returncode)  <span class="comment"># this return the message from cmd</span></span><br></pre></td></tr></table></figure><h2 id="Source"><a href="#Source" class="headerlink" title="Source:"></a>Source:</h2><p><a href="http://discourse.techart.online/t/import-maya-standalone-problem/1437">http://discourse.techart.online/t/import-maya-standalone-problem/1437</a><br><a href="https://stackoverflow.com/questions/27437733/use-external-python-script-to-open-maya-and-run-another-script-inside-maya">https://stackoverflow.com/questions/27437733/use-external-python-script-to-open-maya-and-run-another-script-inside-maya</a><br><a href="https://stackoverflow.com/questions/17500157/how-to-use-an-external-interpreter-for-maya">https://stackoverflow.com/questions/17500157/how-to-use-an-external-interpreter-for-maya</a><br><a href="https://www.toadstorm.com/blog/?p=136">https://www.toadstorm.com/blog/?p=136</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Import-Maya-Standalone-Module&quot;&gt;&lt;a href=&quot;#Import-Maya-Standalone-Module&quot; class=&quot;headerlink&quot; title=&quot;Import Maya Standalone Module&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="tech summary" scheme="http://example.com/categories/tech-summary/"/>
    
    
    <category term="maya" scheme="http://example.com/tags/maya/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
</feed>
