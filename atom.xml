<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech Art Learning</title>
  
  
  <link href="https://www.xingyulei.com/atom.xml" rel="self"/>
  
  <link href="https://www.xingyulei.com/"/>
  <updated>2022-01-10T00:42:20.550Z</updated>
  <id>https://www.xingyulei.com/</id>
  
  <author>
    <name>Xingyu Lei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Communicate with Maya (2. Streaming Output)</title>
    <link href="https://www.xingyulei.com/post/maya-streaming/"/>
    <id>https://www.xingyulei.com/post/maya-streaming/</id>
    <published>2022-01-09T05:00:00.000Z</published>
    <updated>2022-01-10T00:42:20.550Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maya-connector"><a class="markdownIt-Anchor" href="#maya-connector"></a> Maya Connector</h3><p>I’ve combined the two parts together and created the end result: <a href="https://github.com/leixingyu/maya-connector">Maya Connector</a> tool.</p><p>The tool will utilize command port to send open streaming command,<br />which establishes the connection and enables the callback.<br />The output is being sent back to the tool and the output is updated in the GUI.</p><p><img src="https://i.imgur.com/89SJibG.gif" alt="maya-connector" /></p><h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><blockquote><p>Make sure to see <a href="https://www.xingyulei.com/post/maya-commandport/">Part 1</a> for more context in socket programming and maya command port</p></blockquote><p>Like mentioned in the previous blog, this chapter is independent for enabling<br />output streaming, but would work even better with command port to send command and get active<br />response from Maya.</p><p>This kind of log streaming feature can be helpful not only for monitoring<br />but for catching errors like when Maya crashes, or to connect with an IDE similar to<br />PyCharm’s plugin <a href="https://github.com/cmcpasserby/MayaCharm">MayaCharm</a> and Sublime’s plugin<br /><a href="https://github.com/justinfx/MayaSublime/">MayaSublime</a></p><h3 id="listening-server-separation"><a class="markdownIt-Anchor" href="#listening-server-separation"></a> Listening Server Separation</h3><p>I’ve been looking at Maya’s command port to see if the return message would be<br />sufficient for debugging log, as command port already is a server.</p><p>But it turns out that this approach is not recommended by many, as there’s little<br />control on the return message as the TCP communication returns one message per<br />command, more explained in the previous blog.</p><p>The correct way suggested, and widely used is to stream Maya script output back<br />to the external application.</p><p><img src="https://i.imgur.com/SaDOkMS.png" alt="connection graph" /></p><p>As shown in the graph, two separate communications are established instead of utilizing<br />just the command port.</p><ol><li>external application (client) send command to Maya’s command port (server) where Maya<br />would process normally. This is achieved through TCP to ensure no loss in sending command.</li><li>Maya’s <code>MCommandMessage</code> callback triggers (client) send the latest output result to external application’s listening<br />port (server). This is achieved through UDP to keep the connection fast and easy, but may<br />result in lost in feedbacks (which isn’t that important)</li></ol><h3 id="procedures"><a class="markdownIt-Anchor" href="#procedures"></a> Procedures</h3><p>to establish listening server, need to use a different port number than the command port number<br />if we are also connecting to it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SERVER = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="number">5051</span></span><br><span class="line">ADDR = (SERVER, PORT)</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">server.bind(ADDR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    message = data[<span class="number">0</span>]</span><br><span class="line">    address = data[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    print(message)</span><br></pre></td></tr></table></figure><p>On the maya client side, there are two parts:</p><ol><li>setup <code>MCommendMessage</code> callback</li><li>stream the data to the listening server</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"></span><br><span class="line">SERVER = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="number">5051</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;STREAM_CALLBACK&#x27;</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        om.MMessage.removeCallback(STREAM_CALLBACK)</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">STREAM_CALLBACK = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openStream</span>(<span class="params">addr=(<span class="params">SERVER, PORT</span>)</span>):</span></span><br><span class="line">    <span class="keyword">global</span> STREAM_CALLBACK</span><br><span class="line">    print(<span class="string">&quot;Enable Streaming ScriptEditor at (&#123;&#125;:&#123;&#125;)\n&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>], addr[<span class="number">1</span>]))</span><br><span class="line">    STREAM_CALLBACK = om.MCommandMessage.addCommandOutputCallback(streamToConsole, addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closeStream</span>():</span></span><br><span class="line">    <span class="keyword">global</span> STREAM_CALLBACK</span><br><span class="line">    print(<span class="string">&quot;Disable Streaming ScriptEditor\n&quot;</span>)</span><br><span class="line">    om.MMessage.removeCallback(STREAM_CALLBACK)</span><br><span class="line">    STREAM_CALLBACK = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>borrowed some code from <a href="">MayaSublime</a> for stringIO</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">streamToConsole</span>(<span class="params">msg, mtype, addr</span>):</span></span><br><span class="line">    buf = StringIO()</span><br><span class="line">    buf.seek(<span class="number">0</span>)</span><br><span class="line">    buf.truncate()</span><br><span class="line">    buf.write(msg)</span><br><span class="line">    buf.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># start with trying to send 8kb packets</span></span><br><span class="line">    bufsize = <span class="number">8</span>*<span class="number">1024</span></span><br><span class="line">    <span class="comment"># loop until the buffer is empty</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> bufsize &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># save our position in case we error and need to roll back</span></span><br><span class="line">            pos = buf.tell()</span><br><span class="line"></span><br><span class="line">            part = buf.read(bufsize)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> part:</span><br><span class="line">                <span class="comment"># buffer is empty. Nothing else to send</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                client.sendto(part, addr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> e.errno == errno.EMSGSIZE:</span><br><span class="line">                    <span class="comment"># we have hit a message size limit. </span></span><br><span class="line">                    <span class="comment"># scale down and try the packet again</span></span><br><span class="line">                    bufsize /= <span class="number">2</span></span><br><span class="line">                    buf.seek(pos)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># some other error</span></span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="comment"># message sent without error</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="message-type"><a class="markdownIt-Anchor" href="#message-type"></a> Message Type</h4><p>Command message type support:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> mtype == om.MCommandMessage.kWarning:</span><br><span class="line">    buf.write(<span class="string">&#x27;# Warning: &#x27;</span>)</span><br><span class="line">    buf.write(msg)</span><br><span class="line">    buf.write(<span class="string">&#x27; #\n&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> mtype == om.MCommandMessage.kError:</span><br><span class="line">    buf.write(<span class="string">&#x27;// Error: &#x27;</span>)</span><br><span class="line">    buf.write(msg)</span><br><span class="line">    buf.write(<span class="string">&#x27; //\n&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> mtype == om.MCommandMessage.kResult:</span><br><span class="line">    buf.write(<span class="string">&#x27;# Result: &#x27;</span>)</span><br><span class="line">    buf.write(msg)</span><br><span class="line">    buf.write(<span class="string">&#x27; #\n&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    buf.write(msg)</span><br></pre></td></tr></table></figure><h4 id="logging-gui"><a class="markdownIt-Anchor" href="#logging-gui"></a> Logging GUI</h4><p>Like a logger, instead of sending output string to standard output, I created<br />a <code>QPlainTextEdit</code> and use <code>insertPlainText(string)</code> to display it.<br />We opened a thread to receive data, so that we still have control over the main tool, and<br />can send command to maya if wanted.</p><p><strong>Note</strong>: we shouldn’t update the GUI in the listening thread, instead we emit<br />a custom signal and pass the return message as argument,<br />we then create a custom slot to handle GUI update.</p><p>so instead of doing:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    message = data[<span class="number">0</span>]</span><br><span class="line">    self.ui_text_edit.insertPlainText(message)</span><br></pre></td></tr></table></figure><p>we should be doing:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    message = data[<span class="number">0</span>]</span><br><span class="line">    self.message_received.emit(message)</span><br></pre></td></tr></table></figure><h4 id="clean-up"><a class="markdownIt-Anchor" href="#clean-up"></a> Clean up</h4><p>During application close, we need to do the following clean up:</p><ol><li>send command to Maya to remove the callback</li><li>close the tool’s UDP listening server</li><li>end the thread to the listening server</li></ol><h3 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2016/ENU/?guid=__py_ref_class_open_maya_1_1_m_command_message_html">Maya Help - OpenMaya.MCommandMessage Class Reference</a></p><p><a href="https://groups.google.com/g/python_inside_maya/c/pp_E7rCs7d0">Google Groups - Extracting data from Output Window</a></p><p><a href="https://github.com/cmcpasserby/MayaCharm">Github - MayaCharm</a></p><p><a href="https://github.com/justinfx/MayaSublime/">Github - MayaSublime</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;maya-connector&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#maya-connector&quot;&gt;&lt;/a&gt; Maya Connector&lt;/h3&gt;
&lt;p&gt;I’ve combined the two parts together</summary>
      
    
    
    
    <category term="maya communication" scheme="https://www.xingyulei.com/categories/maya-communication/"/>
    
    
    <category term="maya" scheme="https://www.xingyulei.com/tags/maya/"/>
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="socket" scheme="https://www.xingyulei.com/tags/socket/"/>
    
    <category term="threading" scheme="https://www.xingyulei.com/tags/threading/"/>
    
  </entry>
  
  <entry>
    <title>Communicate with Maya (1. Command Port)</title>
    <link href="https://www.xingyulei.com/post/maya-commandport/"/>
    <id>https://www.xingyulei.com/post/maya-commandport/</id>
    <published>2021-12-17T05:00:00.000Z</published>
    <updated>2022-01-24T03:58:21.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maya-connector"><a class="markdownIt-Anchor" href="#maya-connector"></a> Maya Connector</h3><p>The end result of this two-part blog is the <a href="https://github.com/leixingyu/maya-connector">Maya Connector</a> tool.</p><p>This external standalone tool is able to send command to maya and receive<br />real-time feedback from maya’s script editor output.</p><p><img src="https://i.imgur.com/89SJibG.gif" alt="maya-connector" /></p><h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><blockquote><p>If you are already familiar with maya command port and socket programming, skip to<br /><a href="https://www.xingyulei.com/post/maya-streaming/">Part 2</a> for Maya output streaming.</p></blockquote><p>Although there are a lot of tools that can run internally in Maya which facilitate<br />the pipeline. The capability of communicating (monitor and control) with Maya externally is very handy.</p><p>Why? we sometime don’t need to interact with Maya GUI directly or have way too<br />many maya instances to manage. examples are:</p><ul><li>sending cross-application remote command to active maya sessions or syncing between different maya sessions</li><li>batch processing on either maya standalone sessions or active maya sessions</li></ul><p>This requires two components which I will be covering:</p><ol><li>command port: sending commands to maya to execute</li><li>output streaming: actively listening/receiving maya outputs (next blog)</li></ol><p>These two parts can work independently, but are powerful as a whole. Also, references<br />in creating <a href="https://www.xingyulei.com/post/maya-batch-mode/">maya standalone sessions</a></p><h3 id="using-cmdscommandport"><a class="markdownIt-Anchor" href="#using-cmdscommandport"></a> Using <code>cmds.commandPort()</code></h3><blockquote><p><a href="https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Tech-Docs/CommandsPython/">cmds.commandPort()</a>:<br />The command port comprises a socket to which a client program may connect</p></blockquote><p>Traditional socket connection provides the basic communication between<br />client and server.<br />But Maya’s built-in command port provides us a very convenient way of sending command for maya<br />to execute.</p><h3 id="procedures"><a class="markdownIt-Anchor" href="#procedures"></a> Procedures</h3><ol><li>Open command port</li></ol><p>The port needs to be opened on Maya’s (server) end first in order for client<br />to send command; ideally this would be achieved by adding a <code>cmds.commandPort()</code> open<br />during Maya startup.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">port = <span class="number">5050</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cmds.commandPort(<span class="string">&quot;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(port), query=<span class="literal">True</span>):</span><br><span class="line">    cmds.commandPort(name=<span class="string">&quot;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(port))</span><br></pre></td></tr></table></figure><ol start="2"><li>Send command through an external application</li></ol><p>the command sent can be either <code>MEL</code> or <code>Python</code> command which must be specified during<br />the opening the port determined by <code>sourceType</code> flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the local host</span></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span> </span><br><span class="line">PORT = <span class="number">5050</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendCommand</span>():</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    client.connect(ADDR)</span><br><span class="line">    command = <span class="string">&#x27;polyCube()&#x27;</span></span><br><span class="line">    client.send(command)</span><br><span class="line">    client.close()</span><br></pre></td></tr></table></figure><h4 id="tcp-return-message"><a class="markdownIt-Anchor" href="#tcp-return-message"></a> TCP Return Message</h4><p>We are using <strong>TCP</strong> for our communication protocol to guarantee command being sent<br />when the connection is established successfully.</p><blockquote><p><strong>Important:</strong><br />At this point, we are not attempting to use <code>client.recv(xxx)</code> for data returning<br />from Maya, unless it’s a super simple single statement.</p></blockquote><p>Trying to use <code>client.recv(xxx)</code> will result in either <code>None</code> data returned or single<br />return as it is the behaviour of <strong>TCP</strong>. <a href="https://stackoverflow.com/questions/10434525/c-socket-programming-only-receiving-one-line-at-a-time">See here</a></p><p>Also sending command line by line is not reliable as there are no context between<br />lines for Maya server to understand. <a href="https://forums.cgsociety.org/t/telnet-or-socket-no-result-back-from-maya/1730817/2">Unless it’s super simple series of commands</a></p><p>In order to receive output, we need a custom listening server to do that which is explained in <a href="https://www.xingyulei.com/post/maya-streaming">Part 2</a>.</p><h4 id="sourcetype"><a class="markdownIt-Anchor" href="#sourcetype"></a> SourceType</h4><p>We are opening a default command port which takes <code>MEL</code> input,<br />we don’t need to specify <code>Python</code> as source type, as we can just use <code>python(&quot;[insert command here]&quot;)</code><br />to wrap it into <code>MEL</code>, this can be blocks of independent codes or importing<br />and executing python files.</p><h4 id="mixed-quotation-symbol"><a class="markdownIt-Anchor" href="#mixed-quotation-symbol"></a> Mixed Quotation symbol</h4><p>Note that when doing a source type conversion with a string type command<br />, quotation symbol may cause conflicts.</p><p>the solution is to replace it with backslash before quotation symbol.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command = <span class="string">&#x27;python(&quot;&#x27;</span> + command.replace(<span class="string">r&#x27;&quot;&#x27;</span>, <span class="string">r&#x27;\&quot;&#x27;</span>) + <span class="string">&#x27;&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="socket-programming-introduction"><a class="markdownIt-Anchor" href="#socket-programming-introduction"></a> Socket Programming Introduction</h3><p>It is also very helpful to know the basics of socket programming in Python<br />to better understand how server and client communicates, and the difference<br />between TCP and UDP, which will be used in the next part.</p><p>This <a href="https://youtu.be/3QiPPX-KeSc">tutorial</a> is very handy, and the following<br />are a basic template for setting up client and server using <code>socket</code> and <code>thread</code></p><script src="https://gist.github.com/leixingyu/f4b4d6ca7b84cf01af5311857219295e.js"></script><script src="https://gist.github.com/leixingyu/5e55f23113c0280ab5ab16595bda900d.js"></script><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://groups.google.com/g/python_inside_maya/c/7AgWlldtvbE/m/zUTQlAcjBgAJ?pli=1">Google Group - Receiving data from commandPort</a></p><p><a href="https://stackoverflow.com/questions/10434525">Stack Overflow - c socket programming, only receiving one line at a time</a></p><p><a href="https://forums.cgsociety.org/t/telnet-or-socket-no-result-back-from-maya/1730817/2">CG Talk - Telnet or Socket: no result back from Maya</a></p><p><a href="https://youtu.be/3QiPPX-KeSc">Youtube - Python Socket Programming Tutorial</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;maya-connector&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#maya-connector&quot;&gt;&lt;/a&gt; Maya Connector&lt;/h3&gt;
&lt;p&gt;The end result of this two-part blog</summary>
      
    
    
    
    <category term="maya communication" scheme="https://www.xingyulei.com/categories/maya-communication/"/>
    
    
    <category term="maya" scheme="https://www.xingyulei.com/tags/maya/"/>
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="socket" scheme="https://www.xingyulei.com/tags/socket/"/>
    
    <category term="command port" scheme="https://www.xingyulei.com/tags/command-port/"/>
    
  </entry>
  
  <entry>
    <title>QEnum vs. QFlags</title>
    <link href="https://www.xingyulei.com/post/qt-enum-flag/"/>
    <id>https://www.xingyulei.com/post/qt-enum-flag/</id>
    <published>2021-12-06T05:00:00.000Z</published>
    <updated>2021-12-18T20:52:08.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>I often take Qt <a href="https://doc.qt.io/qt-5/qt.html">namespace</a> for granted, it became<br />a natural habit of setting a Qt parameter using Qt namespace, for instance:<br />setting alignment for a <code>QStandardItem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item = QtGui.QStandardItem(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">item.setTextAlignment(QtCore.Qt.AlignRight)</span><br><span class="line"><span class="built_in">type</span>(QtCore.Qt.AlignRight)</span><br></pre></td></tr></table></figure><p>Here, the <code>Qt.AlignRight</code> is an <code>AlignmentFlag</code> Enum type object which has a<br />value of <code>0x0002</code> or <code>2</code>, which creates the behavior of aligning with the right edge.</p><p>Now, let’s try parsing the alignment of the <code>QStandardItem</code> again, using:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">align = item.textAlignment()</span><br><span class="line"><span class="built_in">type</span>(align)</span><br></pre></td></tr></table></figure><p>this returns a <code>PyQt5.QtCore.Alignment</code> object, which we don’t really<br />know the value of. And also note that it is not a <code>AlignmentFlag</code> object like<br />previously.</p><p>So, What’s the difference between these two, and how should I retrieve the namespace<br />value?</p><h3 id="qenum-and-qflags"><a class="markdownIt-Anchor" href="#qenum-and-qflags"></a> QEnum and QFlags</h3><p>QFlags is used to store combinations of Enum, which provides type checking safety.<br />thus, <code>Alignment</code> QFlags type is simply a typedef for <code>AlignmentFlag</code> QEnum.</p><ul><li><code>Qt.AlignmentFlag</code> is QEnum type; <code>AlignmentFlag</code> being the enum name</li><li><code>Qt.Alignment</code> is QFlags type; <code>Alignment</code> being the type name</li><li>there’s also non-flag enums, which have the same type and enum name</li></ul><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p>Declaration of both object types</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;class &#x27;PyQt5.QtCore.AlignmentFlag&#x27;&gt;</span></span><br><span class="line">align_flag = QtCore.Qt.AlignRight</span><br><span class="line">align_flag_value = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;</span></span><br><span class="line">align = QtCore.Qt.Alignment(align_flag)</span><br><span class="line"><span class="comment"># or &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">align = QtCore.Qt.Alignment(align_flag_value)</span><br></pre></td></tr></table></figure><p>As you can see, <code>setAlignment()</code> takes a <code>Qt.Alignment parameter</code>, which means that any<br />combination of <code>Qt.AlignmentFlag</code> values, or <code>int</code>, is legal.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item = QtGui.QStandardItem(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alignment type is compatible with either int or AlignmentFlag(Enum)</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;PyQt5.QtCore.AlignmentFlag&#x27;&gt;</span></span><br><span class="line">item.setTextAlignment(QtCore.Qt.AlignRight)</span><br><span class="line"><span class="comment"># or &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;</span></span><br><span class="line">item.setTextAlignment(align)</span><br><span class="line"><span class="comment"># or &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">item.setTextAlignment(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>The return value is QFlags type, but it can be cast to an integer type to<br />reveal its Enum value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;class &#x27;PyQt5.QtCore.Alignment&#x27;&gt;</span></span><br><span class="line">align = pathItem.textAlignment()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to get the Alignment value, convert the QFlags to int</span></span><br><span class="line"><span class="built_in">int</span>(align)</span><br></pre></td></tr></table></figure><h3 id="parse-namespace-and-value-mapping"><a class="markdownIt-Anchor" href="#parse-namespace-and-value-mapping"></a> Parse Namespace and Value Mapping</h3><p>Still not sure what the Enum value means?</p><p>you can either check the docs, or<br />use this to print out a mapping of the namespace and its corresponding value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enum_mapping</span>(<span class="params">cls, enum</span>):</span></span><br><span class="line">    mapping = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">dir</span>(cls):</span><br><span class="line">        value = <span class="built_in">getattr</span>(cls, key)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, enum):</span><br><span class="line">            mapping[key] = value</span><br><span class="line">    <span class="keyword">return</span> mapping</span><br><span class="line"></span><br><span class="line">enum = enum_mapping(QtCore.Qt, QtCore.Qt.AlignmentFlag)</span><br><span class="line"><span class="comment"># enum = enum_mapping(QtWidgets, QtWidgets.QStyle)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">sorted</span>(enum.items(), key=<span class="built_in">str</span>):</span><br><span class="line">    print(<span class="string">&#x27;%s: %s&#x27;</span> % item)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://github.com/qutebrowser/qutebrowser/blob/v1.0.3/qutebrowser/utils/debug.py#L95-L131">GitHub - qutebrowser</a></p><p><a href="https://het.as.utexas.edu/HET/Software/html/qflags.html">Qt Doc - QFlags Class Reference</a></p><p><a href="https://doc.qt.io/qtforpython-5/PySide2/QtCore/QEnum.html">Qt Doc - QEnum/QFlag</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;I often take Qt &lt;a href=&quot;https://doc.qt.io</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Find PID and End Process in Python (Windows)</title>
    <link href="https://www.xingyulei.com/post/py-end-process/"/>
    <id>https://www.xingyulei.com/post/py-end-process/</id>
    <published>2021-10-25T04:00:00.000Z</published>
    <updated>2022-01-24T03:58:57.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>Interacting with Windows shell to end process is very common,<br />there are many ways to do so, like through the traditional batch script</p><p>but to gain more flexibility, using python is probably a better idea.</p><ul><li><code>os.system</code> is not the most elegant way to use, and it is meant to be replaced by <code>subprocess</code></li><li><code>subprocess</code> comes with Python standard library and allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes</li><li><code>psutil</code> (python system and process utilities) is a <strong>cross-platform</strong> library for retrieving information on running processes and system utilization.<br />However, it is a third-party library</li></ul><hr /><h3 id="bare-minimum"><a class="markdownIt-Anchor" href="#bare-minimum"></a> Bare Minimum</h3><p>the bare minimum command to kill process utilizes window’s <code>taskkill</code>;<br />which doesn’t matter if you use <code>os.system</code> or <code>subprocess</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PROCESS = <span class="string">&#x27;notepad.exe&#x27;</span></span><br><span class="line">STATUS = <span class="string">&#x27;running&#x27;</span>  <span class="comment"># running or not responding</span></span><br><span class="line">CMD = <span class="string">r&#x27;taskkill /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; &#x27;</span>.<span class="built_in">format</span>(PROCESS, STATUS)</span><br><span class="line"></span><br><span class="line">os.system(CMD)</span><br></pre></td></tr></table></figure><h3 id="using-ossystem"><a class="markdownIt-Anchor" href="#using-ossystem"></a> Using <code>os.system</code></h3><p>Now consider a more flexible case where you want to gather information about the processes like its PID,<br />and then proceed on ending the process. One of the downside of window shell command is that the output<br />can’t be passed on to other command, the output is just text. Therefore, we<br />output the text to a csv file which we will later process.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">PROCESS = <span class="string">&#x27;notepad.exe&#x27;</span></span><br><span class="line">STATUS = <span class="string">&#x27;running&#x27;</span>  <span class="comment"># running or not responding</span></span><br><span class="line">TMP = <span class="string">r&#x27;&#123;&#125;/Desktop/tmp.txt&#x27;</span>.<span class="built_in">format</span>(os.environ[<span class="string">&#x27;userprofile&#x27;</span>])</span><br><span class="line">CMD = <span class="string">r&#x27;tasklist /fi &quot;IMAGENAME eq &#123;&#125;&quot; /fi &quot;STATUS eq &#123;&#125;&quot; /fo &quot;csv&quot; &gt; &quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(PROCESS, STATUS, TMP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output as csv format</span></span><br><span class="line">os.system(CMD)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(TMP, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> temp:</span><br><span class="line">reader = csv.reader(temp)</span><br><span class="line">header = <span class="built_in">next</span>(reader)</span><br><span class="line">pids = [<span class="built_in">int</span>(row[<span class="number">1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill process</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> pids:</span><br><span class="line">os.kill(pid, signal.SIGTERM) <span class="comment"># or signal.SIGKILL </span></span><br><span class="line">print(<span class="string">&#x27;killed process with pid: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pid))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(TMP):</span><br><span class="line">  os.remove(TMP)</span><br></pre></td></tr></table></figure><h3 id="using-subprocess"><a class="markdownIt-Anchor" href="#using-subprocess"></a> Using <code>subprocess</code></h3><p>With <code>subprocess</code>, we no longer need to create a temp file to store the output.</p><script src="https://gist.github.com/leixingyu/293918b0f2bda5112c696f3cccecceec.js"></script><h3 id="using-psutil"><a class="markdownIt-Anchor" href="#using-psutil"></a> Using <code>psutil</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">PROGRAM = <span class="string">r&#x27;maya.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findProcess</span>(<span class="params">name</span>):</span>    </span><br><span class="line">    procs = <span class="built_in">list</span>()</span><br><span class="line">    <span class="comment">#Iterate over the all the running process</span></span><br><span class="line">    <span class="keyword">for</span> proc <span class="keyword">in</span> psutil.process_iter():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> proc.name() == name <span class="keyword">and</span> proc.status() == psutil.STATUS_RUNNING:</span><br><span class="line">            pid = proc.pid            </span><br><span class="line">                procs.append(pid)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span>      </span><br><span class="line">    <span class="keyword">return</span> procs</span><br><span class="line"></span><br><span class="line">processes = findProcess(PROGRAM)</span><br></pre></td></tr></table></figure><p>we can find process start time by using</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">startTime = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(proc.create_time()))</span><br></pre></td></tr></table></figure><p>to kill process, either <code>kill()</code> or <code>terminate()</code> will work<br />respectfully, <code>SIGKILL</code> or <code>SIGTERM</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = psutil.Process(PID)</span><br><span class="line">p.terminate()</span><br><span class="line">p.kill()</span><br><span class="line">p.wait</span><br></pre></td></tr></table></figure><h3 id="bonus-find-open-port-for-socket-connection"><a class="markdownIt-Anchor" href="#bonus-find-open-port-for-socket-connection"></a> Bonus: Find Open Port (for socket connection)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process = psutil.Process(pid=PID)</span><br><span class="line"></span><br><span class="line">connections = process.connections(kind=<span class="string">&#x27;tcp4&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> connections <span class="keyword">if</span> x.status == psutil.CONN_LISTEN]:</span><br><span class="line">    <span class="comment"># gets the port number</span></span><br><span class="line">    print(<span class="string">&#x27;port opened: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c.laddr[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="bonus-finding-main-window-title"><a class="markdownIt-Anchor" href="#bonus-finding-main-window-title"></a> Bonus: Finding Main Window Title</h3><p><code>ctypes</code> is a foreign function library for python, resulting a not-pythonic function</p><script src="https://gist.github.com/leixingyu/7d85c0c1439b0cf9b423ba5c0d5ef184.js"></script><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tasklist">Microsoft Doc - tasklist</a></p><p><a href="https://thispointer.com/python-check-if-a-process-is-running-by-name-and-find-its-process-id-pid/">ThisPointer - Python : Check if a process is running by name and find it’s Process ID (PID)</a></p><p><a href="https://sjohannes.wordpress.com/2012/03/23/win32-python-getting-all-window-titles/">Johannes Sasongko - Win32 Python: Getting all window titles</a></p><p><a href="https://stackoverflow.com/questions/10266281">Stack Overflow - Obtain Active window using Python</a></p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/">Microsoft Docs - winuser.h header</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;Interacting with Windows shell to end proc</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>State Machine in Unity Scripting API</title>
    <link href="https://www.xingyulei.com/post/unity-api-statemachine/"/>
    <id>https://www.xingyulei.com/post/unity-api-statemachine/</id>
    <published>2021-08-29T04:00:00.000Z</published>
    <updated>2021-12-18T20:55:45.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>This post is not about state machine basic, rather how we would setup/access state machine parameters.<br />There is a higher level <code>Animator</code> class to access a part of the animator features, but we need to use<br />Unity’s <code>Animations</code> package in order to dive deeper.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor.Animations;</span><br></pre></td></tr></table></figure><p>There’s a lot of parts composing Unity’s Animator: Layer, Parameter, State machine (and everything inside it<br />including states of different kind, transition between states), there are of course multiple parameters inside a single state.</p><p>The examples in this post is only about accessing states and state machines, as the rest is translatable.</p><p>We start from the root: Base layer, if you think about it, a layer is essentially a state machine.<br />Inside this root state machine are sets of states (including blend tree/state/sub-state machine)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getting the base layer state machine</span></span><br><span class="line">AnimatorStateMachine rootStateMachine = controller.layers[<span class="number">0</span>].stateMachine;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HuSyYGs.png" alt="base layer state machine" /></p><p>(Base Layer)</p><p>Next up, a very confusing part of the scripting process are the definition of<br /><code>AnimatorStateMachine</code> vs. <code>ChildAnimatorStateMachine</code> and <code>AnimatorState</code> vs. <code>ChildAnimatorState</code>.<br />I really wish Unity provides internal ways to cast these to each other.</p><p>To summarize:</p><ul><li><p><code>ChildAnimatorStateMachine[]</code> and <code>ChildAnimatorState[]</code> is used in conjunction with Arrays as <code>AnimatorStateMachine.states</code> and<br /><code>AnimatorStateMachine.stateMachines</code> will return the previous mentioned type.</p></li><li><p>Instead of casting, they have an internal property <code>ChildAnimatorStateMachine.stateMachine</code> and <code>ChildAnimatorState.state</code> which<br />respectively returns <code>AnimatorStateMachine</code> and <code>AnimatorState</code> type object</p></li></ul><h3 id="states"><a class="markdownIt-Anchor" href="#states"></a> States</h3><p>All states (state or. state with blendtree inside)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ChildAnimatorState[] childStates = rootStateMachine.states;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> childState <span class="keyword">in</span> childStates)</span><br><span class="line">&#123;</span><br><span class="line">    AnimatorState state = childState.state;</span><br><span class="line">    print(state.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// state with blendtree</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> blendTree = (BlendTree)state.motion;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> child <span class="keyword">in</span> blendTree.children)</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">&quot;\t&quot;</span> + child.motion.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// simple state</span></span><br><span class="line">    catch</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;\t&quot;</span> + state.motion.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QbLtx2O.png" alt="simple state" /></p><p>(Simple state only contains a single clip)</p><p><img src="https://i.imgur.com/vQMjJ5z.png" alt="state with blendtree" /></p><p>(BlendTree nested in a state)</p><h3 id="sub-state-machine"><a class="markdownIt-Anchor" href="#sub-state-machine"></a> Sub-state machine</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ChildAnimatorStateMachine[] childSubStateMachines = rootStateMachine.stateMachines;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> childSubStateMachine <span class="keyword">in</span> childSubStateMachines)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Convert `ChildAnimatorStateMachine` to `AnimatorStateMachine`</span></span><br><span class="line">    AnimatorStateMachine subStateMachine = childSubStateMachine.stateMachine;</span><br><span class="line">    print(subStateMachine.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all states in idle sub state machine</span></span><br><span class="line">    ChildAnimatorState[] states = subStateMachine.states;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> childState <span class="keyword">in</span> states)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;\t&quot;</span> + childState.state.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/j6IoXLr.png" alt="sub state machine" /></p><p>(Essentially, another sub layer of state machine)</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://docs.unity3d.com/Manual/StateMachineBasics.html">Unity Manual - State Machine Basics</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Animations.AnimatorStateMachine.html">Unity Scripting API - AnimatorStateMachine</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Animator.Play.html">Unity Scripting API - Animator.Play</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;This post is not about state machine basic</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="unity" scheme="https://www.xingyulei.com/tags/unity/"/>
    
    <category term="c#" scheme="https://www.xingyulei.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>How to Resize QPixmap</title>
    <link href="https://www.xingyulei.com/post/qt-pixmap-scale/"/>
    <id>https://www.xingyulei.com/post/qt-pixmap-scale/</id>
    <published>2021-08-22T04:00:00.000Z</published>
    <updated>2021-12-18T20:52:27.500Z</updated>
    
    <content type="html"><![CDATA[<h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><p>During my attempts to create custom alignment push buttons, I encountered an issue with icon having<br />jagged looking (even if with low resolution).</p><p>I use a custom <code>paintEvent()</code> drawing <code>QPixmap</code>, and this happens when I use <code>scaled()</code> to resize my pixmap.</p><p>I noticed the icon does not have the jagged look with the built-in <code>setIcon()</code> and <code>setIconSize</code> in<br /><code>QPushButton</code>. So I know there’s some wrong with my approach.</p><h3 id="the-test"><a class="markdownIt-Anchor" href="#the-test"></a> The Test</h3><p>To really show out the difference, I first reduce the resolution of my image.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">low_rez = QtCore.QSize(<span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">high_rez = QtCore.QSize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">pixmap = QtGui.QPixmap(path)</span><br><span class="line"></span><br><span class="line">pixmap = pixmap.scaled(low_rez)</span><br></pre></td></tr></table></figure><p>I then increase the resolution back to normal. The default scale uses <code>FastTransformation</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pixmap = pixmap.scaled(high_rez)</span><br></pre></td></tr></table></figure><p>This is the result:<br /><img src="https://imgur.com/8KiYjlW.png" alt="pixmap-not-smooth" /></p><h3 id="the-solution"><a class="markdownIt-Anchor" href="#the-solution"></a> The Solution</h3><p>I’ve searched many forums and people were all saying: enable the <code>SmoothTransformation</code>, I tried but didn’t work.</p><p>Later on I found out that the Qt translation to Python has a mis-match keyword argument:<br />so instead of <code>transformMode=Qt.SmoothTransformation</code>, it should actually be <code>mode=Qt.SmoothTransformation</code></p><p>So here’s the solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pixmap = pixmap.scaled(</span><br><span class="line">    high_rez,</span><br><span class="line">    aspectRatioMode=QtCore.Qt.KeepAspectRatio,</span><br><span class="line">    mode=QtCore.Qt.SmoothTransformation</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>and result:</p><p><img src="https://imgur.com/TIjyqkm.png" alt="pixmap-smooth" /></p><h3 id="extra"><a class="markdownIt-Anchor" href="#extra"></a> Extra</h3><p>I also found post saying it might be some settings with the <code>QPainter</code>, but it is not the issue for me.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">painter = QtGui.QPainter(self)</span><br><span class="line">painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class="literal">True</span>)</span><br><span class="line">painter.setRenderHint(QtGui.QPainter.SmoothPixmapTransform, <span class="literal">True</span>)</span><br><span class="line">painter.drawPixmap(self.pixmap)</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://doc.qt.io/qt-5/qpixmap.html">Qt Documentation - QPixmap Class</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h3&gt;
&lt;p&gt;During my attempts to create custom alignment push buttons, I e</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Left-align Icon, Center-align Text in Python</title>
    <link href="https://www.xingyulei.com/post/qt-button-alignment/"/>
    <id>https://www.xingyulei.com/post/qt-button-alignment/</id>
    <published>2021-08-21T04:00:00.000Z</published>
    <updated>2022-01-24T04:00:08.519Z</updated>
    
    <content type="html"><![CDATA[<p>I recently needed to display a series of buttons for my shelf tool, the problem I’m having with this is that<br />although every button has an icon and text label, they are displayed as different width. Using <code>center-align</code><br />made it look not uniform.</p><p>Should I go with <code>left-align</code>? Well, there are buttons with relatively longer label and some with shorter ones,<br />so it doesn’t look nice either with empty spaces on the right side.</p><p>So the solution is obvious, separate the alignment of the icon and the label: the icon stays <code>left-align</code> to<br />give a clear sign of broader, and the label would be <code>center-align</code> to make the width look uniform.</p><p><img src="https://i.imgur.com/dMOZpkH.jpg" alt="three-alignment-side-by-side" /><br />(Left: default center align, Center: left align, Right: custom align)</p><p>In the following section, I will demonstrate three methods of achieving this custom alignment effect:</p><p><img src="https://imgur.com/3G6fmVN.png" alt="push-button-alignment" /></p><h3 id="overriding-qpushbutton-paintevent"><a class="markdownIt-Anchor" href="#overriding-qpushbutton-paintevent"></a> Overriding QPushButton <code>paintEvent()</code></h3><p>This method subclass from <code>QPushButton</code> and override the <code>paintEvent()</code> and <code>sizeHint()</code><br />to extend how a button is drawn;</p><p>The alignment of content of the button is default to <code>center-aligned</code>, but<br />we make the pixmap to be drawn on the left-side (5px margin against the left border)</p><p>With this method, we no longer use <code>QIcon</code>, we use <code>QPixmap</code> instead; that is why<br />we created a custom <code>setPixmap()</code> method to our <code>MyButton</code> to give user access<br />to the pixmap being drawn.</p><script src="https://gist.github.com/leixingyu/009a594f3d94643d39b9eee5ac6cf118.js"></script><h3 id="custom-layout-inside-pushbutton"><a class="markdownIt-Anchor" href="#custom-layout-inside-pushbutton"></a> Custom layout inside pushbutton</h3><p>Here is another interesting approach:<br />this method defaults its style to <code>left-aligned</code>, but it only contains the icon.</p><p>What about the push button label(text)?</p><p>It is actually a <code>QLabel</code> placed in the <code>QPushButton</code> layout, and being vertically<br /><code>center-aligned</code>; To modify the push button text, use <code>setText()</code> to the label<br />inside the button layout, instead of the button.</p><script src="https://gist.github.com/leixingyu/78b83e758e74cb56f9da5f076e5c4d9d.js"></script><h3 id="use-qproxystyle"><a class="markdownIt-Anchor" href="#use-qproxystyle"></a> Use <code>QProxyStyle</code></h3><p>I haven’t personally test it because my Qt python binding doesn’t have QProxyStyle included</p><p>but it’s worth putting it here in case someone is able to try it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyStyle</span>(<span class="params">QtWidgets.QProxyStyle</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drawControl</span>(<span class="params">self, element, option, painter, widget=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> element == QtWidgets.QStyle.CE_PushButtonLabel:</span><br><span class="line">            icon = QtGui.QIcon(option.icon)</span><br><span class="line">            option.icon = QtGui.QIcon()</span><br><span class="line">        <span class="built_in">super</span>(ProxyStyle, self).drawControl(element, option, painter, widget)</span><br><span class="line">        <span class="keyword">if</span> element == QtWidgets.QStyle.CE_PushButtonLabel:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> icon.isNull():</span><br><span class="line">                iconSpacing = <span class="number">4</span></span><br><span class="line">                mode = (</span><br><span class="line">                    QtGui.QIcon.Normal</span><br><span class="line">                    <span class="keyword">if</span> option.state &amp; QtWidgets.QStyle.State_Enabled</span><br><span class="line">                    <span class="keyword">else</span> QtGui.QIcon.Disabled</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    mode == QtGui.QIcon.Normal</span><br><span class="line">                    <span class="keyword">and</span> option.state &amp; QtWidgets.QStyle.State_HasFocus</span><br><span class="line">                ):</span><br><span class="line">                    mode = QtGui.QIcon.Active</span><br><span class="line">                state = QtGui.QIcon.Off</span><br><span class="line">                <span class="keyword">if</span> option.state &amp; QtWidgets.QStyle.State_On:</span><br><span class="line">                    state = QtGui.QIcon.On</span><br><span class="line">                window = widget.window().windowHandle() <span class="keyword">if</span> widget <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">                pixmap = icon.pixmap(window, option.iconSize, mode, state)</span><br><span class="line">                pixmapWidth = pixmap.width() / pixmap.devicePixelRatio()</span><br><span class="line">                pixmapHeight = pixmap.height() / pixmap.devicePixelRatio()</span><br><span class="line">                iconRect = QtCore.QRect(</span><br><span class="line">                    QtCore.QPoint(), QtCore.QSize(pixmapWidth, pixmapHeight)</span><br><span class="line">                )</span><br><span class="line">                iconRect.moveCenter(option.rect.center())</span><br><span class="line">                iconRect.moveLeft(option.rect.left() + iconSpacing)</span><br><span class="line">                iconRect = self.visualRect(option.direction, option.rect, iconRect)</span><br><span class="line">                iconRect.translate(</span><br><span class="line">                    self.proxy().pixelMetric(</span><br><span class="line">                        QtWidgets.QStyle.PM_ButtonShiftHorizontal, option, widget</span><br><span class="line">                    ),</span><br><span class="line">                    self.proxy().pixelMetric(</span><br><span class="line">                        QtWidgets.QStyle.PM_ButtonShiftVertical, option, widget</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">                painter.drawPixmap(iconRect, pixmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    app.setStyle(<span class="string">&#x27;fusion&#x27;</span>)</span><br><span class="line">    proxy_style = ProxyStyle(app.style())</span><br><span class="line">    app.setStyle(proxy_style)</span><br><span class="line"></span><br><span class="line">    w = QtWidgets.QWidget()</span><br><span class="line">    lay = QtWidgets.QVBoxLayout(w)</span><br><span class="line">    icons = [</span><br><span class="line">        app.style().standardIcon(standardIcon)</span><br><span class="line">        <span class="keyword">for</span> standardIcon <span class="keyword">in</span> (</span><br><span class="line">            QtWidgets.QStyle.SP_MediaPlay,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaPause,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaSeekBackward,</span><br><span class="line">            QtWidgets.QStyle.SP_MediaSeekForward,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> text, icon <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;Play Pause Backward Forward&quot;</span>.split(), (icons)):</span><br><span class="line">        button = QtWidgets.QPushButton(text)</span><br><span class="line">        button.setIcon(icon)</span><br><span class="line">        lay.addWidget(button)</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/44091339">Stack Overflow - QPushButton icon aligned left with text centered</a></p><p><a href="https://stackoverflow.com/questions/56129402">Stack Overflow - qpushbutton icon left alignment text center alignment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I recently needed to display a series of buttons for my shelf tool, the problem I’m having with this is that&lt;br /&gt;
although every button </summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QPushButton Detect Double Click</title>
    <link href="https://www.xingyulei.com/post/qt-detect-click/"/>
    <id>https://www.xingyulei.com/post/qt-detect-click/</id>
    <published>2021-08-08T04:00:00.000Z</published>
    <updated>2022-01-24T04:00:29.669Z</updated>
    
    <content type="html"><![CDATA[<p>It’s not as easy as it looks</p><h3 id="built-in-double-click"><a class="markdownIt-Anchor" href="#built-in-double-click"></a> Built-in Double Click</h3><p>Hey, I thought this would be easy, since Qt offers a built-in event <code>QEvent.MouseButtonDblClick</code>.<br />But the issue is it couldn’t distinguish a single click vs. a double click.</p><p>Which means, a single click event will also be called if double clicked.</p><p>Solution?</p><h3 id="custom-click-detection-with-timeout"><a class="markdownIt-Anchor" href="#custom-click-detection-with-timeout"></a> Custom click detection with <code>timeout</code></h3><p>Subclass QPushButton and override <code>eventFilter()</code></p><script src="https://gist.github.com/leixingyu/0a38a3d77a848f51cfb3588a3ac19627.js"></script><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.qtcentre.org/threads/7858-Double-Click-Capturing">Qt Centre - Double Click Capturing</a></p><p><a href="https://stackoverflow.com/questions/19247436">Stack Overflow - Pyqt Mouse MouseButtonDblClick event</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It’s not as easy as it looks&lt;/p&gt;
&lt;h3 id=&quot;built-in-double-click&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#built-in-double-click&quot;&gt;&lt;/a&gt; Built-in </summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Connect Signal in For Loop</title>
    <link href="https://www.xingyulei.com/post/qt-signal-in-for-loop/"/>
    <id>https://www.xingyulei.com/post/qt-signal-in-for-loop/</id>
    <published>2021-04-17T04:00:00.000Z</published>
    <updated>2022-01-24T04:01:12.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>We often need to create ui elements on the fly, sometimes we do it in something like a for loop.<br />An example would be creating a series of <code>QPushButton</code> and connect them to a function through<br />different argument values. An example is shown below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Demo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            pushbutton = QtWidgets.QPushButton(<span class="string">&#x27;button &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(index))</span><br><span class="line">            pushbutton.clicked.connect(<span class="keyword">lambda</span>: self.trigger(index))</span><br><span class="line">            layout.addWidget(pushbutton)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trigger</span>(<span class="params">index</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;button &#123;&#125; clicked&#x27;</span>.<span class="built_in">format</span>(index))</span><br></pre></td></tr></table></figure><p>Here I created six <code>QPushButton</code> and when I click them it should output which button is being clicked. But if you<br />run this script and try to click each button it will always output “button 5 clicked” (aka, the last button).<br />It is safely to assume that the argument passed during the for loop always result in the last index.</p><h3 id="explanation"><a class="markdownIt-Anchor" href="#explanation"></a> Explanation</h3><p>Based on a kind response from stackoverflow: lambdas do <strong>not</strong> store the value of button when it is defined.<br />The code describing the lambda function is parsed and compiled but not executed until you actually<br />call the lambda. Therefore, when a button is clicked, the current value of that variable is used (the last index).</p><p>What’s the solution?</p><h3 id="lambda-with-solid-variable"><a class="markdownIt-Anchor" href="#lambda-with-solid-variable"></a> Lambda with solid variable</h3><p>Passing solid variable to the lambda</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pushbutton.clicked.connect(<span class="keyword">lambda</span> _, i=index: self.trigger(index=i))</span><br></pre></td></tr></table></figure><p>Note that we created another temporary variable before index as<br />the first argument passed in the lambda will always return as <code>False</code>.<br />Because Qt defines the signal <code>QAbstractButton.clicked</code> to take a single<br />argument with a default value of <code>False</code>. Since your lambda is handling that signal,<br />it gets called with <code>False</code>.</p><h3 id="partial-approach"><a class="markdownIt-Anchor" href="#partial-approach"></a> Partial approach</h3><p>Use <code>functools.partial</code> also works</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">pushbutton.clicked.connect(partial(self.trigger, index))</span><br></pre></td></tr></table></figure><p>Note that in some cases where wrappers are being used in <code>trigger</code> function, it could be trickier to use this as oppose to <code>lambda</code></p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/27953895">Stack Overflow - First lambda capture of local variable always False</a></p><p><a href="https://stackoverflow.com/questions/46300229">Stack Overflow - Connecting multiples signal/slot in a for loop in pyqt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;We often need to create ui elements on the</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Custom Widget, Dialog, MessageBox (no .ui file)</title>
    <link href="https://www.xingyulei.com/post/qt-template-no-ui/"/>
    <id>https://www.xingyulei.com/post/qt-template-no-ui/</id>
    <published>2021-02-11T05:00:00.000Z</published>
    <updated>2021-12-18T20:55:12.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ui-module-without-ui-file"><a class="markdownIt-Anchor" href="#ui-module-without-ui-file"></a> UI Module without <code>.ui</code> file</h3><p>There is a different between inheriting from QWidget class vs QMainWindow</p><p>Inheriting from QWidget:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritQWidget</span>(<span class="params">QtWidgets.QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(InheritQWidget, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line">        listWidget = QtWidgets.QListWidget()</span><br><span class="line">        <span class="comment">#treeWidget = QtWidgets.QTreeWidget()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># set</span></span><br><span class="line">        <span class="comment"># treeWidget.setParent(listWidget)</span></span><br><span class="line">        layout.addWidget(listWidget)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        listWidget.addItem(<span class="string">&#x27;item A&#x27;</span>)</span><br><span class="line">        listWidget.addItem(<span class="string">&#x27;item B&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Inheriting from QMainWindow</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritQMainWindow</span>(<span class="params">QtWidgets.QMainWindow</span>):</span></span><br><span class="line">    <span class="comment"># Window inherits from QMainWindow the layout is already defined</span></span><br><span class="line">    <span class="comment"># to accommodate any toolbars or any other QMainWindow component</span></span><br><span class="line">    <span class="comment"># use the setCentralWidget() to accommodate this</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(InheritQMainWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialization object</span></span><br><span class="line">        widget = QtWidgets.QWidget()</span><br><span class="line">        layout = QtWidgets.QGridLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set</span></span><br><span class="line">        self.setCentralWidget(widget)</span><br><span class="line">        widget.setLayout(layout)</span><br><span class="line">        </span><br><span class="line">        label = QtWidgets.QLabel(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        layout.addWidget(label, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="custom-dialog"><a class="markdownIt-Anchor" href="#custom-dialog"></a> Custom Dialog</h3><script src="https://gist.github.com/leixingyu/2d14eec59143c2b3622a2bb56375ffc0.js"></script><p>Sometimes you need a quick window to display some information,<br />but the built-in qt message boxes aren’t suitable for the job.</p><hr /><h3 id="custom-widget"><a class="markdownIt-Anchor" href="#custom-widget"></a> Custom Widget</h3><p>You can choose to create a widget class, but also for saving time, you can create<br />a temporary custom widget</p><p>example:</p><script src="https://gist.github.com/leixingyu/f0b339a3fb66c62c87b6ffadf7777df2.js"></script><p>Couple of things worth noting:</p><ol><li><p>correctly initialize the widget</p><p><code>self.customWidget = QtWidgets.QWidget()</code> will allow widget be child of the main window,<br />thus allow widget to close when main window is closed</p><p>so not <code>customWidget = QtWidgets.QWidget()</code> or <code>self.customWidget = QtWidgets.QWidget(self)</code></p></li><li><p>use <code>getattr</code> in combination with <code>QStyle</code> and name of the built-in icon</p></li><li><p>use <code>win.setAttribute(QtCore.Qt.WA_DeleteOnClose)</code> to make sure the child widget is killed<br />after main window is closed, because default close only hides window objects</p></li><li><p><code>self.customWidget.show()</code> is the core command to call it to display</p></li></ol><h3 id="custom-qmessagebox"><a class="markdownIt-Anchor" href="#custom-qmessagebox"></a> Custom <code>QMessageBox</code></h3><p>add custom buttons to the <code>QMessageBox</code> layout</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dialog = QtWidgets.QMessageBox()</span><br><span class="line">dialog.setText(<span class="string">&quot;Overwrite?&quot;</span>)</span><br><span class="line">dialog.setIcon(QtWidgets.QMessageBox.Critical)</span><br><span class="line"></span><br><span class="line">yes_btn = dialog.addButton(<span class="string">&quot;Yes!&quot;</span>, QtWidgets.QMessageBox.YesRole)</span><br><span class="line">no_btn = dialog.addButton(<span class="string">&quot;No&quot;</span>, QtWidgets.QMessageBox.NoRole)</span><br><span class="line">abort_btn = dialog.addButton(<span class="string">&quot;Abort&quot;</span>, QtWidgets.QMessageBox.RejectRole)</span><br><span class="line">dialog.exec_()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dialog.clickedButton() == yes_btn:</span><br><span class="line">    print(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> dialog.clickedButton() == no_btn:</span><br><span class="line">    print(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> dialog.clickedButton() == abort_btn:</span><br><span class="line">    print(<span class="string">&quot;abort&quot;</span>)</span><br></pre></td></tr></table></figure><p>Don’t use the return value of <code>QMessageBox::exec</code>, as it only makes sense<br />for standard buttons. Also don’t rely on <code>buttonRole</code><br />as multiple buttons could be sharing the same role.</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.programiz.com/python-programming/methods/built-in/getattr">Programiz - Python getattr()</a></p><p><a href="https://forum.learnpyqt.com/t/are-there-any-built-in-qicons/185/2">GUIS - Q&amp;A: Are there any built-in QIcons?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ui-module-without-ui-file&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ui-module-without-ui-file&quot;&gt;&lt;/a&gt; UI Module without &lt;code&gt;.ui&lt;/code&gt; fi</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
    <category term="template" scheme="https://www.xingyulei.com/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>Qt Context Menu Template (Menu, Submenu and Action)</title>
    <link href="https://www.xingyulei.com/post/qt-template-context-menu/"/>
    <id>https://www.xingyulei.com/post/qt-template-context-menu/</id>
    <published>2021-02-05T05:00:00.000Z</published>
    <updated>2022-01-24T04:01:23.398Z</updated>
    
    <content type="html"><![CDATA[<script src="https://gist.github.com/leixingyu/74a242d46e06887cc1df426c417541c4.js"></script><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/13799033">Stack Overflow - How to add submenu in Qt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://gist.github.com/leixingyu/74a242d46e06887cc1df426c417541c4.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
    <category term="template" scheme="https://www.xingyulei.com/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>How to Underscore in Python</title>
    <link href="https://www.xingyulei.com/post/py-dunder/"/>
    <id>https://www.xingyulei.com/post/py-dunder/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2021-12-18T20:49:32.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="underscore-naming"><a class="markdownIt-Anchor" href="#underscore-naming"></a> Underscore Naming</h3><p>Single Leading Underscore:</p><ul><li><p><code>_var</code></p></li><li><p>Indicating a name is <strong>protected</strong>, for internal use. Not enforced by python interpreter</p></li></ul><hr /><p>Double Leading Underscore:</p><ul><li><code>__var</code></li><li>Indicating a name is <strong>private</strong>. Enforced by interpreter, attempt to call it will trigger <code>AttributeError</code></li></ul><hr /><p>Double Leading Trailing Underscore:</p><ul><li><code>__var__</code></li><li>Special methods (magic methods) defined by python language, avoid naming your own attribute</li></ul><hr /><p>Single Trailing Underscore:</p><ul><li><code>var_</code></li><li>Avoid naming conflict with python keywords</li></ul><hr /><p>Single Underscore:</p><ul><li><code>_</code></li><li>Temporary variable name, variables that are never used</li><li>Example:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = ([] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> random_list:</span><br><span class="line">    some_operation()</span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://dbader.org/blog/meaning-of-underscores-in-python#">Dan Bader - The Meaning of Underscores in Python</a></p><p><a href="https://www.tutorialsteacher.com/python/public-private-protected-modifiers">Tutorials Teacher - Python - Public, Protected, Private Members</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;underscore-naming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#underscore-naming&quot;&gt;&lt;/a&gt; Underscore Naming&lt;/h3&gt;
&lt;p&gt;Single Leading Underscore:&lt;</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>The use of namedtuple()</title>
    <link href="https://www.xingyulei.com/post/py-named-tuple/"/>
    <id>https://www.xingyulei.com/post/py-named-tuple/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2022-01-25T03:38:33.095Z</updated>
    
    <content type="html"><![CDATA[<p>I recently got side-tracked into exploring the basics of <code>namedtuple()</code> as<br />I got a glimpse of its usage in our engineering codebase. Here’s my summary:</p><h2 id="mutable-and-hashable"><a class="markdownIt-Anchor" href="#mutable-and-hashable"></a> Mutable and Hashable</h2><p>To understand the behavior of <code>namedtuple()</code>, it is best to also visit the<br />concept of Python object’s mutability and hashability. These two concepts are<br />closely linked.</p><p><strong>Hashability</strong>: an object’s hash value is never changed during its lifetime<br />is hashable.</p><blockquote><p>Most of Python’s immutable built-in objects are hashable;<br />mutable containers (such as lists or dictionaries) are not;<br />immutable containers (such as tuples and frozensets)<br />are only hashable if their elements are hashable.<br /><strong>Objects</strong> which are <strong>instances</strong> of user-defined classes are hashable by default</p></blockquote><p><strong>Mutability</strong>: an object with a fixed value and cannot be altered is immutable<br />(For example: <code>int</code>, <code>float</code>, <code>string</code>, <code>tuple</code>).<br />in contrast, an object can keep its value while keeping its <code>id()</code> is mutable.<br />(For example: <code>list</code>, <code>dict</code>)</p><h3 id="hash-and-id"><a class="markdownIt-Anchor" href="#hash-and-id"></a> <code>hash()</code> and <code>id()</code></h3><p><strong>identity</strong>: <code>id()</code>, the identity of the two same value variables are the same<br />If two objects (that exist at the same time) have the same identity, they’re actually two references to the same object.</p><blockquote><p>The <code>is</code> operator compares items by identity, <code>a is b</code> is equivalent to <code>id(a) == id(b)</code>.</p></blockquote><p><strong>hash value</strong>: <code>hash()</code>, hash value is based off an object’s value, and hash value<br />must remain the same for the lifetime of the object. If an object is mutable,<br />then it doesn’t make sense for it to have hash.</p><blockquote><p>The hash value is an integer which is used to quickly compare dictionary keys or sets.</p></blockquote><h3 id="why-hash"><a class="markdownIt-Anchor" href="#why-hash"></a> Why Hash?</h3><p>Hash values are very useful, as they enable quick look-up of values<br />in a large collection of values, it’s commonly used in <code>set</code> and <code>dict</code>.</p><p>with <code>if x in elements:</code>:</p><ul><li><p>In a <code>list</code>, Python needs to go through the whole list<br />and compare <code>x</code>'s value with each value in the list elements.</p></li><li><p>In a <code>set</code>, Python keeps track of each element’s hash,<br />Python will get the hash-value for <code>x</code>,<br />look that up in an internal structure and find elements that have the same hash as <code>x</code>.</p></li></ul><p>It also means you can have non-hashable objects in a <code>list</code>,<br />but not in a <code>set</code> or as <strong>keys</strong> in a <code>dict</code>.</p><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example:</h3><p>There is no way to change an <code>int</code> object’s value without re-assigning (copy) it<br />to a different object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="comment"># id(x) is equal to 3054677212104</span></span><br><span class="line">x = <span class="number">6</span></span><br><span class="line"><span class="comment"># id(x) is equal to 3054677212080</span></span><br></pre></td></tr></table></figure><p>But for <code>list</code>, you can edit its value after assignment while keeping its <code>id()</code><br />the same. (note: use <code>list</code> built-in function rather than re-assignment,<br />this is the same for <code>x.sort</code> vs. <code>x=sorted(x)</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">5</span>]</span><br><span class="line"><span class="comment"># ORIGINAL: id(x) is equal to 3054706521672</span></span><br><span class="line">x.append(<span class="number">6</span>)</span><br><span class="line"><span class="comment"># CORRECT: id(x) is equal to 3054706521672</span></span><br><span class="line">x = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># WRONG: id(x) is equal to 3054713375816</span></span><br></pre></td></tr></table></figure><h2 id="namedtuple"><a class="markdownIt-Anchor" href="#namedtuple"></a> NamedTuple</h2><p>A data class are just regular classes that are geared towards storing state,<br />rather than containing a lot of logic, <code>namedtuple()</code> is one kind of data classes.</p><blockquote><p>Every time you create a class that mostly consists of attributes, you make a data class.</p></blockquote><p>With <code>namedtuple()</code>, you can create <strong>immutable</strong> sequence types<br />that allow you to access their values using descriptive field names<br />and the dot notation instead of unclear integer indices.</p><h3 id="initialization"><a class="markdownIt-Anchor" href="#initialization"></a> Initialization</h3><ol><li><strong>typename</strong>: <code>str</code>, class name of the <code>namedtuple</code></li><li><strong>field names</strong>: names that are used to access values in the <code>namedtuple</code>, it can be declared using any of the following:<ul><li>iterable of strings: [“a”, “b”, “c”]</li><li>a string with name seperated by white spaces: “a b c”</li><li>a string with name separated by commas: “a, b, c”</li></ul></li></ol><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">&quot;Point&quot;</span>, [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; Point</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Point&#x27;&gt;</span></span><br><span class="line">&gt;&gt; Point(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># Point(x=2, y=4)</span></span><br></pre></td></tr></table></figure><h3 id="access-and-edit-value"><a class="markdownIt-Anchor" href="#access-and-edit-value"></a> Access and Edit value</h3><p>It is very straight-forward to access a tuple’s attribute value using dot notation</p><p>this gives <code>namedtuple</code> a great edge against <code>dict</code> or <code>tuple</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person = namedtuple(<span class="string">&#x27;Person&#x27;</span>, <span class="string">&#x27;name children&#x27;</span>)</span><br><span class="line">jj = Person(<span class="string">&#x27;Johnny J&#x27;</span>, [<span class="string">&#x27;Tobby&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; jj.children</span><br><span class="line"><span class="comment"># [&#x27;Tobby&#x27;]</span></span><br></pre></td></tr></table></figure><p>Since <code>namedtuple</code> is immutable, you can’t assign value to its attribute;<br />what you can do is to use <code>._replace()</code>; and also, its value can be mutable, like<br />a <code>list</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; jj.children = [<span class="string">&#x27;Tobby&#x27;</span>, <span class="string">&#x27;Wang&#x27;</span>]</span><br><span class="line"><span class="comment"># AttributeError: can&#x27;t set attribute</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; jj.children.append(<span class="string">&#x27;Wang&#x27;</span>)</span><br><span class="line"><span class="comment"># Correct</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; jj = jj._replace(name=<span class="string">&#x27;John J&#x27;</span>)</span><br><span class="line"><span class="comment"># Correct</span></span><br></pre></td></tr></table></figure><h3 id="using-_asdict"><a class="markdownIt-Anchor" href="#using-_asdict"></a> Using <code>._asdict()</code></h3><p>The built-in function <code>._asdict()</code> converts <code>namedtuple</code> into a dictionary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person = namedtuple(<span class="string">&quot;Person&quot;</span>, <span class="string">&quot;name age height&quot;</span>)</span><br><span class="line">jane = Person(<span class="string">&quot;Jane&quot;</span>, <span class="number">25</span>, <span class="number">1.75</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; jane._asdict()</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Jane&#x27;, &#x27;age&#x27;: 25, &#x27;height&#x27;: 1.75&#125;</span></span><br></pre></td></tr></table></figure><h2 id="dataclass"><a class="markdownIt-Anchor" href="#dataclass"></a> <code>@dataclass</code></h2><p><code>@dataclass</code> came out after Python 3.7, which is similar to <code>namedtuple</code>, but they are mutable.<br />thus, we can set value to a <code>@dataclass</code> attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    country: <span class="built_in">str</span> = <span class="string">&quot;Canada&quot;</span></span><br><span class="line"></span><br><span class="line">jane = Person(<span class="string">&quot;Jane&quot;</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; jane.name = <span class="string">&quot;Jane Doe&quot;</span></span><br><span class="line">&gt;&gt; jane.name</span><br><span class="line"><span class="string">&#x27;Jane Doe&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="forzen-attribute"><a class="markdownIt-Anchor" href="#forzen-attribute"></a> forzen attribute</h3><p>if we want <code>@dataclass</code> to behave like <code>namedtuple</code> with a “protected” attribute,<br />just use <code>@dataclass(frozen=True)</code>.</p><h3 id="override-__iter__"><a class="markdownIt-Anchor" href="#override-__iter__"></a> override <code>__iter__()</code></h3><p><code>@dataclass</code> are also not iterable by default, unlike <code>namedtuple</code>. We can achieve<br />that by implementing the special method <code>.__iter__()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> astuple, dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(astuple(self))</span><br></pre></td></tr></table></figure><h2 id="subclassing-namedtuple"><a class="markdownIt-Anchor" href="#subclassing-namedtuple"></a> Subclassing <code>namedtuple</code></h2><p>Subclassing <code>namedtuple</code> gives us additional functionality.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BasePerson = namedtuple(<span class="string">&quot;BasePerson&quot;</span>, <span class="string">&quot;name birthdate country&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">BasePerson</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A namedtuple subclass to hold a person&#x27;s data.&quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = ()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name: &#123;&#125;, age: &#123;&#125; years old&quot;</span>.<span class="built_in">format</span>(self.name, self.age)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (date.today() - self.birthdate).days // <span class="number">365</span></span><br></pre></td></tr></table></figure><p>In the above example, subclassing from <code>namedtuple</code> provides us better documentation<br />(i.e. <code>Person.__doc__</code>), better string representation (i.e. <code>print jane</code>) and an<br />extra property to access based off a Person’s instance attribute value.</p><h3 id="__slots__"><a class="markdownIt-Anchor" href="#__slots__"></a> <code>__slots__</code></h3><p>The special attribute <code>__slots__</code> explicitly state what attribute you want<br />your class instances to have.</p><p>By default, when an instance (object) is created,<br /><code>__dict__</code> is used to store an object’s (writable) attributes.<br />A <strong>dynamic</strong> dictionary:</p><ol><li>requires more memory</li><li>takes longer time to create.</li></ol><p>Because <code>namedtuple</code> makes immutable instances that are lightweight,<br />we need to prevent the creation of <code>__dict__</code> to get the benefit while subclassing<br />by setting <code>__slots__</code> as empty tuple.</p><h4 id="comparison-__dict__-vs-__slots__"><a class="markdownIt-Anchor" href="#comparison-__dict__-vs-__slots__"></a> Comparison <code>__dict__</code> vs. <code>__slots__</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">      self.name = name</span><br><span class="line">      self.age = age</span><br><span class="line"></span><br><span class="line">john = Person(<span class="string">&#x27;john&#x27;</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; john.__dict__</span><br><span class="line"><span class="comment"># &#123;&#x27;age&#x27;: 15, &#x27;name&#x27;: &#x27;john&#x27;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">john = Person(<span class="string">&#x27;john&#x27;</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; john.__slots__</span><br><span class="line"><span class="comment"># [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line">&gt;&gt; john.__dict__</span><br><span class="line"><span class="comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__dict__&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><p><a href="https://docs.python.org/3/glossary.html">Python Docs - Glossary</a></p><p><a href="https://medium.com/@meghamohan/mutable-and-immutable-side-of-python-c2145cf72747">Medium megha mohan - Mutable vs Immutable Objects in Python</a></p><p><a href="https://realpython.com/python-namedtuple/">Real Python - namedtuple</a></p><p><a href="https://stackoverflow.com/questions/47955263/">Stack Overflow - What are data classes and how are they different from common classes?</a></p><p><a href="https://www.geeksforgeeks.org/python-use-of-__slots__/">Geeks for Geesk - Use of __slots__</a></p><p><a href="https://stackoverflow.com/questions/472000/">Stack Overflow - Usage of __slots__?</a></p><p><a href="https://stackoverflow.com/questions/34402522">Stack Overflow - Difference between hash() and id()</a></p><p><a href="https://stackoverflow.com/questions/38189660/">Stack Overflow - Two variables in Python have same id, but not lists or tuples</a></p><p><a href="https://stackoverflow.com/questions/17585730">Stack Overflow - What does hash do in python?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I recently got side-tracked into exploring the basics of &lt;code&gt;namedtuple()&lt;/code&gt; as&lt;br /&gt;
I got a glimpse of its usage in our engineeri</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="style" scheme="https://www.xingyulei.com/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>Qt Custom Sorting</title>
    <link href="https://www.xingyulei.com/post/qt-sorting/"/>
    <id>https://www.xingyulei.com/post/qt-sorting/</id>
    <published>2021-01-23T05:00:00.000Z</published>
    <updated>2022-01-24T04:01:00.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sorting-overview"><a class="markdownIt-Anchor" href="#sorting-overview"></a> Sorting Overview</h3><p>Sorting happens a lot in qt viewports like list, table and tree. Using<br />convenience class such as item-based widget provides limited sorting options.</p><p>One common thing may occur when you are sorting items is the widget treats their<br />value as <em>string</em> instead of <em>int</em>, which will result incorrect ordering</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;92&quot;</span>, <span class="string">&quot;89&quot;</span>, <span class="string">&quot;40&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;11&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywidget = QtWidgets.QTableWidget()</span><br><span class="line">    mywidget.insertColumn(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        mywidget.insertRow(index)</span><br><span class="line">        value = <span class="built_in">list</span>[index]</span><br><span class="line">        item = QtWidgets.QTableWidgetItem(value)</span><br><span class="line">        mywidget.setItem(index, <span class="number">0</span>, item)</span><br><span class="line"></span><br><span class="line">    mywidget.sortItems(<span class="number">0</span>, QtCore.Qt.AscendingOrder)</span><br><span class="line">    mywidget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>This will sort the list of items based on their string, so the order will be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 10</span><br><span class="line">- 11</span><br><span class="line">- 2</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><p>So naturally, you would need to specify the item value as integer type,<br />but you cannot instantiate item with integer, but <code>setData()</code> will work</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># intead of </span></span><br><span class="line">item = QtWidgets.QTableWidgetItem(<span class="built_in">int</span>(value))</span><br><span class="line"><span class="comment"># do this</span></span><br><span class="line">item.setData(QtCore.Qt.ItemDataRole, <span class="built_in">int</span>(value))</span><br></pre></td></tr></table></figure><p>Now everything will sort by numeric order</p><h3 id="custom-sorting-operator-override"><a class="markdownIt-Anchor" href="#custom-sorting-operator-override"></a> Custom Sorting (Operator override)</h3><p>What if you need more than numeric value for your data, for example, when displaying frame number, you would like to include frame range<br />too. Like frame 1, frame 2, frame 3-7, frame 8, frame 9-14. It looks like using string<br />is the only option.</p><p>This time you need to override value compare operator for these value, that is making<br />your own item class like the following example</p><script src="https://gist.github.com/leixingyu/0eea1cb8e325a8d52cc3a64953faf467.js"></script><p>the <code>__lt__</code> is the less than operator (<code>&lt;</code>)</p><p>Everything should behave correctly</p><h3 id="custom-sorting-qsortfilterproxymodel-class"><a class="markdownIt-Anchor" href="#custom-sorting-qsortfilterproxymodel-class"></a> Custom Sorting (QSortFilterProxyModel Class)</h3><p>To be continued</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/363200">Stack Overflow - Is it possible to sort numbers in a QTreeWidget column?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sorting-overview&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sorting-overview&quot;&gt;&lt;/a&gt; Sorting Overview&lt;/h3&gt;
&lt;p&gt;Sorting happens a lot in qt vi</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="pyqt" scheme="https://www.xingyulei.com/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>Understand Python Imports</title>
    <link href="https://www.xingyulei.com/post/py-import/"/>
    <id>https://www.xingyulei.com/post/py-import/</id>
    <published>2021-01-16T05:00:00.000Z</published>
    <updated>2022-01-24T03:59:38.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="from-import-vs-import"><a class="markdownIt-Anchor" href="#from-import-vs-import"></a> <code>from ... import</code> vs. <code>import</code></h3><p>Always avoid wildcard imports like such:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module <span class="keyword">import</span> *  <span class="comment"># don&#x27;t use this</span></span><br></pre></td></tr></table></figure><p>Instead, use regular import like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module  <span class="comment"># use this</span></span><br></pre></td></tr></table></figure><p>Why?</p><ul><li>using wildcard import will pollute namespaces</li><li>Using wildcard import will <strong>not</strong> import names with a leading underscore (unless the module defines an <code>__all__</code> list)</li><li><em>PEP8</em> recommend using regular import</li></ul><h3 id="what-does-__init__py-do"><a class="markdownIt-Anchor" href="#what-does-__init__py-do"></a> What does <code>__init__.py</code> do?</h3><ol><li><p><code>__init__.py</code> is used to specify a package, when import is trying to find the modules,<br />But it is not required: meaning a package without <code>__init__.py</code>,<br />The system can still find the modules after configuring appropriate <code>PYTHONPATH</code> using<br /><code>sys.path.append</code>.</p></li><li><p><code>__init__.py</code> is executed after importing the package, I’ve seen<br />sub-directory being imported by appending as environment variable within <code>__init__.py</code></p></li></ol><h4 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example:</h4><p>so instead of using <code>import project.foo.bar</code> for the following structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    foo&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        bar&#x2F;</span><br><span class="line">            b.py</span><br></pre></td></tr></table></figure><p>inside the <code>__init__.py</code>, we could do a <code>sys.path.append(PATH_TO_BAR)</code></p><p>so with this file structure, you can just do <code>import project</code></p><p>they could even add the import statement for you in the <code>__init__.py</code>, although it is not transparent.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    foo&#x2F;</span><br><span class="line">        bar&#x2F;</span><br><span class="line">            b.py</span><br></pre></td></tr></table></figure><p>Note: Whatever gets appended last overrides the previous<br />env variable, so import to the same name module will find the latest append</p><h3 id="dot-notation-in-import"><a class="markdownIt-Anchor" href="#dot-notation-in-import"></a> Dot notation (<code>.</code>) in Import</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parent&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    file.py</span><br><span class="line">    one&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        anotherfile.py</span><br><span class="line">    two&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">    three&#x2F;</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure><p>Each dot in your import will refer to something inside the package, could be another package<br />or a module. But it can’t be a class.</p><p>Import python modules could look like:<br /><code>import parent.file</code> or <code>import parent.one.anotherfile</code></p><p>From … import classes or functions look like this:<br /><code>from parent.file import class</code><br />which gives you direct access to the class namespace, but not the example above.</p><h3 id="import-order"><a class="markdownIt-Anchor" href="#import-order"></a> Import Order</h3><p>Based on PEP8, imports should be grouped by the following order:</p><ol><li>Standard library import</li><li>Related third-party import</li><li>Local application/library specific import</li></ol><p><strong>What is Standard Library Imports?</strong></p><p>Standard library are installed automatically by Python installer, full documentation link<br />is here: <a href="https://docs.python.org/3/library/">https://docs.python.org/3/library/</a></p><p><strong>What is the order after grouping?</strong></p><p>There is no specific rules, but based on common preferences, use alphabetical order, with<br />import first and from … import after</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> <span class="function"><span class="keyword">def</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">x</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">g</span> <span class="title">import</span> <span class="title">gg</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">x</span> <span class="title">import</span> <span class="title">xx</span></span></span><br></pre></td></tr></table></figure><h3 id="intra-package"><a class="markdownIt-Anchor" href="#intra-package"></a> Intra-Package</h3><p>In a structure like this, how would you do import from another directory?<br />say from <code>module-x.py</code> import <code>module-a</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top-package&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    sub-package-a&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        module-x.py</span><br><span class="line">        module-y.py</span><br><span class="line">    sub-package-b&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        module-a.py</span><br><span class="line">        module-b.py</span><br></pre></td></tr></table></figure><p>Here’s some examples doing relative imports in <code>module-x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module-y</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module-y</span><br><span class="line"><span class="keyword">from</span> .module-y <span class="keyword">import</span> classA</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> sub-package-b</span><br><span class="line"><span class="keyword">from</span> ..subpackage-b <span class="keyword">import</span> module-a</span><br><span class="line"><span class="keyword">from</span> ..subpackage-b.module-a <span class="keyword">import</span> classB</span><br></pre></td></tr></table></figure><h3 id="import-an-import"><a class="markdownIt-Anchor" href="#import-an-import"></a> Import an import</h3><p>It is a common practice in <code>C#</code> to use import module or static class to stores all the global variables<br />used for settings, or even all the modules. In Python it would be something like:<br /><code>constant.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_a</span><br><span class="line"><span class="keyword">import</span> module_b</span><br><span class="line"><span class="keyword">import</span> module_c</span><br><span class="line"></span><br><span class="line">GLOBAL_VAR_MAX = <span class="number">50</span></span><br><span class="line">GLOBAL_VAR_MIN = <span class="number">10</span></span><br><span class="line">GLOBAL_VAR_TIMEOUT = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">GLOBAL_NAME = <span class="string">r&#x27;random name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or even</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constant</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    gravity = <span class="number">9.8</span></span><br><span class="line">    is_true = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>With this setup, all the module in the same project would just import the <code>constant</code> module and have access to<br />all the imports and variable. I thought this was a neat way to make code cleaner by getting rid of all the duplicated imports<br />that might happen.</p><p>there are also some voices against it:</p><ul><li>based on the style guide: Constants are usually defined on a <em>module</em> level</li><li>also, suggestions have mentioned to refrain from using <em>class</em> as it could be instantiated which makes no sense.</li><li>unless there’s a valid reason for all those modules to be collected under a common name. If not, then they should<br />be kept separately. This is due to documentation, as other people open your file, they don’t get information on<br />what is getting imported (what is needed)</li></ul><h4 id="same-module-import-multiple-times"><a class="markdownIt-Anchor" href="#same-module-import-multiple-times"></a> Same module import multiple times</h4><p>So if multiple files are importing the same module separately, does python optimize the import?</p><p>Yes, python modules are considered as singletons, no matter how many times you import them they get initialized only once.<br />unless reload is being called</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://stackoverflow.com/questions/5027400">Stack Overflow - constants in Python: at the root of the module or in a namespace inside the module?</a></p><p><a href="https://stackoverflow.com/questions/40419582">Stack Overflow - in python, do you need to import modules in each split file?</a></p><p><a href="https://stackoverflow.com/questions/6206204">Stack Overflow - Python: Importing an “import file”</a></p><p><a href="https://stackoverflow.com/questions/296036">Stack Overflow - Does python optimize modules when they are imported multiple times?</a></p><p><a href="https://stackoverflow.com/questions/37974843">Stack Overflow - Why can I import successfully without <strong>init</strong>.py?</a></p><p><a href="https://stackoverflow.com/questions/9427037">Stack Overflow - relative path not working even with <strong>init</strong>.py</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;from-import-vs-import&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#from-import-vs-import&quot;&gt;&lt;/a&gt; &lt;code&gt;from ... import&lt;/code&gt; vs. &lt;code&gt;import</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
    <category term="style" scheme="https://www.xingyulei.com/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>Verlet Integration in Unity</title>
    <link href="https://www.xingyulei.com/post/verlet-integration/"/>
    <id>https://www.xingyulei.com/post/verlet-integration/</id>
    <published>2020-11-19T05:00:00.000Z</published>
    <updated>2022-01-23T03:13:43.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h3><p>When simulating a particle movement, we naturally think of Euler integration, where the position of the particle can be expressed as such: (free falling motion)</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>0.5</mn><mo>∗</mo><mi>g</mi><mo>∗</mo><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x = 0.5*g*t^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>This is an extremely easy use case. The position of the particle can be represented using a function of time. But in real life, a particle can be affected by multiple forces (and even unstabled force caused non-constant acceleration) and Euler integration also has inaccurate estimation when time step is very large.</p><p>In my understanding, the use of Verlet is good for complex particle movement. What it essentially does is relate force with position rather than velocity. The process first calculate the current particle position and the position one step back:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>=</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo>−</mo><mi>X</mi><mtext> </mtext><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi>i</mi><mi>o</mi><mi>u</mi><mi>s</mi><mtext> </mtext><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">velocity = X~current~-X~previous~;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mspace nobreak"> </span><span class="mpunct">;</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mtext> </mtext><mi>p</mi><mi>r</mi><mi>e</mi><mi>v</mi><mi>i</mi><mi>o</mi><mi>u</mi><mi>s</mi><mtext> </mtext><mo>=</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo separator="true">;</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo>=</mo><mi>X</mi><mtext> </mtext><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mo>+</mo><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">X~previous~ = X~current~;X~current~ = X~current~+velocity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace nobreak"> </span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace nobreak"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace nobreak"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace nobreak"> </span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></span></p><p>This works magically, here’s some sample code to help understand it, and a <a href="https://leixingyu.itch.io/rope-simulation">Demo</a>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// without other influence, the following updates the particle position</span></span><br><span class="line">velocity = posNow - posOld;</span><br><span class="line">posOld = posNow;</span><br><span class="line">posNow += velocity;</span><br></pre></td></tr></table></figure><h3 id="calculate-force"><a class="markdownIt-Anchor" href="#calculate-force"></a> Calculate Force</h3><p>What if we want to add gravity to the particle like the free falling above? Just add the acceleration to the current position, and the change will add-up on the next integration. The following also applies to forces like friction.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posNow += GRAVITY; <span class="comment">// not sure if we should multipy Time.deltatime</span></span><br></pre></td></tr></table></figure><h3 id="constraint"><a class="markdownIt-Anchor" href="#constraint"></a> Constraint</h3><p>Constraint are usually in the form of constraining particles to a specific distance, like spring. When mulitple constraints acts on single particle, one constraint will affect the other. To solve this, loop the constraint multiple time for each time step.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> count = <span class="number">0</span>; count &lt; ITERATION; count++)&#123;</span><br><span class="line">    Constriants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constraint on rope to make fixed distance between segments</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Constriants</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; segment<span class="number">-1</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> distance = (currentSeg.posNow - nextSeg.posNow).magnitude;</span><br><span class="line">        <span class="built_in">float</span> error = Mathf.Abs(distance - ropeDist);</span><br><span class="line">        Vector2 changeDir = Vector2.zero;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (distance &gt; ropeDist)</span><br><span class="line">            changeDir = (currentSeg.posNow - nextSeg.posNow).normalized;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; ropeDist)</span><br><span class="line">            changeDir = (nextSeg.posNow - currentSeg.posNow).normalized;</span><br><span class="line">    </span><br><span class="line">        Vector2 changeAmount = changeDir * error;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">            nextSeg.posNow += changeAmount;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            currentSeg.posNow -= changeAmount * <span class="number">0.5f</span>;</span><br><span class="line">            nextSeg.posNow += changeAmount * <span class="number">0.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collision"><a class="markdownIt-Anchor" href="#collision"></a> Collision</h3><p>Penalty based system or projection collision reaction</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example for bounding box collision</span></span><br><span class="line">Vector2 velocity = posNow - posOld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (posNow.x &gt; screenWidth)&#123;</span><br><span class="line">    posNow.x = screenWidth;</span><br><span class="line">    posOld.x = posNow.x + velocity.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (posNow.x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    posNow.x = <span class="number">0</span>;</span><br><span class="line">    posOld.x = posNow.x + velocity.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (posNow.y &gt; screenWidth)&#123;</span><br><span class="line">    posNow.y = screenWidth;</span><br><span class="line">    posOld.y = posNow.y + velocity.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (posNow.y &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    posNow.y = <span class="number">0</span>;</span><br><span class="line">    posOld.y = posNow.y + velocity.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resources"><a class="markdownIt-Anchor" href="#resources"></a> Resources</h3><p><a href="https://www.gamedev.net/articles/programming/math-and-physics/a-verlet-based-approach-for-2d-game-physics-r2714/">Gamedev.net - A Verlet based approach for 2D game physics</a></p><p><a href="https://youtu.be/3HjO_RGIjCU">Youtube - Coding Math: Episode 36 - Verlet Integration Part I</a></p><p><a href="https://www.youtube.com/watch?v=FcnvwtyxLds">Youtube - 2D Rope Tutorial - Make Swinging Rope in Unity (Verlet Integration)</a></p><p><a href="https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet">Wikipedia - Velocity Verlet</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h3&gt;
&lt;p&gt;When simulating a particle movement, we na</summary>
      
    
    
    
    <category term="tech summary" scheme="https://www.xingyulei.com/categories/tech-summary/"/>
    
    
    <category term="unity" scheme="https://www.xingyulei.com/tags/unity/"/>
    
    <category term="c#" scheme="https://www.xingyulei.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Learning Graphics Basics</title>
    <link href="https://www.xingyulei.com/post/graphics-learning/"/>
    <id>https://www.xingyulei.com/post/graphics-learning/</id>
    <published>2020-09-16T04:00:00.000Z</published>
    <updated>2022-01-24T03:57:35.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="glossary"><a class="markdownIt-Anchor" href="#glossary"></a> Glossary</h3><p><a href="https://en.wikipedia.org/wiki/Glossary_of_computer_graphics">Wikipedia - Computer Graphics Glossary</a></p><p><strong>Shader</strong>: programs running on gpu that describes general computation (vertex transformation: vertex shader;<br />shading calculation: fragment shader)</p><p><strong>G-buffer</strong>: a screen space representation of geometry and material information (e.g. color, normal, position/depth)</p><p><strong>Fragment</strong>: is the corresponding pixel generated by geometric primitives,<br />but a pixel on screen can be a product of more than one fragment due to Z-buffering, blending etc.</p><h3 id="vertex-lighting-vs-per-pixel-lighting"><a class="markdownIt-Anchor" href="#vertex-lighting-vs-per-pixel-lighting"></a> Vertex lighting vs. Per-pixel lighting</h3><p><img src="https://www.researchgate.net/profile/Christoph-Guetter/publication/235696712/figure/fig1/AS:299742132228097@1448475501091/The-graphics-pipeline-in-OpenGL-consists-of-these-5-steps-in-the-new-generation-of-cards.png" alt="modern graphics pipeline" /></p><h4 id="vertex-lighting"><a class="markdownIt-Anchor" href="#vertex-lighting"></a> Vertex Lighting</h4><ul><li><p>Lighting is computed per-vertex</p></li><li><p>calculation happens in the vertex shader</p></li><li><p>lighting/color information is<br />then linearly interpolated across faces and rasterized</p></li><li><p>it is cheaper, faster (since there are fewer vertices compared to pixels) but noticeable artifact with low-poly objects</p></li></ul><h4 id="per-pixel-lighting"><a class="markdownIt-Anchor" href="#per-pixel-lighting"></a> Per-Pixel Lighting</h4><ul><li><p>Lighting is computed per-pixel/fragment (but what is this exactly? see the example below)</p></li><li><p>Calculation happens in the fragment shader</p></li><li><p>normal information (passed from vertex shader) is interpolated on the faces, lighting/color is calculated and rasterized.</p></li><li><p>it is more expensive but less artifact</p></li></ul><h3 id="example-of-a-per-pixel-lighting-shader"><a class="markdownIt-Anchor" href="#example-of-a-per-pixel-lighting-shader"></a> Example of a per-pixel lighting shader</h3><h4 id="vertex-shader"><a class="markdownIt-Anchor" href="#vertex-shader"></a> Vertex Shader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">layout (location &#x3D; 0) in vec3 aPos;</span><br><span class="line">layout (location &#x3D; 1) in vec3 aNormal;</span><br><span class="line"></span><br><span class="line">out vec3 FragPos;</span><br><span class="line">out vec3 Normal;</span><br><span class="line"></span><br><span class="line">uniform mat4 model;</span><br><span class="line">uniform mat4 view;</span><br><span class="line">uniform mat4 projection;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    FragPos &#x3D; vec3(model * vec4(aPos, 1.0));</span><br><span class="line">    Normal &#x3D; mat3(transpose(inverse(model))) * aNormal;  </span><br><span class="line">    </span><br><span class="line">    gl_Position &#x3D; projection * view * vec4(FragPos, 1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fragment-shader"><a class="markdownIt-Anchor" href="#fragment-shader"></a> Fragment Shader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">out vec4 FragColor;</span><br><span class="line"></span><br><span class="line">in vec3 Normal;  </span><br><span class="line">in vec3 FragPos;  </span><br><span class="line">  </span><br><span class="line">uniform vec3 lightPos; </span><br><span class="line">uniform vec3 viewPos; </span><br><span class="line">uniform vec3 lightColor;</span><br><span class="line">uniform vec3 objectColor;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ambient</span><br><span class="line">    float ambientStrength &#x3D; 0.1;</span><br><span class="line">    vec3 ambient &#x3D; ambientStrength * lightColor;</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; diffuse </span><br><span class="line">    vec3 norm &#x3D; normalize(Normal);</span><br><span class="line">    vec3 lightDir &#x3D; normalize(lightPos - FragPos);</span><br><span class="line">    float diff &#x3D; max(dot(norm, lightDir), 0.0);</span><br><span class="line">    vec3 diffuse &#x3D; diff * lightColor;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; specular</span><br><span class="line">    float specularStrength &#x3D; 0.5;</span><br><span class="line">    vec3 viewDir &#x3D; normalize(viewPos - FragPos);</span><br><span class="line">    vec3 reflectDir &#x3D; reflect(-lightDir, norm);  </span><br><span class="line">    float spec &#x3D; pow(max(dot(viewDir, reflectDir), 0.0), 32);</span><br><span class="line">    vec3 specular &#x3D; specularStrength * spec * lightColor;  </span><br><span class="line">        </span><br><span class="line">    vec3 result &#x3D; (ambient + diffuse + specular) * objectColor;</span><br><span class="line">    FragColor &#x3D; vec4(result, 1.0);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>As you can see, fragment position and normal information are passed into the fragment shader<br />from vertex shader (where the pre-compute happens), the lighting calculation (Phong lighting)<br />is calculated per-fragment.</p><p>On a related note: gpu cost are related to 1. how many vertices are passed in to the gpu from<br />buffer and 2. how complex the lighting calculation is in the fragment shader (this could be<br />the algorithm/model complexity, and the number of passes);</p><hr /><h3 id="forward-vs-deferred-rendering"><a class="markdownIt-Anchor" href="#forward-vs-deferred-rendering"></a> Forward vs. Deferred Rendering</h3><h4 id="forward-rendering"><a class="markdownIt-Anchor" href="#forward-rendering"></a> Forward Rendering</h4><p>The standard, out-of-the-box rendering technique</p><p>Geometries are passed to gpu, going through vertex shader and fragment shader,<br />with each geometry and each light computed separately one at a time to form the final render.</p><p>Render complexity: O(num of geometry fragments * num of lights)</p><p><img src="https://cdn.tutsplus.com/cdn-cgi/image/width=600/gamedev/uploads/2013/11/forward-v2.png" alt="forward rendering" /></p><h4 id="deferred-rendering"><a class="markdownIt-Anchor" href="#deferred-rendering"></a> Deferred Rendering</h4><p>Render is deferred until all geometry has been processed</p><p>Geometries are passed to gpu, going through vertex shader and fragment shader (without lighting pass),<br />final rendering is computed/combined with multiple render passes<br />(one pass for getting all geometry information to G-buffer,<br />second pass for compute lighting based on the G-buffer).</p><p>Render complexity: O(screen resolution * num of lights)</p><p><img src="https://cdn.tutsplus.com/cdn-cgi/image/width=600/gamedev/uploads/2013/11/deferred-v2.png" alt="deferred rendering" /></p><h4 id="discussion"><a class="markdownIt-Anchor" href="#discussion"></a> Discussion</h4><p>Everything all comes down to lighting, as gpu can easily handle vertex information,<br />but the most expensive are lighting calculation which can easily slow down the rendering.<br />Forward rendering iterates and compute each fragments of each geometry, no matter if it overlaps or is hidden<br />by other fragments. So for each pixel, we could have already run multiple fragment shaders.</p><p>This is where deferred rendering come in handy, the G-buffer stores information such as color, normal and depth.<br />The lighting later on can know how to produce the final render by combining all the information (For example: depth test can<br />also cull out all the fragments that are being obscured). So essentially, each pixel only runs a single fragment shader.</p><hr /><h3 id="rasterization-vs-ray-tracing"><a class="markdownIt-Anchor" href="#rasterization-vs-ray-tracing"></a> Rasterization vs. Ray tracing</h3><p>The forward, deferred rendering techniques are all in the realm of rasterization, which is the<br />most popular and traditional real-time rendering technique. With the advance of hardware, ray tracing,<br />which is computationally demanding (usually used in films/animation) can now be used in<br />real-time video games.</p><h4 id="rasterization"><a class="markdownIt-Anchor" href="#rasterization"></a> Rasterization</h4><p>We gather objects information and projects each one by one on screen (per fragment), fragment shader<br />computes the final color of every fragment to form pixels on screen.</p><p>The fundamental of rasterizing is that for each object/geometry, we look at (rasterize it) it’s verts/triangles<br />to cover pixels.</p><p>So, as discussed in deferred rendering, every object is drawn but not all of them are displayed on screen.<br />This overdraw can be accelerated by using deferred shading’s depth test.</p><p><img src="https://www.scratchapixel.com/images/upload/rasterization/raytracing-raster5.png?" alt="rasterization" /></p><h4 id="ray-tracing"><a class="markdownIt-Anchor" href="#ray-tracing"></a> Ray tracing</h4><p>We cast rays from our eyes (camera) for each pixel and gather information of those rays as they travel<br />through/intersects with objects and interacts with lights<br />to form the final render on screen.</p><p>The fundamental of ray tracing is that for each pixel, we look at (shoot a ray) each object/geometry to see<br />how they contribute to the color of that pixel.</p><p>As for ray tracing, we need to shoot many rays for each pixel, and more when there are reflection and refraction.<br />One way to accelerate this is to use bounding volume.</p><p><img src="https://i.stack.imgur.com/e3SXv.png" alt="ray tracing" /></p><h4 id="discussion-2"><a class="markdownIt-Anchor" href="#discussion-2"></a> Discussion</h4><p>The most significant difference in visual is that ray tracing is physically more accurate<br />than rasterization, thus more realistic. Which is more apparent in dynamic environment with<br />objects that reflects and refract. Rasterization needs many estimation techniques to handle lighting and shadowing<br />such as more render passes, baked light map, cubemap reflection, but ray tracing gets all the results out of the box.</p><p><img src="https://i.stack.imgur.com/e9CSY.png" alt="rasterization vs. ray tracing" /></p><hr /><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://gamedevelopment.tutsplus.com/articles/forward-rendering-vs-deferred-rendering--gamedev-12342">Envato tuts+ - Forward Rendering vs. Deferred Rendering</a></p><p><a href="https://learnopengl.com/Advanced-Lighting/Deferred-Shading">Learn OpenGL - Deferred Shading</a></p><p><a href="https://en.wikipedia.org/wiki/Deferred_shading#Deferred_lighting">Wikipedia - Deferred Lighting</a></p><p><a href="https://learnopengl.com/Lighting/Basic-Lighting">Learn OpenGL - Basic Lighting</a></p><p><a href="https://knowww.eu/nodes/59b8e93cd54a862e9d7e414a">Knowww - Per-vertex vs. per-fragment lighting</a></p><p><a href="https://answers.unity.com/questions/1749305">Unity Forum - What’s the difference between per-pixel and per-vertex lit in Forward Rendering?</a></p><p><a href="https://www.youtube.com/watch?v=dhVJE7g3hig">Youtube - OpenGL Fragment Shaders | How Do Fragment Shaders Work?</a></p><p><a href="https://developer.nvidia.com/blog/ray-tracing-essentials-part-2-rasterization-versus-ray-tracing/">Nvidia - Ray Tracing Essentials</a></p><p><a href="https://computergraphics.stackexchange.com/questions/4585">Stack Exchange - Mirror Reflections: Ray Tracing or Rasterization?</a></p><p><a href="https://www.quora.com/What-is-the-diferrence-between-ray-tracing-and-very-high-shader-details">Quora - What is the difference between ray tracing and very high shader details?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;glossary&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#glossary&quot;&gt;&lt;/a&gt; Glossary&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Glossary_of_com</summary>
      
    
    
    
    <category term="learning log" scheme="https://www.xingyulei.com/categories/learning-log/"/>
    
    
    <category term="graphic programming" scheme="https://www.xingyulei.com/tags/graphic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Maya API (3. Custom Deformer)</title>
    <link href="https://www.xingyulei.com/post/maya-api-deformer/"/>
    <id>https://www.xingyulei.com/post/maya-api-deformer/</id>
    <published>2019-11-11T05:00:00.000Z</published>
    <updated>2021-12-18T20:48:17.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="api-10-custom-deformer-example"><a class="markdownIt-Anchor" href="#api-10-custom-deformer-example"></a> API 1.0 custom deformer Example</h3><script src="https://gist.github.com/leixingyu/78352732cb52c6e797244755ade0bbfe.js"></script><p>Note: <code>MPxDeformerNode</code> is only available in API 2.0</p><p><strong>Custom Attribute vs. Built-in Attribute</strong></p><p>In the last chapter, we know how to create custom numeric type attribute using <code>MFnNumericAttribute</code>.<br />Sometimes in our node, we want to access existing built-in attribute.<br />We do so by using <code>OpenMayaMPx.cvar.MPxDeformerNode_(attributeName)</code> before Maya 2016,<br />we use <code>OpenMayaMPx.cvar.MPxGeometryFilter_(attributeName)</code> after 2016.</p><p><strong>Obtain Input Geometry</strong></p><p>In the sample code, we define our custom function <code>getDeformerInputGeom(self, dataBlock, geomIndex)</code><br />to obtain the input mesh to the deformer node. We will discuss this later.</p><p><strong>Accessory Node</strong></p><p>Accessory node acts like a secondary driver node connected to our deformer so they can influence the deformation. In the sample code, our accessory node is a locator which when we connects its world matrix, it will change our mesh’s deformation when translating.</p><p><strong>Custom Dependency Node vs. Custom Deformer Node</strong></p><p><strong>Registration:</strong><br />In our previous chapter, we register our node using <code>registerNode()</code> with<br />node type: <code>omMPx.MPxNode.kDependNode</code>,<br />in deformer node, we use <code>omMPx.MPxNode.kDeformerNode</code> as our node type.</p><p><strong>Inheritance:</strong><br />We now inherit our class from <code>omMPx.MPxDeformerNode</code> instead of <code>omMPxNode</code><br />there’s still <code>compute()</code> in <code>MPxDeformerNode</code> class,<br />but we want to write our deformation algorithm in <code>deform()</code>.</p><p><strong>Accessory Node:</strong><br /><code>accessoryNodeSetup(self, dagModifier)</code> and <code>accessoryAttribute(self)</code> is override to allow us to control accessory node along with our deformer.</p><h2 id="procedure"><a class="markdownIt-Anchor" href="#procedure"></a> Procedure</h2><h3 id="step-1-declare-attributes-same-as-last-chapter"><a class="markdownIt-Anchor" href="#step-1-declare-attributes-same-as-last-chapter"></a> Step 1: Declare attributes (Same as last chapter)</h3><h3 id="step-2-initialize-node"><a class="markdownIt-Anchor" href="#step-2-initialize-node"></a> Step 2: Initialize Node</h3><p><strong>Node Creator</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> mpx.asMPxPtr(MyDeformer())</span><br></pre></td></tr></table></figure><p>Only API 1.0 is available.</p><p><strong>Node Initializer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeInitializer</span>():</span></span><br><span class="line">    <span class="comment"># 1: create reference to numericAttribute and matrixAttribute function sets</span></span><br><span class="line">    numericAttrFn = om.MFnNumericAttribute()</span><br><span class="line">    matrixAttrFn = om.MFnMatrixAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2: create attribute using the function set</span></span><br><span class="line">    MyDeformer.inNumAttr = numericAttrFn.create(<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, om.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    numericAttrFn.setMin(-<span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.setMax(<span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.setReadable(<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    MyDeformer.inMatAttr = numericAttrFn.create(<span class="string">&#x27;matrix&#x27;</span>, <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    matrixAttrFn.setStorable(<span class="literal">False</span>)</span><br><span class="line">    matrixAttrFn.setConnectable(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.5: access built-in attribute using OpenMayaMpx.cvar.MPxGeometryFilter_outputGeom</span></span><br><span class="line">    outputGeom = mpx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3: attach attribute</span></span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.inNumAttr)</span><br><span class="line">    MyDeformer.addAttribute(MyDeformer.inMatAttr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4: add circuit (relationship in-&gt;out)</span></span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.inNumAttr, ouputGeom)</span><br><span class="line">    MyDeformer.attributeAffects(MyDeformer.inMatAttr, ouputGeom)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5: make attribute paintable</span></span><br><span class="line">    cmds.makePaintable(nodeName, <span class="string">&#x27;weights&#x27;</span>, attrType=<span class="string">&#x27;multiFloat&#x27;</span>, shapeMode=<span class="string">&#x27;deformer&#x27;</span>)</span><br></pre></td></tr></table></figure><p>we access the output Geometry attribute so we can later add relationship to it.</p><p><strong>RegisterNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDeformNode)</span><br></pre></td></tr></table></figure><p><strong>De-registerNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.deregisterNode(nodeID)</span><br></pre></td></tr></table></figure><h3 id="step-3-initialize-node-actual-deform-algorithm"><a class="markdownIt-Anchor" href="#step-3-initialize-node-actual-deform-algorithm"></a> Step 3: Initialize Node （Actual Deform Algorithm）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxDeformNode</span>):</span></span><br><span class="line">    inNumAttr = om.MObject()</span><br><span class="line">    inMatAttr = om.MObject()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">om.MPxDeformNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deform</span>(<span class="params">self, dataBlock, geomIterator, localToWorldMatrix, geomIndex</span>):</span></span><br><span class="line">        <span class="comment"># step 1: access built-in attribute value using attribute name and attribute handle</span></span><br><span class="line">        envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        envelopeHandle = dataBlock.inputValue(envelopeAttr)</span><br><span class="line">        envelopeValue = envelopeHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 1.5: access custom attribute value</span></span><br><span class="line">        inNumHandle = dataBlock.inputValue(MyDeformer.inNumAttr)</span><br><span class="line">        inNumValue = inNumHandle.asFloat()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 1.55: access custom translate value connected to an accessory node</span></span><br><span class="line">        inMatHandle = dataBlock.inputValue(MyDeformer.inMatAttr)</span><br><span class="line">        inMatValue = inNumHandle.asMatrix()</span><br><span class="line">        transMatrix = om.MTransformationMatrix(inMatValue)  <span class="comment"># matrix type</span></span><br><span class="line">        translateValue = transMatrix.getTranslation(om.MSpace.kObject)  <span class="comment"># vector type</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 2: access input mesh</span></span><br><span class="line">        inputMesh = self.getDeformerInputGeom(dataBlock, geomIndex)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 2.5: access mesh normals</span></span><br><span class="line">        meshFn = om.MFnMesh(inputMesh)</span><br><span class="line">        normalVectorArray = om.MFloatVectorArray()  <span class="comment"># create float vector array to store normal vector</span></span><br><span class="line">        meshFn.getVertexNormals(<span class="literal">False</span>, normalVectorArray, om.MSpace.kObject)  <span class="comment"># (average normal or not?, the array to store, normal space)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># step 3: iterate the mesh vertices and deform it</span></span><br><span class="line">        newVertexPosArray = om.MPointArray()  <span class="comment"># to store new vertices position</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geomIterator.isDone():</span><br><span class="line">            vertexPos = geomIterator.position()</span><br><span class="line">            vertexIndex = geomIterator.index()</span><br><span class="line">            normalVector = om.MVector(normalVectorArray[vertexIndex])</span><br><span class="line">            <span class="comment"># built-in function weightValue(dataBlock, geomIndex, vertexIndex)</span></span><br><span class="line">            weight = self.weightValue(dataBlock, geomIndex, vertexIndex)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># vertexPos.x = vertexPos.x + [calculation of normalVector.x and translateValue[0]] * envelopeValue * weight</span></span><br><span class="line">            newVertexPosArray.append(vertexPos)</span><br><span class="line">            geomIterator.<span class="built_in">next</span>()</span><br><span class="line">        geomIterator.setAllPositions(newVertexPosArray)</span><br></pre></td></tr></table></figure><ul><li><p>To access a value from an attribute, we use <code>handle = dataBlock.input/outputValue(MyNode.attr)</code></p></li><li><p>if we have a custom attribute <code>inNumAttr:</code></p><ul><li><code>inNumHandle = dataBlock.inputValue(MyDeformer.inNumAttr)</code></li><li><code>inNumValue = inNumHandle.asFloat()</code></li></ul></li><li><p>if we have a built-in attribte <code>envelope</code>:</p><ul><li>we first get our attribute name <code>envelope</code></li><li><code>envelopeAttr = mpx.cvar.MPxGeometryFilter_envelope</code></li><li><code>envelopeHandle = dataBlock.inputValue(envelopeAttr)</code></li><li><code>envelopeValue = envelopeHandle.asFloat()</code></li></ul></li><li><p>To get normal for individual vertices on our input mesh,<br />we first need to obtain our input mesh using our own function:<br /><code>getDeformerInputGeom(self, dataBlock, geomIndex)</code>.<br />And using mesh function set MeshFn’s <code>getVertexNormals()</code> we store the<br />normal vector in <code>om.MFloatVectorArray()</code> type array.</p></li><li><p>To deform our mesh: we use the geometry iterator to perform iteration on<br />each mesh vertex and re-calculate its position.<br />We combine the use of <code>geoIterator.position()</code> and<br /><code>geomIterator.setPosition(point)</code> or <code>geomIterator.setAllPositions(pointArray)</code>.</p></li><li><p>To access weight value on each vertex, we use built-in<br />function <code>weightValue(dataBlock, geomIndex, vertexIndex)</code>.<br />In which, <code>geomIndex</code> is provided in <code>deform()</code> and <code>vertexIndex</code> is from <code>geomIterator</code>.</p></li></ul><h3 id="step-31-get-in-mesh"><a class="markdownIt-Anchor" href="#step-31-get-in-mesh"></a> Step 3.1: Get in-Mesh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDeformerInputGeom</span>(<span class="params">self, dataBlock, geomIndex</span>):</span></span><br><span class="line">    inputAttr = mpx.cvar.MPxGeometryFilter_input</span><br><span class="line">    inputHandle = dataBlock.outputArrayValue(inputAttr)  <span class="comment"># use outputArray instead of inputArray to avoid re-computation</span></span><br><span class="line">    inputHandle.jumpToElement(geomIndex)</span><br><span class="line">    inputElementHandle = inputHandle.outputValue()</span><br><span class="line"></span><br><span class="line">    inputGeomAttr = mpx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">    inputGeomHandle = inputElementHandle.child(inputGeomAttr)  <span class="comment"># this is different from how we usually get handler</span></span><br><span class="line">    inputGeomMesh = inputGeomHandle.asMesh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inputGeomMesh</span><br></pre></td></tr></table></figure><p>At this point, I can’t fully interpret the meaning of this segment.</p><h3 id="step-4-accessory-node"><a class="markdownIt-Anchor" href="#step-4-accessory-node"></a> Step 4: Accessory Node</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accessoryNodeSetup</span>(<span class="params">self, dagModifier</span>):</span></span><br><span class="line">    <span class="comment"># step1: create the accessory node using the supplied dagModifier</span></span><br><span class="line">    locator = dagModifier.createNode(<span class="string">&#x27;locator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: access accessory node&#x27;s attribute(can&#x27;t use mplug type, has to be mobject type)</span></span><br><span class="line">    <span class="comment"># access dependency node function set</span></span><br><span class="line">    dependNodeFn = om.MFnDependencyNode(locator)</span><br><span class="line">    matrixPlug = dependNodeFn.findPlug(<span class="string">&#x27;worldMatrix&#x27;</span>)  <span class="comment"># this returns mplug type attribute, we need mobject type attribute</span></span><br><span class="line">    matrixAttr = matrixPlug.attribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step3: connect mobject type(required) together</span></span><br><span class="line">    <span class="comment"># param: accessory node(mobject), accessory attr(mobject), deformer node(mobject: using self.thisMObject()), deformer attr(mobject)</span></span><br><span class="line">    mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.inMatAttr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># now the accessory node&#x27;s worldMatrix is driving to the custom in-matrix of the deformer node</span></span><br><span class="line">    <span class="keyword">return</span> mConnectStatus</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accessoryAttribute</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># returns the deformer node attribute connected</span></span><br><span class="line">    <span class="keyword">return</span> MyDeformer.inMatAttr</span><br></pre></td></tr></table></figure><p>The <code>dagModifer</code> is supplied in the accessory node. We use dagModifier’s connect function to<br />connect the accessory node’s attribute to our deformer node’s attribute.<br />In this case, we have accessory’s attribute: <code>worldMatrix</code><br />(a built-in attribute obtained from <code>MFnDependencyNode.findPlug())</code><br />and our custom defined <code>MyDeformer.inMatAttr</code>.</p><p>One thing to note is that, the <code>.connect()</code> only takes MObject which we cannot supply <code>MPlug</code> type<br />object <code>matrixPlug = ...findPlug('attributeName')</code>, we perform an additional step<br /><code>matrixAttr = matrixPlug.attribute()</code> to get the MObject type attribute.</p><p>Now we supply <code>.connect()</code> with parameters: an accessory node (MObject type),<br />accessory node’s attribute (MObject type), deformer node (MObject type)<br />and deformer node’s attribute (MObject type) as follows:<br /><code>mConnectStatus = dagModifier.connect(locator, matrixAttr, self.thisMObject(), MyDeformer.inMatAttr)</code></p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.chadvernon.com/maya-api-programming/">Chad Vernon - Maya API Programming</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;api-10-custom-deformer-example&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#api-10-custom-deformer-example&quot;&gt;&lt;/a&gt; API 1.0 custom deformer Exa</summary>
      
    
    
    
    <category term="maya python api" scheme="https://www.xingyulei.com/categories/maya-python-api/"/>
    
    
    <category term="maya" scheme="https://www.xingyulei.com/tags/maya/"/>
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Maya API (2. Custom Node)</title>
    <link href="https://www.xingyulei.com/post/maya-api-node/"/>
    <id>https://www.xingyulei.com/post/maya-api-node/</id>
    <published>2019-11-10T05:00:00.000Z</published>
    <updated>2021-12-18T20:48:53.264Z</updated>
    
    <content type="html"><![CDATA[<h3 id="api-20-custom-node-example"><a class="markdownIt-Anchor" href="#api-20-custom-node-example"></a> API 2.0 custom node example</h3><script src="https://gist.github.com/leixingyu/6789c67a3aea4258589c78878eeacc99.js"></script><h3 id="data-block-mdatablock"><a class="markdownIt-Anchor" href="#data-block-mdatablock"></a> Data block (MDataBlock)</h3><p>Data block refers the entire container of a node. This container stores all the values for each attribute of the node.</p><p>The datablock of this node is provided in the <code>compute()</code> function.</p><h3 id="plug-mplug"><a class="markdownIt-Anchor" href="#plug-mplug"></a> Plug (MPlug)</h3><p>Plug is the outer plug of the node which provides the connections to other node’s plug. The MPlug usually connects the plug from another node and the value of a certain attribute of this node.</p><p>The plug is also provided in the <code>compute()</code> function</p><h3 id="data-handle-mdatahandle"><a class="markdownIt-Anchor" href="#data-handle-mdatahandle"></a> Data handle (MDataHandle)</h3><p>Data handle usually stores an attribute’s value.</p><p>We can set a value to an attribute using <code>MDataHandle.setType(value)</code>,<br />and get an attribute’s value using <code>**</code>value = MDataHandle.asType()<code>**</code>.</p><h2 id="procedure"><a class="markdownIt-Anchor" href="#procedure"></a> Procedure</h2><h3 id="step-1-declare-attributes-mobject-in-the-class"><a class="markdownIt-Anchor" href="#step-1-declare-attributes-mobject-in-the-class"></a> Step 1: Declare attributes (MObject) in the class</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxNode</span>):</span></span><br><span class="line">    inAttr = om.MObject()</span><br><span class="line">    outAttr = om.MObject()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">om.MPxNode.__init__(self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">self, plug, dataBlock</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>inAttr</code> refers to the input attribute that we are creating,</p><p><code>outAttr</code> refers to the output attribute that we are creating.</p><p>Both are declared as <code>MObject()</code> type.<br />We will later access them using <code>MyNode.inAttr</code> and <code>MyNode.outAttr</code>.</p><h3 id="step-2-initialize-node"><a class="markdownIt-Anchor" href="#step-2-initialize-node"></a> Step 2: Initialize Node</h3><p><strong>Node Creator</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeCreator</span>():</span></span><br><span class="line">    <span class="keyword">return</span> MyNode()</span><br></pre></td></tr></table></figure><p>Node Creator in API 2.0 directly returns an instance to the class,<br />API 1.0 uses a pointer like in command plugin.</p><p><strong>Node Initializer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodeInitializer</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;1: create reference to attribute function set such as numericAttribute&#x27;&#x27;&#x27;</span></span><br><span class="line">    numericAttrFn = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 2: create attribute using the function set&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyNode.inAttr = numericAttrFn.create(<span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, om.MFnNumericData.kFloat, <span class="number">1.0</span>)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">True</span></span><br><span class="line">    MyNode.outAttr = numericAttrFn.create(<span class="string">&#x27;out&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, om.MFnNumericData.kFloat)</span><br><span class="line">    numericAttrFn.readable = <span class="literal">True</span></span><br><span class="line">    numericAttrFn.writable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 3: attach attribute&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyNode.addAttribute(MyNode.inAttr)</span><br><span class="line">    MyNode.addAttribute(MyNode.outAttr)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 4: add circuit (relationship in-&gt;out)&#x27;&#x27;&#x27;</span></span><br><span class="line">    MyNode.attributeAffects(MyNode.inAttr, MyNode.outAttr)</span><br></pre></td></tr></table></figure><ul><li><code>MFnNumericAttribute</code> provides the function sets to create an attribute for numeric type attribute.<br />There’s also <code>MFnMatrixAttribute</code> to create matrix type attribute and so on.</li><li>Using the function set’s <code>create()</code> function, we add parameters for attribute’s<br /><strong>long name, short name, data type, and default value (optional)</strong>.<ul><li>This returns a <code>MObject</code> type attribute which is attached to the function set. We store it in the attribute declared earlier in the class.</li><li>Set the attribute’s property using function set,<br />such as <strong>readable, writable, hidden, storable, connectable</strong><br />(In API1.0, use like this <code>numericAttrFn.setReadable(True)</code>)</li></ul></li><li>Using the <code>MyNode.addAttribute(MyNode.inAttr)</code> to attach an attribute to the node</li><li>Using the <code>MyNode.attributeAffects(MyNode.inAttr, MyNode.outAttr)</code> to design the affect relationship between attributes,<br />in this case, change of <code>inAttr</code> will affect `outAttr.</li></ul><p><strong>RegisterNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.registerNode(nodeName, nodeID, nodeCreator, nodeInitializer, om.MPxNode.kDependNode, nodeClassify)</span><br></pre></td></tr></table></figure><p><strong>Parameters:</strong> name of the node, id of the node, node creator function, node initializer function, node type (DependNode or DeformNode…), node classification (utility, shading…)</p><p><strong>Example:</strong></p><ul><li><code>nodeID = om.MTypeId(0x55555)</code></li><li><code>nodeClassify = 'utility/general'</code></li></ul><p><strong>De-registerNode</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplugin.deregisterNode(nodeID)</span><br></pre></td></tr></table></figure><h3 id="step-3-initialize-node"><a class="markdownIt-Anchor" href="#step-3-initialize-node"></a> Step 3: Initialize Node</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span>(<span class="params">om.MPxNode</span>):</span></span><br><span class="line">    inAttr = om.MObject()</span><br><span class="line">    outAttr = om.MObject()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">om.MPxNode.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">self, plug, dataBlock</span>):</span></span><br><span class="line">        <span class="keyword">if</span> plug == MyNode.outAttr:</span><br><span class="line">            <span class="comment"># 1: get datablock handle (inputValue returns MDataHandle type object)</span></span><br><span class="line">            inHandle = dataBlock.inputValue(MyNode.inAttr)</span><br><span class="line">            outHandle = dataBlock.outputValue(MyNode.outAttr)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2: extract input value from the handle</span></span><br><span class="line">            inValue = inHandle.asFloat()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3: create logic and set output value</span></span><br><span class="line">            outValue = inValue * <span class="number">2</span></span><br><span class="line">            outHandle.setFloat(outValue)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4: mark output plug as clean</span></span><br><span class="line">            outHandle.setClean()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> om.kUnknownParameter</span><br></pre></td></tr></table></figure><ol><li><p>When <code>MyNode.outAttr</code> is dirty (meaning it needs to recompute),<br />we use <code>if plug == MyNode.outAttr:</code> to identify this certain plug.<br />(this if statement will work, even if <code>plug</code> is <code>MPlug</code> type and <code>MyNode.outAttr</code> is <code>MObject</code> type)</p></li><li><p>We have already identified what input attribute is affecting this plug, in order to retrieve the value of this input, we need to attach a data handle on the data block specifying this certain input attribute we want to retrive.<br />Therefore, we have <code>handle = dataBlock.input/outputValue(MyNode.attr)</code></p></li><li><p>Next, we use <code>value = handle.asFloat()</code> and <code>handle.setFloat(value)</code> to get and set the value from and to the attribute. (float type as example)</p></li><li><p>Last, we mark the current plug as clean, by <code>setClean()</code> to the outHandle</p></li></ol><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.chadvernon.com/maya-api-programming/">Chad Vernon - Maya API Programming</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;api-20-custom-node-example&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#api-20-custom-node-example&quot;&gt;&lt;/a&gt; API 2.0 custom node example&lt;/h3&gt;
&lt;s</summary>
      
    
    
    
    <category term="maya python api" scheme="https://www.xingyulei.com/categories/maya-python-api/"/>
    
    
    <category term="maya" scheme="https://www.xingyulei.com/tags/maya/"/>
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Maya API (1. Command Plugin with Flags)</title>
    <link href="https://www.xingyulei.com/post/maya-api-command/"/>
    <id>https://www.xingyulei.com/post/maya-api-command/</id>
    <published>2019-11-09T05:00:00.000Z</published>
    <updated>2021-12-18T20:46:49.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="definition-flags-vs-argument"><a class="markdownIt-Anchor" href="#definition-flags-vs-argument"></a> Definition: “Flags” vs “Argument”</h2><p>Take this as an example:</p><p><code>cmds.group('circle1', 'sphere1', name='group1')</code></p><ul><li><code>circle1</code> and <code>sphere1</code> are arguments</li><li><code>name</code> is the flag and <code>group1</code> is the value</li></ul><p>Another example:</p><p><code>cmds.polyCube(sx=10, axis=[0, 0, 1])</code></p><ul><li><strong>no argument</strong> is specified</li><li><code>sx</code> is the flag’s short name,  <code>subdivisionX</code> is the flag’s long name</li><li><code>[0, 0, 1]</code> is axis flag’s value, each individual number is called parameters</li></ul><h2 id="procedure"><a class="markdownIt-Anchor" href="#procedure"></a> Procedure</h2><h3 id="step-1-declare-flag-name-outside-the-class"><a class="markdownIt-Anchor" href="#step-1-declare-flag-name-outside-the-class"></a> Step 1: Declare flag name outside the class</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firstFlagShortName = <span class="string">&#x27;-f&#x27;</span></span><br><span class="line">firstFlagLongName = <span class="string">&#x27;-first&#x27;</span></span><br><span class="line">secondFlagShortName = <span class="string">&#x27;-s&#x27;</span></span><br><span class="line">secondFlagLongName = <span class="string">&#x27;-second&#x27;</span></span><br><span class="line"><span class="comment"># more flags ...</span></span><br></pre></td></tr></table></figure><h3 id="step-2-add-flag-and-argument-in-syntax-creator-outside-of-class"><a class="markdownIt-Anchor" href="#step-2-add-flag-and-argument-in-syntax-creator-outside-of-class"></a> Step 2:  Add flag and argument in syntax creator outside of class</h3><p>(this syntax creator will be further included in the plugin initialize function)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syntaxCreator</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    create a OpenMaya.MSyntax object to store flags and argument</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    syntax = om.MSyntax()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add flags with short name, long name, and value type</span></span><br><span class="line">    syntax.addFlag(firstFlagShortName, firstFlagLongName, om.MSyntax.kDouble)</span><br><span class="line">    syntax.addFlag(secondFlagShortName, secondFlagLongName, (om.MSyntax.kDouble, om.MSyntax.kDouble, om.MSyntax.kDouble))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add more flags ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add argument using MSyntax.addArg() function</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add argument is not discussed, refer to document later</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> syntax</span><br></pre></td></tr></table></figure><h3 id="step-3-parsing-flags-called-inside-the-classs-doit-function"><a class="markdownIt-Anchor" href="#step-3-parsing-flags-called-inside-the-classs-doit-function"></a> Step 3:  Parsing flags, called inside the class’s <code>doIt</code> function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseArguments</span>(<span class="params">self, args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    instantiate MArgParser object, self.syntax() refers to the syntax created in step 2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    argData = om.MArgParser(self.syntax(), args)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if certain flags are set</span></span><br><span class="line">    <span class="keyword">if</span> argData.isFlagSet(firstFlagShortName):</span><br><span class="line">        firstValue = argData.flagArgumentString(firstFlagShortName, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> argData.isFlagSet(secondFlagShortName):</span><br><span class="line">        secondParam0 = argData.flagArgumentInt(secondFlagShortName, <span class="number">0</span>)</span><br><span class="line">        secondParam1 = argData.flagArgumentInt(secondFlagShortName, <span class="number">1</span>)</span><br><span class="line">        secondParam2 = argData.flagArgumentInt(secondFlagShortName, <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># parse more flags ...</span></span><br></pre></td></tr></table></figure><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://www.chadvernon.com/maya-api-programming/">Chad Vernon - Maya API Programming</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;definition-flags-vs-argument&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#definition-flags-vs-argument&quot;&gt;&lt;/a&gt; Definition: “Flags” vs “Argumen</summary>
      
    
    
    
    <category term="maya python api" scheme="https://www.xingyulei.com/categories/maya-python-api/"/>
    
    
    <category term="maya" scheme="https://www.xingyulei.com/tags/maya/"/>
    
    <category term="python" scheme="https://www.xingyulei.com/tags/python/"/>
    
  </entry>
  
</feed>
